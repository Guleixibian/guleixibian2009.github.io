<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>【转】关于Git你需要知道的一切</title>
    <url>/2022/09/25/git-configuration-and-commands/</url>
    <content><![CDATA[<p>暂且记录一下，作为一个备忘录，方便之后查阅。也可作为初学者上手用。主要还是之前创作过程中提到了需要使用<code>Git</code>哦。</p>
<blockquote>
<p>原文链接：</p>
<p><a href="https://blog.csdn.net/amf12345/article/details/121048818">git配置及常见命令_星辰浩宇的博客-CSDN博客_git配置命令</a></p>
<p><a href="https://blog.csdn.net/Bwen_F/article/details/125007378">Git常用配置命令_油泼刀削面的博客-CSDN博客_git 配置命令</a></p>
</blockquote>
<span id="more"></span>
<h2 id="1-安装后的配置"><a href="#1-安装后的配置" class="headerlink" title="1. 安装后的配置"></a>1. 安装后的配置</h2><p>安装<code>Git</code>后，我们需要本地<code>Git</code>与远程<code>GitHub</code>连接的建立，只有将<code>Git</code>本地与远程的<code>GitHub</code>建立了连接以后我们本地的项目才能上传至远程服务器。</p>
<p>注：下面的命令请使用自己的用户名密码替换</p>
<h3 id="1-1-在Git中配置全局的GitHub账号信息"><a href="#1-1-在Git中配置全局的GitHub账号信息" class="headerlink" title="1.1 在Git中配置全局的GitHub账号信息"></a>1.1 在<code>Git</code>中配置全局的<code>GitHub</code>账号信息</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git config -<span class="literal">-global</span> user.name <span class="string">&quot;username&quot;</span></span><br><span class="line">git config -<span class="literal">-global</span> user.email <span class="string">&quot;email&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="1-2-生成RSA公、私钥文件"><a href="#1-2-生成RSA公、私钥文件" class="headerlink" title="1.2 生成RSA公、私钥文件"></a>1.2 生成<code>RSA</code>公、私钥文件</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">ssh<span class="literal">-keygen</span> <span class="literal">-t</span> rsa <span class="literal">-C</span> <span class="string">&quot;email&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="1-3-配对公、私钥"><a href="#1-3-配对公、私钥" class="headerlink" title="1.3 配对公、私钥"></a>1.3 配对公、私钥</h3><p>命令执行成功后，在本地电脑的名为<code>.ssh</code>的目录下（例如<code>C:\Users\gulei\.ssh\</code>）找到名为<code>id_rsa.pub</code>的文件，打开这个文件后将里面的内容先复制下来。</p>
<p><img data-src="https://s1.ax1x.com/2022/09/25/xEoIk6.png" alt=""></p>
<p>然后我们找到<code>GitHub Settings</code><a href="https://github.com/settings/keys">https://github.com/settings/keys</a>：</p>
<p><img data-src="https://s1.ax1x.com/2022/09/25/xEootK.png" alt=""></p>
<p>在左边的栏目中选择<code>SSH and GPG Keys</code>：然后在出来的右边的框框中选择 <code>New SSH</code>：其中<code>Title</code>可以随意写个名字，<code>Key</code>里面的内容需要把刚刚复制的id_rsa.pub文件中的内容拷贝进去，最后点击<code>Add SSH key</code>即可。 </p>
<p><img data-src="https://s1.ax1x.com/2022/09/25/xEoTfO.png" alt=""></p>
<p>我们如何检测是否已经连接上了呢？使用以下命令：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">ssh <span class="literal">-T</span> git@github.com</span><br></pre></td></tr></table></figure>
<p><img data-src="https://s1.ax1x.com/2022/09/25/xE7qeA.png" alt=""></p>
<hr>
<h2 id="2-命令列表"><a href="#2-命令列表" class="headerlink" title="2. 命令列表"></a>2. 命令列表</h2><p><img data-src="https://s1.ax1x.com/2022/09/25/xE7HLd.png" alt=""></p>
<p>说明：</p>
<p><code>workspace</code>：工作区</p>
<p><code>staging area</code>：暂存区/缓存区</p>
<p><code>local repository</code>：版本库或本地仓库</p>
<p><code>remote repository</code>：远程仓库</p>
<p>1、查看用户名和邮箱地址：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git config user.name</span><br><span class="line">git config user.email</span><br></pre></td></tr></table></figure>
<p>2、修改用户名和邮箱地址</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git config -<span class="literal">-global</span> user.name  <span class="string">&quot;xxxx&quot;</span> </span><br><span class="line">git config -<span class="literal">-global</span> user.email  <span class="string">&quot;xxxx&quot;</span>  </span><br></pre></td></tr></table></figure>
<p>3、如果我们是直接拉下代码库</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git clone url</span><br></pre></td></tr></table></figure>
<p>那么我们这个文件夹本身已经就是一个<code>git</code>仓库了</p>
<p>4、如果我们是本地已有的文件去与远程代码库相关联的话，需要执行以下步骤：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> 文件/   <span class="comment">#即需要进入这个文件</span></span><br><span class="line">git init   <span class="comment">#将文件初始化为git文件</span></span><br><span class="line"><span class="comment">#与远程代码库添加链接</span></span><br><span class="line">git remote add origin 代码库链接</span><br><span class="line"><span class="comment">#后续提交过程都一样</span></span><br></pre></td></tr></table></figure>
<p>5、查看本地分支</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure>
<p>注:名称前面加* 号的是当前的分支</p>
<p>6、在本地创建新的分支并切换到该分支上</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git checkout <span class="literal">-b</span> private</span><br></pre></td></tr></table></figure>
<p>等价于</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git branch private       <span class="comment">#在本地新创建private分支</span></span><br><span class="line">git checkout private     <span class="comment">#切换到新分支上</span></span><br></pre></td></tr></table></figure>
<p>7、查看远程分支</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git branch <span class="literal">-r</span></span><br></pre></td></tr></table></figure>
<p>8、查看所有的分支（包括本地分支以及远程分支）</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git branch <span class="literal">-a</span></span><br></pre></td></tr></table></figure>
<p>加上<code>-a</code>参数可以查看远程分支，远程分支会用红色表示出来（如果你开了颜色支持的话）</p>
<p>9、查看本地分支与远程分支的映射关系</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git branch <span class="literal">-vv</span></span><br></pre></td></tr></table></figure>
<p>10、重命名本地分支</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git branch <span class="literal">-m</span>  </span><br></pre></td></tr></table></figure>
<p>11、删除本地分支</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git branch <span class="literal">-d</span> name</span><br></pre></td></tr></table></figure>
<p>12、删除远程分支</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git branch <span class="literal">-r</span> <span class="literal">-d</span> origin/name</span><br><span class="line">git push origin:name  <span class="comment">#删除后还需要推送到远程</span></span><br></pre></td></tr></table></figure>
<p>13、查看当前远程仓库信息</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git remote <span class="literal">-vv</span></span><br></pre></td></tr></table></figure>
<p>14、远程新建分支后，本地查看不到，使用以下命令同步</p>
<p>远程新建分支，本地在未创建此新分支前便已经<code>clone</code>下来，现在本地查看分支时没有发现远程新建的 分支，使用如下命令更新，即可查看远程新建的分支</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git remote <span class="comment">#列出远程主机</span></span><br><span class="line">git remote update origin -<span class="literal">-prune</span>  <span class="comment">#更新远程主机origin整理分支</span></span><br></pre></td></tr></table></figure>
<p>15、当我们手动在远程分支上建立了一个新的分支，本地也有一个新的分支时，想要本地的新分支提交到这个远程的新分支上时，我们需要新建本地分支与远程分支的关联</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git branch -<span class="literal">-set</span><span class="literal">-upstream</span><span class="literal">-to</span>=origin/name name</span><br></pre></td></tr></table></figure>
<p>eg：我的本地新建了一个分支<code>private</code>远程新建了一个分支<code>dev</code>把二者进行关联起来</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git branch -<span class="literal">-set</span><span class="literal">-upstream</span><span class="literal">-to</span>=origin/dev private</span><br><span class="line">或者</span><br><span class="line">git branch <span class="literal">-u</span> orgin/dev private</span><br></pre></td></tr></table></figure>
<p>如果此时已经在本地private分支上，可以直接</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git branch <span class="literal">-u</span> origin/dev</span><br></pre></td></tr></table></figure>
<p>输出：Branch <code>private</code> set up to track remote branch <code>dev</code> from <code>origin</code>.</p>
<p>16、如果本地有分支，但是远程没有分支对应，如何把本地的分支提交到远程</p>
<p>假设有本地分支<code>dev</code>，远端没有该分支。此时<code>push</code>或者<code>pull</code>时，就不知道跟踪的是哪个分支。使用以下指令：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git push -<span class="literal">-set</span><span class="literal">-upstream</span> origin dev</span><br></pre></td></tr></table></figure>
<p>推送后远程也会出现<code>dev</code>分支,二者建立连接，注意此时的<code>dev</code>并不是你给远程分支起的名字，而是根据本地的分支推送上去的远程分支。后续<code>push</code>和<code>pull</code>时，就不用指定分支。</p>
<p>17、本地没有某个分支，远程仓库有此分支，怎样拉取远端分支代码到本地分支？</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git checkout -<span class="literal">-track</span> origin/name</span><br></pre></td></tr></table></figure>
<p>此时，本地会自动创建分支<code>name</code>与远端分支同名，并与远端分支<code>name</code>关联。</p>
<p>建议在弄分支的时候最好本地与远程的名字相同便于区别</p>
<p>18、如果我们的本地文件已经关联了远程代码仓库，现在想关联新的代码仓库</p>
<p>一种方法是将原来的远程仓库重新命名，另一种是删除原来的远程仓库；二者选其一，然后再新关联现在的远程仓库即可</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#方法一：重命名原来的远程仓库</span></span><br><span class="line">git remote rename origin old<span class="literal">-origin</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#方法二：删除原来的远程仓库</span></span><br><span class="line">git remote <span class="built_in">rm</span> origin</span><br><span class="line"></span><br><span class="line"><span class="comment">#上面的二选一，然后重新指定新的源</span></span><br><span class="line">git remote add origin [<span class="type">url</span>]</span><br></pre></td></tr></table></figure>
<p>19、撤销本地分支与远程分支的映射关系</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git branch -<span class="literal">-unset</span><span class="literal">-upstream</span></span><br></pre></td></tr></table></figure>
<p>此时，当前的本地分支与远程分支解除关系</p>
<p>20、<code>Git</code>在本地新建分支后，可做远程分支关联。关联目的是，如果在本地分支下进行<code>pull</code>和<code>push</code>操作时 ，便不需要指定远程的分支。</p>
<p>21、新建本地分支与远程分支相关联</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git checkout <span class="literal">-b</span> dev origin/dev   <span class="comment"># 新建本地分支dev与远程dev分支相关联</span></span><br></pre></td></tr></table></figure>
<p>22、执行<code>push</code>推送代码</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></table></figure>
<p>23、本地分支<code>push</code>到远程分支</p>
<p>本地分支 <code>v2</code> 远程分支<code>dev</code></p>
<p>如果没有建立关系时</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git push origin v2:dev</span><br><span class="line">或者</span><br><span class="line">git push origin dev <span class="comment">#本地已经在v2分支上</span></span><br></pre></td></tr></table></figure>
<p>如果已经建立关联 且目前的本地分支就在<code>v2</code>上，我们可以直接使用</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></table></figure>
<p>24、多人合作提交代码</p>
<p>在我们自己提交之前如果有别人提交了代码，我们需要先进行合并代码，再进行<code>push</code></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">方案一：合并远程分支代码</span><br><span class="line">git fetch origin </span><br><span class="line">(git remote update有的时候可能需要同步一下远程和本地）</span><br><span class="line">git merge origin/远程分支名　　</span><br><span class="line">方案二：合并远程分支代码</span><br><span class="line">git pull origin 远程分支名</span><br><span class="line">（<span class="built_in">PS</span>：方案一和方案二选择一个即可）</span><br><span class="line">执行push推送代码</span><br><span class="line">git push origin 本地分支名:远程分支名</span><br></pre></td></tr></table></figure>
<p>25、<code>git fetch</code>与 <code>git pull</code>的区别</p>
<p><code>git fetch</code>是将远程主机的最新内容拉到本地，用户在检查了以后决定是否合并到工作本机分支中。</p>
<p>而<code>git pull</code>则是将远程主机的最新内容拉下来后直接合并，即：<code>git pull = git fetch + git merge</code>，这样可能会产生冲突。</p>
<p>26、<code>git fetch</code>的常见命令如下：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git fetch &lt;远程主机名&gt; //这个命令将某个远程主机的更新全部取回本地，一般远程主机名为origin</span><br><span class="line">git fetch &lt;远程主机名&gt; &lt;分支名&gt; //注意之间有空格,返回的是特定分支的更新</span><br></pre></td></tr></table></figure>
<p>例如：返回<code>origin</code>主机的<code>maste</code>分支的更新 <code>git fetch origin master</code><br>取回更新后，会返回一个<code>FETCH_HEAD</code>，指的是某个<code>branch</code>在服务器上的最新状态，我们可以在本地通过它查看刚取回的更新信息：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git log <span class="literal">-p</span> FETCH_HEAD</span><br></pre></td></tr></table></figure>
<p>可以看到返回的信息包括更新的文件名，更新的作者和时间，以及更新的代码（红色删除和绿色新增）。</p>
<p>我们可以通过这些信息来判断是否产生冲突，以确定是否将更新<code>merge</code>到当前分支。</p>
<p>如果我们需要合并的话执行以下代码</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git merge FETCH_HEAD</span><br></pre></td></tr></table></figure>
<p>总结：<code>fetch</code>合并到分支需要两步</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git fetch origin master //从远程主机的master分支拉取最新内容  </span><br><span class="line">git merge FETCH_HEAD    //将拉取下来的最新内容合并到当前所在的分支中</span><br></pre></td></tr></table></figure>
<p>27、<code>git pull</code>的常见用法</p>
<p>将远程主机的某个分支的更新取回，并与本地指定的分支合并</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</span><br></pre></td></tr></table></figure>
<p>如果需要合并的本地分支就是目前的分支，则后面的本地分支名可以省略</p>
<p>28、还原代码至某个版本</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git reset -<span class="literal">-hard</span> 版本号</span><br></pre></td></tr></table></figure>
<p>如果不加版本号，默认恢复上一个版本</p>
<p>29、合并分支到<code>master</code>上</p>
<p>首先切换到<code>master</code>分支上</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git checkout master</span><br></pre></td></tr></table></figure>
<p>如果是多人开发的话 需要把远程<code>master</code>上的代码<code>pull</code>下来</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git pull origin master</span><br></pre></td></tr></table></figure>
<p>然后我们把<code>dev</code>分支的代码合并到<code>master</code>上</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git merge dev</span><br></pre></td></tr></table></figure>
<p>30、查看状态</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure>
<p>31、git配置的一些其他的命令</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git log                                         <span class="comment"># 查看提交历史 </span></span><br><span class="line">git config core.ignorecase false                <span class="comment"># 设置大小写敏感</span></span><br></pre></td></tr></table></figure>
<p>32、git的提交</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">diff</span>                        <span class="comment"># 查看变更内容 </span></span><br><span class="line">git add .                       <span class="comment"># 跟踪所有改动过的文件 </span></span><br><span class="line">git add                         <span class="comment"># 跟踪指定的文件 </span></span><br><span class="line">git <span class="built_in">mv</span>                          <span class="comment"># 文件改名 </span></span><br><span class="line">git <span class="built_in">rm</span>                          <span class="comment"># 删除文件 </span></span><br><span class="line">git <span class="built_in">rm</span> -<span class="literal">-cached</span>                 <span class="comment"># 停止跟踪文件但不删除 </span></span><br><span class="line">git commit <span class="literal">-m</span> <span class="string">&quot;commit message&quot;</span>  <span class="comment"># 提交所有更新过的文件 </span></span><br><span class="line">git commit -<span class="literal">-amend</span>              <span class="comment"># 修改最后一次提交</span></span><br></pre></td></tr></table></figure>
<p>33.查看历史</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git log                         <span class="comment"># 查看提交历史 </span></span><br><span class="line">git log <span class="literal">-p</span>                      <span class="comment"># 查看指定文件的提交历史 </span></span><br><span class="line">git blame                       <span class="comment"># 以列表方式查看指定文件的提交历史</span></span><br></pre></td></tr></table></figure>
<p>34.撤销</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git reset -<span class="literal">-hard</span> HEAD           <span class="comment"># 撤消工作目录中所有未提交文件的修改内容</span></span><br><span class="line">git reset -<span class="literal">-hard</span>                <span class="comment"># 撤销到某个特定版本 </span></span><br><span class="line">git checkout HEAD               <span class="comment"># 撤消指定的未提交文件的修改内容 </span></span><br><span class="line">git checkout --                 <span class="comment"># 同上一个命令 </span></span><br><span class="line">git revert                      <span class="comment"># 撤消指定的提交分支与标签</span></span><br></pre></td></tr></table></figure>
<p>35.分支与标签</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git branch                      <span class="comment"># 显示所有本地分支 </span></span><br><span class="line">git checkout                    <span class="comment"># 切换到指定分支或标签 </span></span><br><span class="line">git branch                      <span class="comment"># 创建新分支 </span></span><br><span class="line">git branch <span class="literal">-d</span>                   <span class="comment"># 删除本地分支 </span></span><br><span class="line">git tag                         <span class="comment"># 列出所有本地标签 </span></span><br><span class="line">git tag                         <span class="comment"># 基于最新提交创建标签 </span></span><br><span class="line">git tag <span class="literal">-a</span> <span class="string">&quot;v1.0&quot;</span> <span class="literal">-m</span> <span class="string">&quot;一些说明&quot;</span>  <span class="comment"># -a指定标签名称，-m指定标签说明 </span></span><br><span class="line">git tag <span class="literal">-d</span>                      <span class="comment"># 删除标签  </span></span><br><span class="line">git checkout dev                <span class="comment"># 合并特定的commit到dev分支上 </span></span><br><span class="line">git cherry<span class="literal">-pick</span> <span class="number">62</span>ecb3</span><br></pre></td></tr></table></figure>
<p>36.合并与衍合</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git merge                       <span class="comment"># 合并指定分支到当前分支 </span></span><br><span class="line">git merge -<span class="literal">-abort</span>               <span class="comment"># 取消当前合并，重建合并前状态 </span></span><br><span class="line">git merge dev <span class="literal">-Xtheirs</span>          <span class="comment"># 以合并dev分支到当前分支，有冲突则以dev分支为准</span></span><br><span class="line">git rebase                      <span class="comment"># 衍合指定分支到当前分支</span></span><br></pre></td></tr></table></figure>
<p>37.远程操作</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git remote <span class="literal">-v</span>                   <span class="comment"># 查看远程版本库信息 </span></span><br><span class="line">git remote show                 <span class="comment"># 查看指定远程版本库信息 </span></span><br><span class="line">git remote add                  <span class="comment"># 添加远程版本库 </span></span><br><span class="line">git remote remove               <span class="comment"># 删除指定的远程版本库 </span></span><br><span class="line">git fetch                       <span class="comment"># 从远程库获取代码 </span></span><br><span class="line">git pull                        <span class="comment"># 下载代码及快速合并 </span></span><br><span class="line">git push                        <span class="comment"># 上传代码及快速合并</span></span><br></pre></td></tr></table></figure>
<p>38.打包</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git archive -<span class="literal">-format</span>=zip -<span class="literal">-output</span> ../file.zip master    <span class="comment"># 将master分支打包成file.zip文件，保存在上一级目录 </span></span><br><span class="line">git archive -<span class="literal">-format</span>=zip -<span class="literal">-output</span> ../v1.<span class="number">2</span>.zip v1.<span class="number">2</span>      <span class="comment"># 打包v1.2标签的文件，保存在上一级目录v1.2.zip文件中 </span></span><br><span class="line">git archive -<span class="literal">-format</span>=zip v1.<span class="number">2</span> &gt; ../v1.<span class="number">2</span>.zip             <span class="comment"># 作用同上一条命令</span></span><br></pre></td></tr></table></figure>
<p>39.远程与本地合并</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git init                              <span class="comment"># 初始化本地代码仓 </span></span><br><span class="line">git add .                             <span class="comment"># 添加本地代码 </span></span><br><span class="line">git commit <span class="literal">-m</span> <span class="string">&quot;add local source&quot;</span>      <span class="comment"># 提交本地代码 </span></span><br><span class="line">git pull origin master                <span class="comment"># 下载远程代码 </span></span><br><span class="line">git merge master                      <span class="comment"># 合并master分支</span></span><br><span class="line">git push <span class="literal">-u</span> origin master             <span class="comment"># 上传代码</span></span><br></pre></td></tr></table></figure>
<hr>
<h2 id="3-gitignore文件"><a href="#3-gitignore文件" class="headerlink" title="3. .gitignore文件"></a>3. <code>.gitignore</code>文件</h2><p>在主目录下创建 .gitignore 文件</p>
<ol>
<li><p>忽略文件中的空行或以井号（<code>#</code>）开始的行将会被忽略。</p>
</li>
<li><p>可以使用Linux通配符。例如：星号（<code>*</code>）代表任意多个字符，问号（<code>?</code>）代表一个字符，方括号（<code>[abc]</code>）代表可选字符范围，大括号（<code>&#123;string1,string2,…&#125;</code>）代表可选的字符串等。</p>
</li>
<li><p>如果名称的最前面有一个感叹号（<code>!</code>），表示例外规则，将不被忽略。</p>
</li>
<li><p>如果名称的最前面是一个路径分隔符（<code>/</code>），表示要忽略的文件在此目录下，而子目录中的文件不忽略。</p>
</li>
<li><p>如果名称的最后面是一个路径分隔符（<code>/</code>），表示要忽略的是此目录下该名称的子目录，而非文件（默认文件或目录都忽略）。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#为注释 </span><br><span class="line">*.txt #忽略所有 .txt结尾的文件,这样的话上传就不会被选中！</span><br><span class="line">!lib.txt #但lib.txt除外</span><br><span class="line">/temp #仅忽略项目根目录下的TODO文件,不包括其它目录temp</span><br><span class="line">build/ #忽略build/目录下的所有文件</span><br><span class="line">doc/*.txt #会忽略 doc/notes.txt 但不包括 doc/server/arch.txt</span><br></pre></td></tr></table></figure>
</li>
</ol>
<hr>
<p><strong>THE END</strong>感谢您的阅读~</p>
]]></content>
      <categories>
        <category>GitHub</category>
        <category>命令行</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>临时解决方案：Cloudflare Workers与镜像站</title>
    <url>/2022/09/17/cloudflare-workers-for-mirror/</url>
    <content><![CDATA[<p>最早接触到<code>Cloudflare</code>是在研究<code>jsdelivr</code>被墙后的解决方案，发现一个<code>cloudflare.jsdelivr.net</code>的节点。那是我第一次听到<code>Cloudflare</code>的大名。可没想到，真正把我拉回<code>Cloudflare</code>的，不是所谓高防<code>DDOS</code>，也不是<code>CDN</code>加速，竟梅开二度又是被墙。这次，是<code>Cloudflare</code>自己被墙了。</p>
<span id="more"></span>
<p>引用另一篇文章（<code>Hexo</code>网站教程）：</p>
<blockquote>
<p><strong>《论我捣鼓<code>GiTalk</code>的简要过程》</strong></p>
<p>写到这里我本想去截图，结果一看启动不起来，没办法新建<code>issue</code>也没法登录<code>GitHub</code>账号。在排查了设置、网络的问题后，我发现有个致命的问题：<code>cors-anywhere.azm.workers.dev</code>被墙掉，然后<code>GiTalk</code>无法进行<code>GitHub oauth</code>，就不能用了。</p>
<p>我于是尝试自己搭<code>worker</code>，结果发现是所有<code>Cloudflare worker</code>的链接都被墙掉了，然后我就彻底没招了，就只好作罢。不过……真的吗？</p>
<p>后来我找到了<code>GiTalk</code>的仓库，里面有类似的<code>Issue</code>，甚至翻出了<code>CORS Anywhere</code>的仓库，找到了一个基于<code>Heroku</code>的备用<code>demo</code>链接。在一个<code>Issue</code>的<a href="https://github.com/Rob--W/cors-anywhere/issues/301#issuecomment-870990778">某条评论</a>、<a href="https://github.com/Rob--W/cors-anywhere/issues/301#issuecomment-1012060775">某条评论</a>中找到了一些备用链接。于是，就可以恢复正常了！</p>
<p><strong>另及：今年（2022）11月28号<code>Heroku</code>会关闭所有的免费服务，所以你看到类似<code>herokuapp.com</code>的链接都不用试了…</strong></p>
</blockquote>
<p>这个<code>cors-anywhere.azm.workers.dev</code>，就是基于<code>Cloudflare Workers</code>的。上文也提到了我自己搭<code>Workers</code>，在这其中也有一点意外地收获。</p>
<h2 id="1-关于我们今天到底在干什么"><a href="#1-关于我们今天到底在干什么" class="headerlink" title="1. 关于我们今天到底在干什么"></a>1. 关于我们今天到底在干什么</h2><p><code>Cloudflare Workers</code>，乍一听，我也没猜出这是什么东西。其实<code>Workers</code>是<code>Cloudflare</code>提供的免费服务器，类似<code>GitHub</code>给你一个二级域名（<code>GitHub</code>就是<code>github.io</code>，<code>Cloudflare Workers</code>是<code>workers.dev</code>）。这个<code>CF Workers</code>是支持自定义处理逻辑，说白点自己用<code>JavaScript</code>写脚本。当然我不会把事情变得太复杂，肯定是有可重用的模板的。</p>
<p>但是我们没事儿搭服务器干嘛？不知道各位有没有听说过反向代理这回事。差不多如此：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Client --&gt; BlockedServer: GET xxx</span><br><span class="line">note left of Client: I cannot GET!</span><br><span class="line">Client -&gt; CF Worker: GET Blocked Server for me!</span><br><span class="line">note right of CF Worker: I can GET!</span><br><span class="line">CF Worker -&gt; BlockedServer: GET xxx</span><br><span class="line">BlockedServer -&gt; CF Worker: Responce xxx</span><br><span class="line">CF Worker -&gt; Client: Responce xxx</span><br></pre></td></tr></table></figure>
<p><img data-src="https://s1.ax1x.com/2022/09/19/x9oTDU.png" alt=""></p>
<p><del>其实说白了这也是一种fq的方式嘛。</del></p>
<h2 id="2-关于你的Cloudflare账号"><a href="#2-关于你的Cloudflare账号" class="headerlink" title="2. 关于你的Cloudflare账号"></a>2. 关于你的<code>Cloudflare</code>账号</h2><p>照例的话，我们肯定是要简要说一下官网和账号的….<a href="https://www.cloudflare.com/">https://www.cloudflare.com/</a>，很人性化的就跳到中文版啊。</p>
<p><img data-src="https://s1.ax1x.com/2022/09/19/x9oL59.png" alt=""></p>
<p>然后点击注册就好了耶：</p>
<p><img data-src="https://s1.ax1x.com/2022/09/19/x9o7bF.png" alt=""></p>
<p>然后有一些配置，按照自己的喜好填就好了啊。不过由于资金问题和一些使用方式上的原因，我们选<code>Free Plan</code>就可以了，千万不要为了这个白买高级版，每天100000个请求完全完全够用了！</p>
<h2 id="3-开始搭建Worker"><a href="#3-开始搭建Worker" class="headerlink" title="3. 开始搭建Worker"></a>3. 开始搭建<code>Worker</code></h2><h3 id="3-1-初始化Worker"><a href="#3-1-初始化Worker" class="headerlink" title="3.1 初始化Worker"></a>3.1 初始化<code>Worker</code></h3><p>我们接下来以访问速度慢的<code>GitHub</code>和无法访问的<code>Google</code>为例。</p>
<p><img data-src="https://s1.ax1x.com/2022/09/19/x9obE4.png" alt=""></p>
<p>我们在左侧的菜单中找到<code>Workers</code>，然后新建服务：</p>
<p><img data-src="https://s1.ax1x.com/2022/09/19/x9oXCR.png" alt=""></p>
<p>由于我们只需要一个<code>worker</code>就可以完成一切任务，我就没有新注册了。</p>
<p><img data-src="https://s1.ax1x.com/2022/09/19/x9oqUJ.png" alt=""></p>
<p>进来之后有这样一个界面：</p>
<p><img data-src="https://s1.ax1x.com/2022/09/24/xAMkng.png" alt=""></p>
<p>我们点击快速编辑，进入编辑页面：</p>
<p><img data-src="https://s1.ax1x.com/2022/09/24/xAME7j.png" alt=""></p>
<p>左边是处理逻辑，右边则是预览部分。</p>
<h3 id="3-2-加入代码"><a href="#3-2-加入代码" class="headerlink" title="3.2 加入代码"></a>3.2 加入代码</h3><p>先复制一下下面这段代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 你要镜像的网站.</span></span><br><span class="line"><span class="keyword">const</span> upstream = <span class="string">&#x27;www.google.com&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 镜像网站的目录，比如你想镜像某个网站的二级目录则填写二级目录的目录名，镜像 google 用不到，默认即可.</span></span><br><span class="line"><span class="keyword">const</span> upstream_path = <span class="string">&#x27;/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 镜像站是否有手机访问专用网址，没有则填一样的.</span></span><br><span class="line"><span class="keyword">const</span> upstream_mobile = <span class="string">&#x27;www.google.com&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 屏蔽国家和地区.</span></span><br><span class="line"><span class="keyword">const</span> blocked_region = [<span class="string">&#x27;KP&#x27;</span>, <span class="string">&#x27;SY&#x27;</span>, <span class="string">&#x27;PK&#x27;</span>, <span class="string">&#x27;CU&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 屏蔽 IP 地址.</span></span><br><span class="line"><span class="keyword">const</span> blocked_ip_address = [<span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="string">&#x27;127.0.0.1&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 镜像站是否开启 HTTPS.</span></span><br><span class="line"><span class="keyword">const</span> https = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 文本替换.</span></span><br><span class="line"><span class="keyword">const</span> replace_dict = &#123;</span><br><span class="line">    <span class="string">&#x27;$upstream&#x27;</span>: <span class="string">&#x27;$custom_domain&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;//www.google.com&#x27;</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下保持默认，不要动</span></span><br><span class="line">addEventListener(<span class="string">&#x27;fetch&#x27;</span>, <span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line">    event.respondWith(fetchAndApply(event.request));</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fetchAndApply</span>(<span class="params">request</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> region = request.headers.get(<span class="string">&#x27;cf-ipcountry&#x27;</span>).toUpperCase();</span><br><span class="line">    <span class="keyword">const</span> ip_address = request.headers.get(<span class="string">&#x27;cf-connecting-ip&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> user_agent = request.headers.get(<span class="string">&#x27;user-agent&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> response = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">let</span> url = <span class="keyword">new</span> URL(request.url);</span><br><span class="line">    <span class="keyword">let</span> url_hostname = url.hostname;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (https == <span class="literal">true</span>) &#123;</span><br><span class="line">        url.protocol = <span class="string">&#x27;https:&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        url.protocol = <span class="string">&#x27;http:&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">await</span> device_status(user_agent)) &#123;</span><br><span class="line">        <span class="keyword">var</span> upstream_domain = upstream;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> upstream_domain = upstream_mobile;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    url.host = upstream_domain;</span><br><span class="line">    <span class="keyword">if</span> (url.pathname == <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">        url.pathname = upstream_path;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        url.pathname = upstream_path + url.pathname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (blocked_region.includes(region)) &#123;</span><br><span class="line">        response = <span class="keyword">new</span> Response(<span class="string">&#x27;Access denied: WorkersProxy is not available in your region yet.&#x27;</span>, &#123;</span><br><span class="line">            <span class="attr">status</span>: <span class="number">403</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (blocked_ip_address.includes(ip_address)) &#123;</span><br><span class="line">        response = <span class="keyword">new</span> Response(<span class="string">&#x27;Access denied: Your IP address is blocked by WorkersProxy.&#x27;</span>, &#123;</span><br><span class="line">            <span class="attr">status</span>: <span class="number">403</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> method = request.method;</span><br><span class="line">        <span class="keyword">let</span> request_headers = request.headers;</span><br><span class="line">        <span class="keyword">let</span> new_request_headers = <span class="keyword">new</span> Headers(request_headers);</span><br><span class="line"></span><br><span class="line">        new_request_headers.set(<span class="string">&#x27;Host&#x27;</span>, url.hostname);</span><br><span class="line">        new_request_headers.set(<span class="string">&#x27;Referer&#x27;</span>, url.hostname);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> original_response = <span class="keyword">await</span> fetch(url.href, &#123;</span><br><span class="line">            <span class="attr">method</span>: method,</span><br><span class="line">            <span class="attr">headers</span>: new_request_headers</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> original_response_clone = original_response.clone();</span><br><span class="line">        <span class="keyword">let</span> original_text = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">let</span> response_headers = original_response.headers;</span><br><span class="line">        <span class="keyword">let</span> new_response_headers = <span class="keyword">new</span> Headers(response_headers);</span><br><span class="line">        <span class="keyword">let</span> status = original_response.status;</span><br><span class="line"></span><br><span class="line">        new_response_headers.set(<span class="string">&#x27;access-control-allow-origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">        new_response_headers.set(<span class="string">&#x27;access-control-allow-credentials&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line">        new_response_headers.delete(<span class="string">&#x27;content-security-policy&#x27;</span>);</span><br><span class="line">        new_response_headers.delete(<span class="string">&#x27;content-security-policy-report-only&#x27;</span>);</span><br><span class="line">        new_response_headers.delete(<span class="string">&#x27;clear-site-data&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> content_type = new_response_headers.get(<span class="string">&#x27;content-type&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (content_type.includes(<span class="string">&#x27;text/html&#x27;</span>) &amp;&amp; content_type.includes(<span class="string">&#x27;UTF-8&#x27;</span>)) &#123;</span><br><span class="line">            original_text = <span class="keyword">await</span> replace_response_text(original_response_clone, upstream_domain, url_hostname);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            original_text = original_response_clone.body</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        response = <span class="keyword">new</span> Response(original_text, &#123;</span><br><span class="line">            status,</span><br><span class="line">            <span class="attr">headers</span>: new_response_headers</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">replace_response_text</span>(<span class="params">response, upstream_domain, host_name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> text = <span class="keyword">await</span> response.text()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> i, j;</span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> replace_dict) &#123;</span><br><span class="line">        j = replace_dict[i]</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="string">&#x27;$upstream&#x27;</span>) &#123;</span><br><span class="line">            i = upstream_domain</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="string">&#x27;$custom_domain&#x27;</span>) &#123;</span><br><span class="line">            i = host_name</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (j == <span class="string">&#x27;$upstream&#x27;</span>) &#123;</span><br><span class="line">            j = upstream_domain</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (j == <span class="string">&#x27;$custom_domain&#x27;</span>) &#123;</span><br><span class="line">            j = host_name</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> re = <span class="keyword">new</span> <span class="built_in">RegExp</span>(i, <span class="string">&#x27;g&#x27;</span>)</span><br><span class="line">        text = text.replace(re, j);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> text;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">device_status</span>(<span class="params">user_agent_info</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> agents = [<span class="string">&quot;Android&quot;</span>, <span class="string">&quot;iPhone&quot;</span>, <span class="string">&quot;SymbianOS&quot;</span>, <span class="string">&quot;Windows Phone&quot;</span>, <span class="string">&quot;iPad&quot;</span>, <span class="string">&quot;iPod&quot;</span>];</span><br><span class="line">    <span class="keyword">var</span> flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> v = <span class="number">0</span>; v &lt; agents.length; v++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (user_agent_info.indexOf(agents[v]) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后我们把它复制到左边的代码块中。这里面有几个我们需要修改的地方：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 你要镜像的网站.</span></span><br><span class="line"><span class="keyword">const</span> upstream = <span class="string">&#x27;www.google.com&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 镜像网站的目录，比如你想镜像某个网站的二级目录则填写二级目录的目录名，镜像 google 用不到，默认即可.</span></span><br><span class="line"><span class="keyword">const</span> upstream_path = <span class="string">&#x27;/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 镜像站是否有手机访问专用网址，没有则填一样的.</span></span><br><span class="line"><span class="keyword">const</span> upstream_mobile = <span class="string">&#x27;www.google.com&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 文本替换.</span></span><br><span class="line"><span class="keyword">const</span> replace_dict = &#123;</span><br><span class="line">    <span class="string">&#x27;$upstream&#x27;</span>: <span class="string">&#x27;$custom_domain&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;//www.google.com&#x27;</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一定要保证<code>upstream</code>、<code>upstream_mobile</code>、<code>replace_dict</code>中三个网址是一样的。</p>
<p>然后保存一下，点保存并部署即可。</p>
<p>现在看一下效果吧：</p>
<p><img data-src="https://s1.ax1x.com/2022/09/24/xAMABQ.png" alt=""></p>
<p><img data-src="https://s1.ax1x.com/2022/09/24/xAMijS.png" alt=""></p>
<p>可惜的是，那个部署出来的<code>workers.dev</code>链接是不能使用的。不过反过来想，我们已经获得了谷歌的永久访问，不是么？</p>
<p><strong>THE END</strong>感谢您的阅读~</p>
]]></content>
      <categories>
        <category>加速</category>
      </categories>
      <tags>
        <tag>Cloudflare</tag>
        <tag>加速</tag>
      </tags>
  </entry>
  <entry>
    <title>针、圆周率与……Python?</title>
    <url>/2023/01/02/buffons-neddle-in-python/</url>
    <content><![CDATA[<blockquote>
<p>万事皆可变，万事亦皆有概率，而偏偏是日常生活中无比普遍的它，有时能创造出一个奇迹。蒲丰投针就恰恰体现了这一点。</p>
<p>一根小小的针，也可以投出整个宇宙。</p>
</blockquote>
<p>蒲丰投针实验，本是我们伟长七下的一次数学实验课，课后我将它深化了一下，作为一个编程课题，即“用<code>Python</code>模拟蒲丰投针”。这里用一篇博文，记录一下这次实验课中我的探究成果。</p>
<p><em>注：写作这篇文章时，我已经八上结束了，故在一些细节可能会有记忆上的偏差，还请谅解。</em></p>
<span id="more"></span>
<h2 id="1-何谓“蒲丰投针”？"><a href="#1-何谓“蒲丰投针”？" class="headerlink" title="1. 何谓“蒲丰投针”？"></a>1. 何谓“蒲丰投针”？</h2><ol>
<li><p>取一张白纸，在上面画上许多条间距为$a$的平行线。</p>
</li>
<li><p>取一根长度为$l(l≤a)$的针，随机地向画有平行直线的纸上掷$n$次，观察针与直线相交的次数，记为$m$。</p>
</li>
<li><p>计算针与直线相交的概率．</p>
</li>
</ol>
<p>布丰本人证明了，这个概率是：</p>
<script type="math/tex; mode=display">
p=\frac{2l}{\pi a} (其中π为圆周率)</script><p>由于它与$\pi$有关，于是人们想到利用投针试验来估计圆周率的值。</p>
<p>布丰发现：有利的扔出与不利的扔出两者次数的比，是一个包含$\pi$的表示式．如果针的长度等于$a/2$，那么扔出的概率为$1/\pi$．扔的次数越多，由此能求出越为精确的$\pi$的值。</p>
<hr>
<h2 id="2-纯输出版本与实验的简化"><a href="#2-纯输出版本与实验的简化" class="headerlink" title="2. 纯输出版本与实验的简化"></a>2. 纯输出版本与实验的简化</h2><p>在着手写带有<code>GUI</code>的版本前，我们不妨先对这个实验进行一些简化。我们可以假设这些间距相等的直线都无限长，故这时我们没有必要再去模拟针的<code>x</code>坐标（因为它可以从0取到正无穷，继而没有意义）与纸的宽度，只需要模拟<code>y</code>坐标即可。</p>
<h3 id="2-1-程序初始化"><a href="#2-1-程序初始化" class="headerlink" title="2.1 程序初始化"></a>2.1 程序初始化</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*-Coding:UTF-8-*-</span></span><br><span class="line"><span class="keyword">import</span> math, random</span><br><span class="line"></span><br><span class="line">lineYlist = [<span class="number">12</span>, <span class="number">24</span>, <span class="number">36</span>, <span class="number">48</span>, <span class="number">60</span>, <span class="number">72</span>, <span class="number">84</span>, <span class="number">96</span>, <span class="number">108</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inRange</span>(<span class="params">n, start, end = <span class="number">0</span></span>):</span></span><br><span class="line">    <span class="keyword">return</span> start &lt;= n &lt;= end <span class="keyword">if</span> end &gt;= start <span class="keyword">else</span> end &lt;= n &lt;= start</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#x27;&#x27;This is a Python program to get the approximate value of PI. It simulated the Buffon&#x27;s needle problem 10 times by dropping 100000 needles each time.</span></span><br><span class="line"><span class="string">Here we go...</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>这一段中我们定义了一个列表和一个辅助函数。我这里定义纸的长度为120单位，<code>lineYlist</code>中以12单位为间隔确定了所有的直线<code>y</code>坐标。<code>inRange()</code>这个函数用于判断某个值<code>n</code>是否在<code>start</code>和<code>end</code>之间（且无需考虑<code>start</code>和<code>end</code>的大小关系，可以取等），这在后面会很有用。</p>
<h3 id="2-2-定义Pin类与计算y坐标"><a href="#2-2-定义Pin类与计算y坐标" class="headerlink" title="2.2 定义Pin类与计算y坐标"></a>2.2 定义<code>Pin</code>类与计算<code>y</code>坐标</h3><blockquote>
<p>如果针的长度等于$a/2$，那么扔出的概率为$1/\pi$．</p>
</blockquote>
<p>为了方便计算，我们针的长度取12的一半，6。我们这个<code>Pin</code>类会生成两个参数，<code>y</code>坐标和掉落角度<code>angle</code>，储存在<code>self.coords</code>这个变量里。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pin</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line">        <span class="comment"># [0]: angle [1]: y1 [2]: y2</span></span><br><span class="line">        self.coords = [random.randint(<span class="number">0</span>, <span class="number">180</span>), random.randint(<span class="number">0</span>, <span class="number">120</span>), <span class="literal">None</span>]</span><br><span class="line">        self.angle = self.coords[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>
<p>具体定义如下：</p>
<p><img data-src="https://s1.ax1x.com/2023/01/03/pSPO9SK.png" alt=""></p>
<p>这里对<code>angle</code>的定义为：</p>
<p><img data-src="https://s1.ax1x.com/2023/01/03/pSPOCQO.png" alt=""></p>
<p>根据一点简单的三角函数，我们可以知道：</p>
<script type="math/tex; mode=display">
\frac{h}{6} =
\begin{cases}
\sin{(90-angle)} \quad & 0 \le angle \le 90 \\
\sin{(angle-90)} \quad & 90 \lt angle \le 180
\end{cases}</script><p>所以通过<code>y1</code>计算<code>y2</code>的方法就是（这里用了一开始定义的<code>inRange</code>函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> inRange(self.angle, <span class="number">0</span>, <span class="number">90</span>):</span><br><span class="line">    self.coords[<span class="number">2</span>] = self.coords[<span class="number">1</span>] - math.sin(math.radians(<span class="number">90</span> - self.coords[<span class="number">0</span>])) * <span class="number">6</span></span><br><span class="line"><span class="keyword">elif</span> inRange(self.angle, <span class="number">91</span>, <span class="number">180</span>):</span><br><span class="line">    self.coords[<span class="number">2</span>] = self.coords[<span class="number">1</span>] + math.sin(math.radians(self.coords[<span class="number">0</span>] - <span class="number">90</span>)) * <span class="number">6</span></span><br></pre></td></tr></table></figure>
<p>所以完整的<code>__init__()</code>函数就如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pin</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line">        <span class="comment"># [0]: angle [1]: y1 [2]: y2</span></span><br><span class="line">        self.coords = [random.randint(<span class="number">0</span>, <span class="number">180</span>), random.randint(<span class="number">0</span>, <span class="number">120</span>), <span class="literal">None</span>]</span><br><span class="line">        self.angle = self.coords[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> inRange(self.angle, <span class="number">0</span>, <span class="number">90</span>):</span><br><span class="line">            self.coords[<span class="number">2</span>] = self.coords[<span class="number">1</span>] - math.sin(math.radians(<span class="number">90</span> - self.coords[<span class="number">0</span>])) * <span class="number">6</span></span><br><span class="line">        <span class="keyword">elif</span> inRange(self.angle, <span class="number">91</span>, <span class="number">180</span>):</span><br><span class="line">            self.coords[<span class="number">2</span>] = self.coords[<span class="number">1</span>] + math.sin(math.radians(self.coords[<span class="number">0</span>] - <span class="number">90</span>)) * <span class="number">6</span></span><br></pre></td></tr></table></figure>
<h3 id="2-3-碰撞检测"><a href="#2-3-碰撞检测" class="headerlink" title="2.3 碰撞检测"></a>2.3 碰撞检测</h3><p>在这个简化版的程序里面，我们只要写一个循环，判断这根针的<code>y1</code>和<code>y2</code>是否包含<code>lineYlist</code>中的某一项即可。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">checkCollide</span>(<span class="params">self, y1: <span class="built_in">int</span>, y2: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span></span><br><span class="line">self.collided = [<span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">False</span>]</span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> lineY <span class="keyword">in</span> lineYlist:</span><br><span class="line">    <span class="keyword">if</span> inRange(lineY, y1, y2):</span><br><span class="line">        self.collided[count] = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        self.collided[count] = <span class="literal">False</span></span><br><span class="line">    count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="literal">True</span> <span class="keyword">in</span> self.collided:</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"><span class="keyword">else</span>: </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>
<p>我这里用的方法可能有点笨，用一个和<code>lineYlist</code>长度相同的列表来分别记录是否跟<code>lineYlist</code>中的每一项碰撞。最后再判断这个列表中是否有<code>True</code>（且理论上来说，只能有一个）即可。</p>
<h3 id="2-4-主循环与完整代码"><a href="#2-4-主循环与完整代码" class="headerlink" title="2.4 主循环与完整代码"></a>2.4 主循环与完整代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*-Coding:UTF-8-*-</span></span><br><span class="line"><span class="keyword">import</span> math, random</span><br><span class="line"></span><br><span class="line">lineYlist = [<span class="number">12</span>, <span class="number">24</span>, <span class="number">36</span>, <span class="number">48</span>, <span class="number">60</span>, <span class="number">72</span>, <span class="number">84</span>, <span class="number">96</span>, <span class="number">108</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inRange</span>(<span class="params">n, start, end = <span class="number">0</span></span>):</span></span><br><span class="line">    <span class="keyword">return</span> start &lt;= n &lt;= end <span class="keyword">if</span> end &gt;= start <span class="keyword">else</span> end &lt;= n &lt;= start</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#x27;&#x27;This is a Python program to get the approximate value of PI. It simulated the Buffon&#x27;s needle problem 10 times by dropping 100000 needles each time.</span></span><br><span class="line"><span class="string">Here we go...</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pin</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line">        <span class="comment"># [0]: angle [1]: y1 [2]: y2</span></span><br><span class="line">        self.coords = [random.randint(<span class="number">0</span>, <span class="number">180</span>), random.randint(<span class="number">0</span>, <span class="number">120</span>), <span class="literal">None</span>]</span><br><span class="line">        self.angle = self.coords[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> inRange(self.angle, <span class="number">0</span>, <span class="number">90</span>):</span><br><span class="line">            self.coords[<span class="number">2</span>] = self.coords[<span class="number">1</span>] - math.sin(math.radians(<span class="number">90</span> - self.coords[<span class="number">0</span>])) * <span class="number">6</span></span><br><span class="line">        <span class="keyword">elif</span> inRange(self.angle, <span class="number">91</span>, <span class="number">180</span>):</span><br><span class="line">            self.coords[<span class="number">2</span>] = self.coords[<span class="number">1</span>] + math.sin(math.radians(self.coords[<span class="number">0</span>] - <span class="number">90</span>)) * <span class="number">6</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Some error occured when calculating y2!&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">checkCollide</span>(<span class="params">self, y1: <span class="built_in">int</span>, y2: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span></span><br><span class="line">        self.collided = [<span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">False</span>]</span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> lineY <span class="keyword">in</span> lineYlist:</span><br><span class="line">            <span class="keyword">if</span> inRange(lineY, y1, y2):</span><br><span class="line">                self.collided[count] = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.collided[count] = <span class="literal">False</span></span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="literal">True</span> <span class="keyword">in</span> self.collided:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>: </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    totalCollided = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100000</span>):</span><br><span class="line">        pin = Pin()</span><br><span class="line">        ifCollided = pin.checkCollide(pin.coords[<span class="number">1</span>], pin.coords[<span class="number">2</span>])</span><br><span class="line">        <span class="comment"># print(pin.coords[0], pin.coords[1], pin.coords[2], ifCollided)</span></span><br><span class="line">        <span class="keyword">if</span> ifCollided:</span><br><span class="line">            totalCollided += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">100000</span> / totalCollided)</span><br></pre></td></tr></table></figure>
<p>最后的话我们就循环10次，每次”投掷“100000根针并判断是否碰撞并计数。最后用次数100000除以碰撞次数即可。据测试，这种方法的精确度在十分位（即精确到<code>3.1</code>）。</p>
<p><img data-src="https://s1.ax1x.com/2023/01/03/pSiSQXV.png" alt=""></p>
<hr>
<h2 id="3-绘图版本的蒲丰投针"><a href="#3-绘图版本的蒲丰投针" class="headerlink" title="3. 绘图版本的蒲丰投针"></a>3. 绘图版本的蒲丰投针</h2><p>在这个版本里会更加复杂，既要模拟<code>x</code>坐标，也要模拟<code>y</code>坐标，且同时要判断碰撞和出界。绘图我先是用<code>tkinter</code>写了一遍，后来用<code>pygame</code>重写了一遍（而且比较复杂）。</p>
<h3 id="3-1-tkinter版本"><a href="#3-1-tkinter版本" class="headerlink" title="3.1 tkinter版本"></a>3.1 <code>tkinter</code>版本</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*-Coding:UTF-8-*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Preparing and Vars</span></span><br><span class="line"><span class="keyword">import</span> math, random, time</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#x27;&#x27;This is a Python program to get the approximate value of PI. It simulated the Buffon&#x27;s needle problem by dropping 1000 needles.</span></span><br><span class="line"><span class="string">(With GUI this time!!!)</span></span><br><span class="line"><span class="string">Here we go...</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">lineYlist = [<span class="number">48</span>, <span class="number">96</span>, <span class="number">144</span>, <span class="number">192</span>, <span class="number">240</span>, <span class="number">288</span>, <span class="number">336</span>, <span class="number">384</span>, <span class="number">432</span>, <span class="number">480</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inRange</span>(<span class="params">n : <span class="built_in">int</span>, start : <span class="built_in">int</span>, end : <span class="built_in">float</span></span>) -&gt; <span class="built_in">bool</span>:</span></span><br><span class="line">    <span class="keyword">return</span> start &lt;= n &lt;= end <span class="keyword">if</span> end &gt;= start <span class="keyword">else</span> end &lt;= n &lt;= start</span><br><span class="line"></span><br><span class="line"><span class="comment"># Init the tkinter window</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Game</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line">        self.tk = Tk()</span><br><span class="line">        self.tk.title(<span class="string">&quot;Simulate Buffon&#x27;s needle problem&quot;</span>)</span><br><span class="line">        self.tk.resizable(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        self.tk.wm_attributes(<span class="string">&quot;-topmost&quot;</span>, <span class="number">1</span>)</span><br><span class="line">        self.canvas = Canvas(self.tk, width=<span class="number">1000</span>, height=<span class="number">528</span>, highlightthickness=<span class="number">0</span>)</span><br><span class="line">        self.canvas.pack()</span><br><span class="line">        self.tk.update()</span><br><span class="line">        self.running = <span class="literal">True</span></span><br><span class="line">        self.total = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mainloop</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line">        <span class="keyword">while</span> self.running:</span><br><span class="line">            self.tk.update_idletasks()</span><br><span class="line">            self.tk.update()</span><br><span class="line">            time.sleep(<span class="number">0.01</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sprite</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, game</span>):</span></span><br><span class="line">        self.game = game</span><br><span class="line">        self.coordinates = <span class="literal">None</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">coords</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.coordinates</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Coords</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, x1=<span class="number">0</span>, y1=<span class="number">0</span>, x2=<span class="number">0</span>, y2=<span class="number">0</span></span>):</span></span><br><span class="line">        self.x1 = x1</span><br><span class="line">        self.y1 = y1</span><br><span class="line">        self.x2 = x2</span><br><span class="line">        self.y2 = y2</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ParaLine</span>(<span class="params">Sprite</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, game: Game, y: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line">        Sprite.__init__(self, game)</span><br><span class="line">        self.y1 = self.y2 = y</span><br><span class="line">        self.coordinates = Coords(<span class="number">0</span>, y, <span class="number">1000</span>, y)</span><br><span class="line">        game.canvas.create_line(self.coordinates.x1, self.coordinates.y1, self.coordinates.x2, self.coordinates.y2, fill=<span class="string">&quot;black&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Needle</span>(<span class="params">Sprite</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, game: Game</span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line">        Sprite.__init__(self, game)</span><br><span class="line">        self.x1 = random.randint(<span class="number">0</span>, <span class="number">1000</span>)</span><br><span class="line">        self.y1 = random.randint(<span class="number">0</span>, <span class="number">528</span>)</span><br><span class="line">        self.angle = random.randint(<span class="number">0</span>, <span class="number">180</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> inRange(self.angle, <span class="number">0</span>, <span class="number">90</span>):</span><br><span class="line">            self.x2 = self.x1 - math.cos(math.radians(<span class="number">90</span> - self.angle)) * <span class="number">24</span></span><br><span class="line">        <span class="keyword">elif</span> inRange(self.angle, <span class="number">91</span>, <span class="number">180</span>):</span><br><span class="line">            self.x2 = self.x1 + math.cos(math.radians(self.angle - <span class="number">90</span>)) * <span class="number">24</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> inRange(self.angle, <span class="number">0</span>, <span class="number">90</span>):</span><br><span class="line">            self.y2 = self.y1 - math.sin(math.radians(<span class="number">90</span> - self.angle)) * <span class="number">24</span></span><br><span class="line">        <span class="keyword">elif</span> inRange(self.angle, <span class="number">91</span>, <span class="number">180</span>):</span><br><span class="line">            self.y2 = self.y1 + math.sin(math.radians(self.angle - <span class="number">90</span>)) * <span class="number">24</span></span><br><span class="line"></span><br><span class="line">        self.name = game.canvas.create_line(self.x1, self.y1, self.x2, self.y2, fill=<span class="string">&quot;black&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">checkCollide</span>(<span class="params">self, game: Game</span>) -&gt; <span class="built_in">bool</span>:</span></span><br><span class="line">        <span class="keyword">for</span> lineY <span class="keyword">in</span> lineYlist:</span><br><span class="line">            <span class="keyword">if</span> inRange(lineY, self.y1, self.y2):</span><br><span class="line">                game.canvas.itemconfig(self.name, fill=<span class="string">&quot;red&quot;</span>)</span><br><span class="line">                game.total += <span class="number">1</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">checkInside</span>(<span class="params">self</span>) -&gt; <span class="built_in">bool</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span> <span class="keyword">if</span> inRange(self.x2, <span class="number">0</span>, <span class="number">1000</span>) <span class="keyword">and</span> inRange(self.y2, <span class="number">0</span>, <span class="number">528</span>) <span class="keyword">else</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">g = Game()</span><br><span class="line">drawnLine = <span class="number">0</span></span><br><span class="line">collidedline = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> lineY <span class="keyword">in</span> lineYlist:</span><br><span class="line">    paraLine = ParaLine(g, lineY)</span><br><span class="line"><span class="keyword">while</span> drawnLine &lt; <span class="number">1000</span>:</span><br><span class="line">    needle = Needle(g)</span><br><span class="line">    collided = needle.checkCollide(g)</span><br><span class="line">    inside = needle.checkInside()</span><br><span class="line">    <span class="keyword">if</span> collided <span class="keyword">and</span> inside:</span><br><span class="line">        drawnLine += <span class="number">1</span></span><br><span class="line">        collidedline += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> (<span class="keyword">not</span> collided) <span class="keyword">and</span> inside:</span><br><span class="line">        drawnLine += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="keyword">not</span> inside:</span><br><span class="line">        g.canvas.itemconfig(needle.name, fill=<span class="string">&#x27;whitesmoke&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="number">1000</span> / collidedline)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_closing</span>():</span></span><br><span class="line">    g.running = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">g.tk.protocol(<span class="string">&quot;WM_DELETE_WINDOW&quot;</span>, on_closing)</span><br><span class="line">g.mainloop()</span><br></pre></td></tr></table></figure>
<p>其实基本的逻辑和纯输出版本差不多，只是需要初始化窗口且每一个元素都需要绘制，所以步骤多了一些。</p>
<h3 id="3-2-Pygame版本"><a href="#3-2-Pygame版本" class="headerlink" title="3.2 Pygame版本"></a>3.2 <code>Pygame</code>版本</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pygame, math, random, time</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">This is a Python program to get the approximate value of PI. It simulated the Buffon&#x27;s needle problem by dropping 1000 needles.</span></span><br><span class="line"><span class="string">(With GUI this time!!!)</span></span><br><span class="line"><span class="string">Here we go...</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">lineYlist = [<span class="number">48</span>, <span class="number">96</span>, <span class="number">144</span>, <span class="number">192</span>, <span class="number">240</span>, <span class="number">288</span>, <span class="number">336</span>, <span class="number">384</span>, <span class="number">432</span>, <span class="number">480</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inRange</span>(<span class="params">n : <span class="built_in">int</span>, start : <span class="built_in">int</span>, end : <span class="built_in">float</span></span>) -&gt; <span class="built_in">bool</span>:</span></span><br><span class="line">    <span class="keyword">return</span> start &lt;= n &lt;= end <span class="keyword">if</span> end &gt;= start <span class="keyword">else</span> end &lt;= n &lt;= start</span><br><span class="line"></span><br><span class="line">pygame.init()</span><br><span class="line">screen = pygame.display.set_mode((<span class="number">1000</span>,<span class="number">528</span>))</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Needle</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line">        self.x1 = random.randint(<span class="number">0</span>, <span class="number">1000</span>)</span><br><span class="line">        self.y1 = random.randint(<span class="number">0</span>, <span class="number">528</span>)</span><br><span class="line">        self.angle = random.randint(<span class="number">0</span>, <span class="number">180</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> inRange(self.angle, <span class="number">0</span>, <span class="number">90</span>):</span><br><span class="line">            self.x2 = self.x1 - math.cos(math.radians(<span class="number">90</span> - self.angle)) * <span class="number">24</span></span><br><span class="line">        <span class="keyword">elif</span> inRange(self.angle, <span class="number">91</span>, <span class="number">180</span>):</span><br><span class="line">            self.x2 = self.x1 + math.cos(math.radians(self.angle - <span class="number">90</span>)) * <span class="number">24</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> inRange(self.angle, <span class="number">0</span>, <span class="number">90</span>):</span><br><span class="line">            self.y2 = self.y1 - math.sin(math.radians(<span class="number">90</span> - self.angle)) * <span class="number">24</span></span><br><span class="line">        <span class="keyword">elif</span> inRange(self.angle, <span class="number">91</span>, <span class="number">180</span>):</span><br><span class="line">            self.y2 = self.y1 + math.sin(math.radians(self.angle - <span class="number">90</span>)) * <span class="number">24</span></span><br><span class="line"></span><br><span class="line">        self.name = pygame.draw.line(screen, (<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>), (self.x1, self.y1), (self.x2, self.y2))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">checkCollide</span>(<span class="params">self</span>) -&gt; <span class="built_in">bool</span>:</span></span><br><span class="line">        <span class="keyword">for</span> lineY <span class="keyword">in</span> lineYlist:</span><br><span class="line">            <span class="keyword">if</span> inRange(lineY, self.y1, self.y2):</span><br><span class="line">                pygame.draw.line(screen, (<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>), (self.x1, self.y1), (self.x2, self.y2))</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">checkInside</span>(<span class="params">self</span>) -&gt; <span class="built_in">bool</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span> <span class="keyword">if</span> inRange(self.x2, <span class="number">0</span>, <span class="number">1000</span>) <span class="keyword">and</span> inRange(self.y2, <span class="number">0</span>, <span class="number">528</span>) <span class="keyword">else</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getCoords</span>(<span class="params">self</span>) -&gt; <span class="built_in">list</span>[<span class="built_in">tuple</span>()]:</span></span><br><span class="line">        <span class="keyword">return</span> [(self.x1, self.y1), (self.x2, self.y2)]</span><br><span class="line"></span><br><span class="line">startPosList = []</span><br><span class="line">endPosList = []</span><br><span class="line">needleList = []</span><br><span class="line">drawnLine = collidedline = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> drawnLine &lt;= <span class="number">1000</span>:</span><br><span class="line">    n = Needle()</span><br><span class="line">    collided = n.checkCollide()</span><br><span class="line">    inside = n.checkInside()</span><br><span class="line">    coords = n.getCoords()</span><br><span class="line">    <span class="keyword">if</span> collided <span class="keyword">and</span> inside:</span><br><span class="line">        drawnLine += <span class="number">1</span></span><br><span class="line">        collidedline += <span class="number">1</span></span><br><span class="line">        startPosList.append(coords[<span class="number">0</span>])</span><br><span class="line">        endPosList.append(coords[<span class="number">1</span>])</span><br><span class="line">        needleList.append(n)</span><br><span class="line">    <span class="keyword">elif</span> (<span class="keyword">not</span> collided) <span class="keyword">and</span> inside:</span><br><span class="line">        drawnLine += <span class="number">1</span></span><br><span class="line">        startPosList.append(coords[<span class="number">0</span>])</span><br><span class="line">        endPosList.append(coords[<span class="number">1</span>])</span><br><span class="line">        needleList.append(n)</span><br><span class="line">    <span class="keyword">elif</span> <span class="keyword">not</span> inside:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="number">1000</span> / collidedline)</span><br><span class="line"></span><br><span class="line">running = <span class="literal">True</span></span><br><span class="line"><span class="keyword">while</span> running:</span><br><span class="line">    <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">        <span class="keyword">if</span> event.<span class="built_in">type</span> == pygame.QUIT:</span><br><span class="line">            running = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    screen.fill((<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>))</span><br><span class="line"></span><br><span class="line">    color = <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span></span><br><span class="line">    width = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> lineY <span class="keyword">in</span> lineYlist:</span><br><span class="line">        pygame.draw.line(screen,color,(<span class="number">0</span>,lineY),(<span class="number">1000</span>,lineY),width)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">        currentNeedle = needleList[x]</span><br><span class="line">        startPos = startPosList[x]</span><br><span class="line">        endPos = endPosList[x]</span><br><span class="line">        pygame.draw.line(screen,color,startPos,endPos,width)</span><br><span class="line">        <span class="keyword">if</span> currentNeedle.checkCollide():</span><br><span class="line">            pygame.draw.line(screen,(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>),startPos,endPos,width)</span><br><span class="line"></span><br><span class="line">    pygame.display.update()</span><br><span class="line">    pygame.display.set_caption(<span class="string">&#x27;Buffon&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>这个<code>Pygame</code>版本我个人觉得写的比较臃肿，由于为了避免掉绘制出界的针且因为<code>Pygame</code>和<code>tkinter</code>在主循环逻辑上的不同（<code>tkinter</code>可以边运行变更新画面，<code>Pygame</code>一定要全计算好再整体绘制），我先循环直到生成1000根合适的针，再绘制，但也没有找到更简单的方法。</p>
<p><img data-src="https://s1.ax1x.com/2023/01/03/pSiSM60.png" alt=""></p>
<hr>
<p>虽然这个程序还有一定的改进空间，但课程已经结束，我也不想再去改了（至少我逻辑是对的）。不过我还是想明白了一点，在写任何程序之前，一定要先捋清楚自己的思路，不然直接上手写，会很混乱、很复杂，甚至达不到自己想要的效果。</p>
<p><strong>THE END</strong>感谢您的阅读~</p>
]]></content>
      <categories>
        <category>编程</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Maths</tag>
        <tag>Python</tag>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title>GithubPages-简单易上手的网站制作(Jekyll版)</title>
    <url>/2021/08/15/github-pages-jekyll/</url>
    <content><![CDATA[<p>其实我一直想要做网站。在6个月前（2021年2月），我开始看着 <a href="https://www.w3school.com.cn/"><code>W3School</code></a>上的教程，用<code>SublimeText</code>写<code>HTML</code>。<br>但写了一两个月后，我突然想起来一件事。大概在一年前，我有个同学给我推荐了一个录屏软件（不过我忘了叫什么了，好像是<code>Captura</code>？）。他给了我一个网址，然后，<strong>我看到了一个熟悉的东西</strong>————这个网址里有<code>Github</code>的字样。于是，我搜（百）索（度）了一会子，然后搜到好多有关“用<em><code>Github.io</code></em>创作个人博客”的文章，点开后没想到做网站也可以这么简单。今天我来教大家创建一个<code>GithubPages(github.io)</code>页面，分享一下我做网站时的心得。</p>
<span id="more"></span>
<h2 id="0-步骤分解"><a href="#0-步骤分解" class="headerlink" title="0. 步骤分解"></a>0. 步骤分解</h2><p><strong>话不多说，直接上步骤！</strong><br>1.注册github，创建<code>&lt;username&gt;.github.io</code>仓库；<br>2.创建<code>index.md</code>；<br>3.修改<code>_config.yml</code>，选择样式；<br>4.404页面；</p>
<hr>
<h2 id="1-基础设置"><a href="#1-基础设置" class="headerlink" title="1. 基础设置"></a>1. 基础设置</h2><p>看完上文，大家已经知道了我们的网站依托于 <a href="https://github.com/"><code>GitHub</code></a> 的 <strong><a href="https://pages.github.com/"><code>Pages</code></a></strong> 功能。<br>身为程序员，大家肯定都听说过<code>GitHub</code>吧。如果你还不知道的话，可以查询 <a href="https://baike.baidu.com/item/Github">百度百科</a> 。</p>
<h3 id="1-1-注册GitHub账号"><a href="#1-1-注册GitHub账号" class="headerlink" title="1.1 注册GitHub账号"></a>1.1 注册<code>GitHub</code>账号</h3><p>（如果你有<code>GitHub</code>账号，请跳过这一步）如果你没用过<code>GitHub</code>，就去官网注册一个账号，步骤如下：<br>如图，填写你的邮箱和用户名，应该就好了。会有一系列验证，比如说生日和性别等。</p>
<p><img data-src="https://z3.ax1x.com/2021/08/15/fgxQoR.png" alt="frontpage"><br><img data-src="https://z3.ax1x.com/2021/08/15/fgxKeJ.png" alt="email"></p>
<p>（尴尬：我注册时不是这样啊？？？）<br>登录<code>GitHub</code>可能会需要验证码。登录一下注册时的邮箱，你会收到<code>GitHub</code>（<code>noreply@github.com</code>）的邮件，比如说：</p>
<p><img data-src="https://z3.ax1x.com/2021/08/15/fgxeQU.png" alt="Authentication"></p>
<h3 id="1-2-创建一个仓库"><a href="#1-2-创建一个仓库" class="headerlink" title="1.2 创建一个仓库"></a>1.2 创建一个仓库</h3><p>为了储存我们的代码，我们需要分配给他一个空间，学名 <code>repository</code> ，意思是仓库。<br>如图，点击右上角的 <code>New</code> 按钮，然后会弹出如下界面。</p>
<p><img data-src="https://z3.ax1x.com/2021/08/15/fgxkiq.png" alt="create1"><br><img data-src="https://z3.ax1x.com/2021/08/15/fgxmyF.png" alt="create2"></p>
<p>我们如图勾选，</p>
<p><img data-src="https://z3.ax1x.com/2021/08/15/fgxnL4.png" alt="create3"></p>
<p>在 <code>&lt;username&gt;</code> 处填上你的名字，如果名字是 <code>EdogawaNotFound</code> , 那仓库名就叫<br><code>edogawanotfound.github.io</code>。如果是我的话，我也许会设成<code>guleixibian2009.github.io</code>。 </p>
<p>现在你应该有了一个新仓库了。有了自己的仓库，就可以往仓库里放东西了。</p>
<hr>
<h2 id="2-切入正题"><a href="#2-切入正题" class="headerlink" title="2. 切入正题"></a>2. 切入正题</h2><h3 id="2-1-勾选Pages"><a href="#2-1-勾选Pages" class="headerlink" title="2.1 勾选Pages"></a>2.1 勾选<code>Pages</code></h3><p>在使用这个功能之前，你要告诉<code>GitHub</code>你要把这个仓库当做网页源码。<br>在 <code>Settings</code> 里找到 <code>pages</code> 选项，应该是这样子的：</p>
<p><img data-src="https://z3.ax1x.com/2021/08/15/fgxwTA.png" alt="settings2"></p>
<p>把 <code>Source</code> 调成你现有的分支，点击 <code>Save</code> 。  </p>
<p><img data-src="https://z3.ax1x.com/2021/08/15/fgxBFI.png" alt="settings3"></p>
<h3 id="2-2-新建index-md"><a href="#2-2-新建index-md" class="headerlink" title="2.2 新建index.md"></a>2.2 新建<code>index.md</code></h3><p><img data-src="https://z3.ax1x.com/2021/08/15/fgxEWV.png" alt="change1"></p>
<p>为了<code>Github Pages</code>更好的识别你的主页，我们需要新建一个<code>index.md</code>。你可以保留你的<code>README</code>不动，没有关系。</p>
<p><img data-src="https://z3.ax1x.com/2021/08/15/fgxtyD.png" alt="New1"></p>
<p>点击 <code>+</code> 按钮，选择<code>Create New File</code>，然后进入如下界面：</p>
<p><img data-src="https://z3.ax1x.com/2021/08/15/fgxdwd.png" alt="New2"></p>
<p>在输入框里输入<code>index.md</code>。<code>Index</code>指索引。你将会在这个新文件里写主页。</p>
<p><img data-src="https://z3.ax1x.com/2021/08/15/fgxNOe.png" alt="New3"></p>
<p>点击<code>Commit New Changes</code>。<br>你的网站，如果已经<code>Publish</code>，应该叫做<code>&lt;username&gt;.github.io</code>。现在访问你的网站，如果可以访问，恭喜你，你已经成功了！<br>但是一个网站只有主页实在无聊，所以，为了让你的网站看起来更加高级亿点点，我们就要开始写文章了。<br>使用<code>GitHub Pages</code>功能时，你并不需要会写<code>HTML</code>，只需要写文章就行了。 而在<code>Github Pages</code>功能里，我们写文章的方法是写<code>Markdown</code>。<br>等等，为什么我觉得我的界面太难看了呢？？？(￣ε(#￣)☆╰╮(￣▽￣///))让我们给自己的网站换个样式。<br>不过，如果你想现在学习<code>Markdown</code>了。我另写了一篇文章， <a href="https://guleixibian2009.github.io/2021/08/25/真的非常简单-Markdown基本语法/">传送门</a> 。  </p>
<h3 id="2-3-换个样式"><a href="#2-3-换个样式" class="headerlink" title="2.3 换个样式"></a>2.3 换个样式</h3><p>一个网站，也许最重要的不是文章的内容，而是它的门面，而一个“光鲜靓丽”的主页则是一个很好的选择。<br><code>GithubPages</code>已经给你提供好了一些样式，我们可以直接用。<br>转到刚刚那个<code>Settings/Pages</code>,不过这次点<code>ThemeChooser</code>。</p>
<p><img data-src="https://z3.ax1x.com/2021/08/15/fgxBFI.png" alt="settings3"></p>
<p>在这个界面，你可以选择一个你喜欢的样式（<code>Theme</code>）。</p>
<p><img data-src="https://z3.ax1x.com/2021/08/15/fgxDYt.png" alt="theme1"></p>
<p>在这里面我选了一个<code>Cayman</code>（简约大气）。</p>
<p><img data-src="https://z3.ax1x.com/2021/08/15/fgxrfP.png" alt="theme2"></p>
<p>不管你选了哪个，有没有发现你的网站好看多了呢？<br>不过，他会自动填充你的<code>index.md</code>。网站的默认文本是对<code>Github Pages</code>功能的介绍。这样的网站，也许对于别人来说没有意义。<br>(不过如果没有的话……也许是因为你先创建了文件再选择样式，其实也没事)  </p>
<h3 id="2-4-config-yml"><a href="#2-4-config-yml" class="headerlink" title="2.4 _config.yml"></a>2.4 <code>_config.yml</code></h3><p>不知道细心的你有没有发现，你的仓库里面多了一个<code>_config.yml</code>文件（千万不要删！）<br>打开这个文件，你会发现里面有一行文字：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">jekyll-theme-cayman</span></span><br></pre></td></tr></table></figure>
<p>这个<code>theme</code>就指的是样式。<code>jekyll-theme</code>指的是<code>Github Pages</code>默认给你使用<code>jekyll</code>渲染网站界面。<br>在这个文件里你可以调整你的网站的标题，仔细看！</p>
<p><img data-src="https://z3.ax1x.com/2021/08/15/fgx6l8.png" alt="Title"></p>
<p>其实很简单，只要往下面添加一行就可以啦！</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">My</span> <span class="string">Website~</span></span><br></pre></td></tr></table></figure>
<p>你，都学废了吗？</p>
<hr>
<h2 id="3-404页面"><a href="#3-404页面" class="headerlink" title="3. 404页面"></a>3. <code>404</code>页面</h2><p>在访问你的网站时，别人总有输错网址的时候。<code>Github</code>其实有自带的<code>404</code>，像这样：</p>
<p><img data-src="https://z3.ax1x.com/2021/08/15/fgxIf0.png" alt="404"></p>
<p>不过这个灰色的<code>404</code>实在是不好看，那么，我就有了一个疑问：我能不能自己定制一个<code>404错误</code>页面呢？答案是肯定的。  </p>
<p>在你的仓库里新建一个<code>404.md</code>文件，方法同上。在里面用<code>Markdown</code>填充上你想要的内容。比如说，我会这么写（直接上代码）。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 404 错误</span><br><span class="line">**_你寻找的界面不存在！_**  </span><br><span class="line">即将返回 [主页](https://guleixibian2009.github.io/) ......</span><br></pre></td></tr></table></figure>
<p>但实际上，光这么写还是不够。如果你现在访问<code>https://&#123;username&#125;.github.io/404</code>，你也许会看到你想要的页面。但如果你访问一个不存在的页面（指你的域名下面的错误网址，自己定义的<code>404</code>对其他<code>github.io</code>不起作用），它依然会显示那个灰色的<code>404</code>。  </p>
<p>所以到底怎么办呢？为了解决这个问题，我们要引入一种新的东西：<code>YAML Front Matter</code>。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">/404.html</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>
<p>把上面这段代码复制到你的<code>404.md</code>的最开头，再次访问应该就有啦！  </p>
<hr>
<h2 id="4-新建页面-amp-文章"><a href="#4-新建页面-amp-文章" class="headerlink" title="4. 新建页面&amp;文章"></a>4. 新建页面&amp;文章</h2><p>现在你已经有了一个主页和<code>404</code>页面了。现在，我们将会进入最激动人心的一部分：写博客。</p>
<h3 id="4-1-新建博客文件-amp-文件夹"><a href="#4-1-新建博客文件-amp-文件夹" class="headerlink" title="4.1 新建博客文件&amp;文件夹"></a>4.1 新建博客文件&amp;文件夹</h3><p>一个网站一般都是“分层”的，其实<code>Github Pages</code>也可以做到这一点。如果你想让<code>Jekyll</code>在你的仓库中渲染出“子页面”，你可以在仓库中新建一个文件夹。比如说，你可以创建<code>guleixibian2009.github.io/Github</code>，这样网址就会被渲染成<code>https://guleixibian2009.github.io/Github/</code>。点开新建文件页面，在输入框里输入你想要的页面名，现在你按下<code>/</code>，神奇的事情发生了：刚刚输入的名称成功地成为了一个文件夹！然后，继续输入<code>index.md</code>，并且<code>Commit New Changes</code>，再访问刚刚创建的页面，就可以啦！  </p>
<p>其实，不一定只有一层文件夹。如果你愿意，你可以在一层的基础上再建N个/层文件夹，并在每一个文件夹下建一个<code>index.md</code>，就可以啦！现在把你的文章用<code>Markdown</code>填进去，再次访问就有新界面啦！</p>
<h3 id="4-2-给页面添加特效"><a href="#4-2-给页面添加特效" class="headerlink" title="4.2 给页面添加特效"></a>4.2 给页面添加特效</h3><p>虽然我搜了很久，但是我实在没有搜到太多可以直接应用的特效。不过我听说过一种基于<code>Ruby</code>的桌面版<code>Jekyll</code>，大家可以自行搜索。话说回来，我的确搜到一个特效：404自动跳转回主页。  </p>
<p>其实这个很容易实现，其实是一段<code>JavaScript</code>脚本。直接把如下脚本插在<code>404.md</code>最底下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"> </span></span><br><span class="line"><span class="javascript">    <span class="built_in">setTimeout</span>(<span class="string">&quot;javascript:location.href=&#x27;/&#x27;&quot;</span>, <span class="number">10000</span>); </span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>其中，<code>setTimeout</code>函数就是定时。而<code>href=&#39;/&#39;</code>就指的是定时回到根目录。<code>10000</code>指10秒。也就是说，10秒钟后返回主页。</p>
<hr>
<h2 id="5-GitHub-Pages的工作原理"><a href="#5-GitHub-Pages的工作原理" class="headerlink" title="5. GitHub Pages的工作原理"></a>5. <code>GitHub Pages</code>的工作原理</h2><p>说到这大家可能会想，<code>Pages</code>能有什么工作原理？其实，如果好奇的你曾经点进过<code>GitHub</code>仓库内<code>Actions</code>一个栏目，你就会发现每一次更新提交后，系统就会自动触发<code>Page Build Deployment</code>这个内置<code>Action</code>，说明白了，就是自动化！具体讲解，敬请等待以后的<code>GitHub Actions</code>使用指南！</p>
<hr>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>其实利用<code>Github Pages</code>作为域名做网站的方法有很多，除了仅仅用网页版<code>Jekyll</code>和桌面版<code>Jekyll</code>，还有<code>HEXO</code>和<code>Wordpress</code>等等。大家可以自行去探索，不过，掉了坑我可不救你！🤣</p>
<p><strong>THE END</strong> 谢谢你的阅读~</p>
]]></content>
      <categories>
        <category>GitHub</category>
        <category>Pages</category>
        <category>Jekyll</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>Website</tag>
        <tag>Jekyll</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/08/13/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Hexo深度个性化——底层配置</title>
    <url>/2023/01/01/hexo-website-update/</url>
    <content><![CDATA[<p>新年伊始，没想到，我又决定回来更新了。这是我之前就想好的题目，今天终于动笔——<code>Hexo</code>博客的深度个性化。（不瞒着你们，我一向这样，更一段时间，鸽一段时间。也许看着这学期我周更，但那些都是一些感想，并不是特别花时间的技术博）</p>
<p>这里会讲一讲：</p>
<ol>
<li><p><code>back2top</code>按钮百分比的动画还有进度条颜色</p>
</li>
<li><p>相关文章推荐模块中的<code>CSS</code>统一</p>
</li>
<li><p>给个别文章添加<code>Creative Commons</code>许可证开关</p>
</li>
<li><p>主页文章节选悬浮特效</p>
</li>
</ol>
<span id="more"></span>
<h2 id="1-关于阅读百分比"><a href="#1-关于阅读百分比" class="headerlink" title="1. 关于阅读百分比"></a>1. 关于阅读百分比</h2><p><img data-src="https://s1.ax1x.com/2023/01/01/pSCf3HU.png" alt=""></p>
<p>可以看到我这个博客之前既启用了顶部进度条和<code>back2top</code>里的百分比，我个人觉得有点重复，想要把百分比数字只在鼠标悬浮时显示，并且给它加个动画。进度条的颜色光绿色也有点单调，我想加一个蓝-绿色渐变。这个都是可以通过<code>CSS</code>实现的，在<code>Hexo</code>中则是<code>stylus</code>。</p>
<p>在<code>Hexo</code>中想要改<code>CSS</code>的话，先别急着去新建文件，最好先在<code>themes/next/source/css</code>这个文件夹里面找一找，阅读百分比的两个文件在<code>_common/components</code>文件夹里。</p>
<h3 id="1-1-阅读百分比动画"><a href="#1-1-阅读百分比动画" class="headerlink" title="1.1 阅读百分比动画"></a>1.1 阅读百分比动画</h3><p>要实现这个我首先的思路就是给<code>width</code>加<code>transition</code>，再配合<code>overflow: hidden</code>来实现；不过为了如此我们要给这个元素加一点额外的属性。</p>
<p><img data-src="https://s1.ax1x.com/2023/01/02/pSPFnPg.png" alt=""></p>
<p>这个百分比是<code>div#back-to-top</code>里面的一个<code>span</code>，对应的<code>stylus</code>是<code>back-to-top.styl</code>。</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.back-to-top</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="variable">$b2t</span>-bg-color;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="variable">$b2t</span>-position-bottom;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$b2t</span>-color;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">  <span class="attribute">left</span>: <span class="variable">$b2t</span>-position-right;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="variable">$b2t</span>-opacity;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">transition-property</span>: bottom;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="variable">$zindex</span>-<span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (hexo-config(<span class="string">&#x27;back2top.scrollpercent&#x27;</span>)) &#123;</span><br><span class="line">    <span class="attribute">width</span>: initial;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">24px</span>;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">span</span> &#123;</span><br><span class="line">      <span class="attribute">display</span>: none;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-pseudo">&amp;:hover</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="variable">$sidebar</span>-highlight;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &amp;<span class="selector-class">.back-to-top-on</span> &#123;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="variable">$b2t</span>-position-bottom-on;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  +tablet-mobile() &#123;</span><br><span class="line">    <span class="attribute">left</span>: <span class="variable">$b2t</span>-position-right-mobile;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="variable">$b2t</span>-opacity-hover;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里有两个注意点：</p>
<ol>
<li><p><code>transition</code>要求<code>width</code>必须是定值，不能是<code>auto</code>，故我们要手动去加一个<code>width</code>和<code>padding</code>，以保证美观。</p>
</li>
<li><p>能应用<code>width</code>属性说明这个<code>&lt;span&gt;</code>的<code>display</code>至少要是<code>inline-block</code>，不能是<code>inline</code>。</p>
</li>
</ol>
<p>综合我一开始的想法并结合这两个要点，这里给出最终代码：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.back-to-top</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="variable">$b2t</span>-bg-color;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="variable">$b2t</span>-position-bottom;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$b2t</span>-color;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">  <span class="attribute">left</span>: <span class="variable">$b2t</span>-position-right;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="variable">$b2t</span>-opacity;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">3px</span> <span class="number">0</span> <span class="number">6px</span>;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">transition-property</span>: bottom;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="variable">$zindex</span>-<span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (hexo-config(<span class="string">&#x27;back2top.scrollpercent&#x27;</span>)) &#123;</span><br><span class="line">    <span class="attribute">width</span>: initial;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">24px</span>;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">span</span> &#123;</span><br><span class="line">      <span class="attribute">display</span>: none;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-pseudo">&amp;:hover</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="variable">$sidebar</span>-highlight;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">6px</span>;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">span</span> &#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">32px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &amp;<span class="selector-class">.back-to-top-on</span> &#123;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="variable">$b2t</span>-position-bottom-on;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  +tablet-mobile() &#123;</span><br><span class="line">    <span class="attribute">left</span>: <span class="variable">$b2t</span>-position-right-mobile;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="variable">$b2t</span>-opacity-hover;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">transition-property</span>: width;</span><br><span class="line">    <span class="attribute">transition-duration</span>: <span class="number">0.5s</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-2-阅读进度条渐变色"><a href="#1-2-阅读进度条渐变色" class="headerlink" title="1.2 阅读进度条渐变色"></a>1.2 阅读进度条渐变色</h3><p>在我们的主题配置文件中，这一块是用来配置进度条的。</p>
<p><img data-src="https://s1.ax1x.com/2023/01/02/pSPFeIS.png" alt=""></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Reading progress bar</span></span><br><span class="line"><span class="attr">reading_progress:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Available values: top | bottom</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">top</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">&quot;#37c6c0&quot;</span></span><br><span class="line">  <span class="attr">height:</span> <span class="string">3px</span></span><br></pre></td></tr></table></figure>
<p>这个<code>color</code>属性就是用来调颜色的。然而如果是渐变的话，就一定要用<code>linear-gradient()</code>，对应的<code>CSS</code>属性则是<code>background-image</code>。以防万一，我去看了一下<code>themes/next/source/css/_common/components/reading-progress.styl</code>，里面对应一行是：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background</span>: unquote(hexo-config(<span class="string">&#x27;reading_progress.color&#x27;</span>))</span><br></pre></td></tr></table></figure>
<p>它用的是通用的<code>background</code>，这样就万无一失了。我们直接把<code>color</code>改成：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">color:</span> <span class="string">&quot;linear-gradient(to right, #2299dd , #37c6c0)&quot;</span></span><br></pre></td></tr></table></figure>
<p>并重新生成即可。</p>
<p><img data-src="https://s1.ax1x.com/2023/01/02/pSPFuGQ.png" alt=""></p>
<hr>
<h2 id="2-相关文章推荐中的CSS统一"><a href="#2-相关文章推荐中的CSS统一" class="headerlink" title="2. 相关文章推荐中的CSS统一"></a>2. 相关文章推荐中的<code>CSS</code>统一</h2><p>如果你像我之前一样，安装了相关文章推荐模块，却不对其进行任何调整，你会收获这样的文章推荐：</p>
<p><img data-src="https://s1.ax1x.com/2023/01/01/pSCfY4J.png" alt=""></p>
<p><img data-src="https://s1.ax1x.com/2023/01/01/pSCfGEF.png" alt=""></p>
<p>字号、行距不统一，粗体、斜体没消除，甚至还有图片，根本不像一份合格的文章节选。原因在于，这个相关文章模块和文章主体共用<code>CSS</code>。我们要做的，就是用<code>!important</code>覆盖掉。</p>
<p><img data-src="https://s1.ax1x.com/2023/01/02/pSPmQtP.png" alt=""></p>
<p>这个节选是<code>div.popular-posts-excerpt</code>，默认继承<code>main.css</code>中的样式。找一下对应的<code>stylus</code>文件，是<code>themes/next/source/css/_common/components/third-party/related-posts.styl</code>。我们直接在末尾添加一段</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">.popular-posts-excerpt&#123; </span><br><span class="line">  <span class="selector-tag">p</span>, <span class="selector-tag">strong</span>, <span class="selector-tag">i</span>, <span class="selector-tag">a</span>, <span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span>, <span class="selector-tag">h4</span>, <span class="selector-tag">h5</span>, <span class="selector-tag">h6</span> &#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: normal <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">font-style</span>: normal <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0.875em</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    br &#123;</span><br><span class="line">      <span class="attribute">display</span>: none;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none <span class="meta">!important</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>就可以规避掉大部分问题。后续如果发现更多需要屏蔽或调整的，也直接加在这里就好了。</p>
<hr>
<h2 id="3-给文章内Creative-Commons加个开关"><a href="#3-给文章内Creative-Commons加个开关" class="headerlink" title="3. 给文章内Creative Commons加个开关"></a>3. 给文章内<code>Creative Commons</code>加个开关</h2><p><img data-src="https://s1.ax1x.com/2023/01/01/pSCfJN4.png" alt=""></p>
<p>在技术博中，转载和引用是常有的事。然而<code>Next</code>自带的版权方框就是这么尴尬，默认是串联起来的，只能在主题配置文件中选择全开或全关。全开时，不是你写的硬要说成你写的，心里总是不安。</p>
<p>不过，有一种办法是类似之前我们有一个文章开头<code>yml</code>里配置的属性，叫做<code>sticky</code>。我们可以做一个类似的开关，比如叫<code>nocopyright</code>，<code>true</code>代表转载，不会显示版权方框；<code>false</code>或不写，则会显示。于是乎我们去看一下版权方框的生成逻辑，在<code>themes/next/layout/_macro</code>里的<code>post.swig</code>里面，大约在225行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;%- if theme.creative_commons.license and theme.creative_commons.post %&#125;</span><br><span class="line">  &#123;&#123; partial(&#x27;_partials/post/post-copyright.swig&#x27;) &#125;&#125;</span><br><span class="line">&#123;%- endif %&#125;</span><br></pre></td></tr></table></figure>
<p>这是<code>Nunjucks</code>中的一个简单的条件语句，我们只要添加一个条件<code>and not page.nocopyright</code>就可以了。<code>page</code>指的是当前渲染的文章。所以就是这样：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;%- if theme.creative_commons.license and theme.creative_commons.post and not page.nocopyright %&#125;</span><br><span class="line">  &#123;&#123; partial(&#x27;_partials/post/post-copyright.swig&#x27;) &#125;&#125;</span><br><span class="line">&#123;%- endif %&#125;</span><br></pre></td></tr></table></figure>
<p>然后找到你不想显示版权方框的文章，在开头的<code>YAML Front Matter</code>里面加一行：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">nocopyright:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>即可。需要显示则不需要加，默认显示。</p>
<hr>
<h2 id="4-主页文章悬浮特效"><a href="#4-主页文章悬浮特效" class="headerlink" title="4. 主页文章悬浮特效"></a>4. 主页文章悬浮特效</h2><p>这个的话，我主要是想做一个缩放+透明度的<code>transition</code>，应用在主页的<code>article.post-block</code>上面。不过我特意去检查了一下，在文章页也有这样的元素，但我只希望对主页应用，所以我找到一个父类<code>index</code>（文章内则是<code>post</code>）。</p>
<p><img data-src="https://s1.ax1x.com/2023/01/02/pSPdKfS.png" alt=""></p>
<p>这个就是简单的<code>CSS</code>了，随便找一段<code>styl</code>插进去，我就加在了<code>themes/next/source/css/_common/components/post/post-expand.styl</code>里面了：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.index</span> &#123;</span><br><span class="line">  <span class="selector-tag">article</span><span class="selector-class">.post-block</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: rgba(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">1</span>) <span class="meta">!important</span></span><br><span class="line">    <span class="attribute">transform</span>: scale(<span class="number">1</span>);</span><br><span class="line">    <span class="attribute">transition</span>: transform <span class="number">0.5s</span>, background-color <span class="number">0.5s</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">article</span><span class="selector-class">.post-block</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: rgba(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.4</span>) <span class="meta">!important</span></span><br><span class="line">    <span class="attribute">transform</span>: scale(<span class="number">1.012</span>);</span><br><span class="line">    <span class="attribute">transition</span>: transform <span class="number">0.5s</span>, background-color <span class="number">0.5s</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样就能实现缩放+透明度的特效了。</p>
<hr>
<p>总的来说，<code>Hexo+Next</code>留给个人的发挥空间还是非常大的，底层逻辑完全开放且容易修改，因此个性化变得非常简单，只需要一点点<code>CSS</code>的知识就能让你的博客锦上添花！</p>
<p><strong>THE END</strong>感谢您的阅读~</p>
]]></content>
      <categories>
        <category>GitHub</category>
        <category>Pages</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Website</tag>
        <tag>CSS</tag>
        <tag>Frontend</tag>
        <tag>HTML</tag>
        <tag>Hexo</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub-Cli 的安装与使用</title>
    <url>/2022/01/09/installation-and-usage-of-gh/</url>
    <content><![CDATA[<p><strong>Take GitHub to the command line!</strong><br><img data-src="https://s4.ax1x.com/2022/01/08/7iGY1P.png" alt="GitHub-Cli"><br>想必<code>GitHub</code>大家都不陌生。一开始我也只是偶尔上去安装个软件啥的，但是自从几个月前我接触到用<code>GitHub</code>作为服务器和二级域名来做网站后，我访问<code>GitHub</code>也就更加频繁了。每天都要重复登陆、收验证码实在是有些浪费时间了，再加上这么慢的网速，于是我开始使用<code>Git+Hexo</code>本地生成+上传的模式。可用了一段时间后，我却发现有比<code>Git</code>更快、更强、更高大上的终端命令行——<strong><code>GitHub-Cli</code></strong>(以下也简称gh)。</p>
<span id="more"></span>
<h2 id="一-Gh简介"><a href="#一-Gh简介" class="headerlink" title="一.Gh简介"></a>一.Gh简介</h2><p><code>GitHub-Cli</code>,也就是<code>GitHub</code><em>最新推出的命令行终端</em>，具有快速、高效等特性，给万千码农带来了极大的福利—— <u>更快地访问、克隆仓库，更快的提交更新，更高效的处理<code>issue</code>和<code>PR</code>。</u> 曾经必须要到<code>GitHub</code>网页端才能修改的元信息，现在在<code>CMD</code>上就可以操作。<br>十几天前<code>gh</code>已经推出了最新的<code>2.4.0</code>版本。这款终端使用<code>GoLang</code>编写，配合一定的批处理文件就可以完成一切任务。最新数据显示该仓库已经有了<strong>2万6千个Star</strong>。<br><a href="https://cli.github.com/">项目官网</a>  <a href="https://github.com/cli/cli/">项目源码地址</a></p>
<h2 id="二-Gh的安装"><a href="#二-Gh的安装" class="headerlink" title="二.Gh的安装"></a>二.Gh的安装</h2><p>安装其实很简单，毕竟它不是<code>GUI</code>，只是一个类似<code>Bash</code>的东东嘛。下面以<em>Windows</em>为例：</p>
<h3 id="1-安装包安装（通用）"><a href="#1-安装包安装（通用）" class="headerlink" title="1. 安装包安装（通用）"></a>1. 安装包安装（通用）</h3><p>访问<a href="https://github.com/cli/cli/releases/tag/v2.4.0">这个链接</a>，找到<code>Assets</code>。然后你会找到<strong>很多很多的安装包</strong>，在比较下面的地方有一个<code>gh_2.4.0_windows_amd64.msi</code>的安装文件（<em>貌似是64位的</em>）。尝试下载它……<br>下载下来以后，直接运行安装即可。安装完成后，打开<code>CMD</code>运行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gh --version  </span><br></pre></td></tr></table></figure>
<p>如果<code>CMD</code>返回给你有用的信息（<em>而不是“gh“不是内部或外部命令，也不是可运行的程序或批处理文件。</em>），那么说明你已经安装好了！</p>
<h3 id="2-Chocolatey安装"><a href="#2-Chocolatey安装" class="headerlink" title="2. Chocolatey安装"></a>2. <code>Chocolatey</code>安装</h3><p>使用过<code>Chocolatey</code>的同志直接运行下面的命令！</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ clist gh</span><br><span class="line">$ choco install gh</span><br></pre></td></tr></table></figure>
<p>嗯……搞定了！</p>
<h2 id="三-Gh登录时刻！"><a href="#三-Gh登录时刻！" class="headerlink" title="三. Gh登录时刻！"></a>三. Gh登录时刻！</h2><p>准备好你的GitHub账号，我们终于要登录了！登录也很简单，只要运行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gh auth login  //这很简单吧！</span><br></pre></td></tr></table></figure>
<p>然后就会有下面的提示语：</p>
<p><img data-src="https://s4.ax1x.com/2022/01/08/7iGJpt.png" alt="Auth_Login"></p>
<p><em>图片来源于网络……所以不是我的用户名</em><br>两种登陆方法：你可以使用<strong>浏览器登陆账号</strong>后登录<code>GitHub-Cli</code>，也可以使用<strong>粘贴个人验证码</strong>登录。由于<code>GitHub-Cli</code>的内核也是用到<code>Git</code>的，所以它也会要求你配置<code>Git</code>，选择<code>SSH</code>或者<code>HTTPS</code>貌似都差不多。<br>如果最后它提示你类似<code>Logged in as …</code>说明你成功了！！  </p>
<h2 id="四-关于你的仓库"><a href="#四-关于你的仓库" class="headerlink" title="四.关于你的仓库"></a>四.关于你的仓库</h2><p>使用“项目托管平台”你没有仓库怎么行？用你本地的<code>Git</code>或者在线创建一个仓库，然后你就可以操作了。<br><img data-src="https://s4.ax1x.com/2022/01/08/7iGt6f.md.png" alt="New_Repo"><br>创建一个仓库后，把它拉取到本地。这个时候<code>GitHub-Cli</code>就能派上用场了：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gh repo <span class="built_in">clone</span> &#123;username&#125;/&#123;repo_name&#125;</span><br></pre></td></tr></table></figure>
<p>现在你的电脑上应该就有了一个<code>本地仓库</code>。现在让我们来更新它！<br>首先我们来切换到一个新的分支<em>（Git版本库中存放项目不同版本的一种机制）</em> 。然后，做一点点修改，然后再提交回远程端 <em>（在这里就是GitHub！）</em>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git checkout –b <span class="built_in">test</span>  //checkout -b 会创建并进入一个新的分支</span><br><span class="line">$ mkdir Test12.17  //创建一个文件夹</span><br><span class="line">$ <span class="built_in">cd</span> Test12.17</span><br><span class="line">$ <span class="built_in">echo</span> “What makes unicorns cry?”&gt;&gt;test.txt  //做一点点修改</span><br></pre></td></tr></table></figure>
<p>现在我们已经生成了一个新文件夹，一个新文件并进入了一个新的分支。然后，用大家都熟知的Git来进行以下操作：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git add .  //缓存所有修改</span><br><span class="line">$ git commit –m “Update 12.17”  //创建一个更新记录</span><br><span class="line">$ git push –-set-upstream origin <span class="built_in">test</span>  //上传 注意这里需要配置远程</span><br></pre></td></tr></table></figure>
<p>现在貌似我们的更改已经被上传到<code>GitHub</code>上面去了！不过很明显，我们提交到的是一个叫做<code>test</code>的分支，我们还需要把他提交到<code>master</code>，即<strong>主分支</strong>上去。</p>
<h2 id="五-PRs"><a href="#五-PRs" class="headerlink" title="五.PRs"></a>五.PRs</h2><p>其实我们的确可以将更新直接提交到<code>master</code>上，但这不是重点——在<code>GitHub</code>上更多的是<strong>多人合作项目</strong>，这时将更新代码直接提交到主分支上貌似就有点风险了 <em>（万一有Bug呢）</em> 。然后，我们就可以尝试一种新的方式——<code>Pull Request</code>。（感觉前面铺垫好多）<br><code>Pull Request</code> 是一种通知机制。你修改了他人的代码，将你的修改通知原来的作者，希望他合并你的修改，这就是 <code>Pull Request</code>。<code>Pull Request</code> 本质上是一种<em>软件的合作方式</em>，是将涉及不同功能的代码，纳入主干的一种流程。这个过程中，还可以进行讨论、审核和修改代码。<br>所以，你学废了吗……</p>
<h3 id="1-创建PR"><a href="#1-创建PR" class="headerlink" title="1.创建PR"></a>1.创建PR</h3><p>现在我们来尝试创建一个新PR。当然，我们是个人项目，所以PR仅起到演示的效果。<br>如图所示，创建一个PR我们需要运行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gh pr create  //等同于 $ gh pr cr</span><br></pre></td></tr></table></figure>
<p>同时我们会需要提供例如标题、基本信息等等等等。当输出类似以下的提示时，你就成功了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">https://github.com/Guleixibian2009/<span class="built_in">test</span>/pull/1</span><br></pre></td></tr></table></figure>
<p><img data-src="https://s4.ax1x.com/2022/01/08/7iGanS.png" alt="PR_Create">  </p>
<h3 id="2-PR的合并"><a href="#2-PR的合并" class="headerlink" title="2.PR的合并"></a>2.PR的合并</h3><p>很明显，单独创建一个PR是没有用的。我们需要把他合并到主分支里！首先我们看一下到底有没有这个PR：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gh pr list</span><br></pre></td></tr></table></figure>
<p>这个命令可以帮助我们查看所有的<code>PR</code>。比如下面的仓库就有2个进行中的<code>PR</code>:  </p>
<p><img data-src="https://s4.ax1x.com/2022/01/08/7iGNX8.jpg" alt="PR_List"></p>
<p>Em……只需要注意最上面那一行命令就可以了，后面两条是添加了几个限定条件。（看起来好复杂）<br>很明显我们的确有进行中的PR。为了将其合并入主分支，我们来<code>Merge</code>刚刚那个<code>PR</code>。  </p>
<p>示意图如下：</p>
<p><img data-src="https://s4.ax1x.com/2022/01/08/7iGd0g.png" alt="PR_Merge"></p>
<p>当然在合并<code>PR</code>时我们会需要选择一些基本信息，一般情况下选择<code>Create a merge commit</code>。如果你不想删除这个<code>test</code>分支，你可以在第二个选项中选择<code>No</code>。最后它会有提示语：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Merged pull request <span class="comment">#1</span></span><br></pre></td></tr></table></figure>
<p>然后，我们怎么知道自己的<code>PR</code>真的真的已经被合并了呢？我们可以切换回原分支<code>master</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git checkout master  //不需要 -b ，因为不是新分支</span><br><span class="line">$ gh repo sync  //这个指令可以同步当前分支</span><br></pre></td></tr></table></figure>
<p>如果你的<code>master</code>分支中多了一开始创建的文件，那么，这个<code>PR</code>就是真的被合并了。<br>最后，如果你还想了解<code>GitHub-Cli</code>更多有关命令，你可以运行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gh &lt;<span class="built_in">command</span>&gt; &lt;subcommand&gt; --<span class="built_in">help</span></span><br><span class="line">  //此处 &lt;<span class="built_in">command</span>&gt;/&lt;subcommand&gt; 要用具体的命令代替</span><br><span class="line">  //如： gh repo <span class="built_in">clone</span> --<span class="built_in">help</span></span><br></pre></td></tr></table></figure>
<p>就可以获得有关命令的更多信息了！</p>
<h2 id="六-写在最后"><a href="#六-写在最后" class="headerlink" title="六.写在最后"></a>六.写在最后</h2><p>经过我的一通讲解，相信大家已经掌握了<code>GitHub-Cli</code>的一些基本操作，如登录，同步仓库，等等，并且“深入”了解了<code>Pull Request</code>。在此希望<code>GitHub-Cli</code>可以和广大码农一同进步，一同成长！我们下期再见~~~</p>
<hr>
<p><strong>THE END</strong>感谢您的阅读~</p>
]]></content>
      <categories>
        <category>GitHub</category>
        <category>命令行</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>GitHub-Cli</tag>
      </tags>
  </entry>
  <entry>
    <title>超详细：这个Hexo网站，到底是怎么做出来的？</title>
    <url>/2022/08/16/hexo-website-tutorial/</url>
    <content><![CDATA[<p>断更好久了，今天终于抽空来写一点。不知不觉之间，这个网站已经上线运行1年多了，于是，我就开了这个新坑（<code>Hexo</code>网站的配置以及深度开发），应该够我写一阵子了，也算作送给这1年来的present……我也会随着教程的更新<a href="/hexo-website-tutorial">重复一遍过程</a>，以保证内容的正确性。</p>
<p>顾名思义，这篇文章就记录一下我在开发这个网站时的操作过程，以及可能会遇见的一些问题。你可以在我的基础上继续深入，自由发挥！好了，闲话少说，我们这篇超详细的<code>Hexo</code>网站教程，马上开始！  </p>
<p><strong>注：本教程所用平台是<code>Win10</code>，其他系统可能有细微差别~由于涉及到<code>GitHub</code>，建议先参照<a href="https://guleixibian2009.github.io/2021/08/14/3%E4%B8%AA%E5%B0%8F%E5%A6%99%E6%8B%9B%E5%8A%A0%E9%80%9F%E4%BD%A0%E7%9A%84GitHub/">3个小妙招</a>来加个速！</strong></p>
<span id="more"></span>
<hr>
<h2 id="1-准备工作部分"><a href="#1-准备工作部分" class="headerlink" title="1. 准备工作部分"></a>1. 准备工作部分</h2><h3 id="1-1-你可能一定会用到的那些软件"><a href="#1-1-你可能一定会用到的那些软件" class="headerlink" title="1.1 你可能一定会用到的那些软件"></a>1.1 你<del>可能</del>一定会用到的那些软件</h3><p>为了使用<code>Hexo</code>这个强大的框架，我们需要先安装一些依赖，还有一些其他的编程软件。为了真的把这个教程变得“新手向”一点，我就把你需要的软件都列在了这里：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>类别</th>
<th>必要性</th>
<th>名称</th>
</tr>
</thead>
<tbody>
<tr>
<td>依赖</td>
<td>高</td>
<td><code>NodeJS</code></td>
</tr>
<tr>
<td>编程相关、配置网站参数</td>
<td>中高</td>
<td>（推荐）<code>VSCode</code>、<code>Sublime Text</code>以及任何你用着顺手的编辑器</td>
</tr>
<tr>
<td>文章相关</td>
<td>中<del>（你甚至可以用记事本）</del></td>
<td>（推荐）<code>Marktext</code>（开源免费）、<code>Typora</code>（付费）</td>
</tr>
<tr>
<td>命令行</td>
<td>高</td>
<td><code>Windows Terminal Preview</code>（集成终端，支持自定义）、<code>Git</code>（需要配置<code>SSH</code>连接，暂时请先自己搜）</td>
</tr>
</tbody>
</table>
</div>
<p><strong>注：如果你使用<code>chocolatey</code>，你可以尝试先用命令行安装！</strong> 这些软件我们依次来说：</p>
<h4 id="1-1-1-NodeJS"><a href="#1-1-1-NodeJS" class="headerlink" title="1.1.1 NodeJS"></a>1.1.1 <code>NodeJS</code></h4><p><code>NodeJS</code>是一款很流行的<code>JavaScript</code>运行时（环境），也是使用<code>Hexo</code>的必装依赖。打开<a href="https://nodejs.org/en/">安装官网</a>，如下图，推荐选择左侧的长期支持版本（<code>LTS</code>版本）。</p>
<p><img data-src="https://s1.ax1x.com/2022/08/16/v04OaV.png" alt=""></p>
<p>安装之后，打开命令行，输入：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">node <span class="literal">-v</span></span><br><span class="line">npm <span class="literal">-v</span></span><br></pre></td></tr></table></figure>
<p>来检测是否安装成功。如果都可以成功返回版本号，那么你就可以进行下一步操作了！</p>
<blockquote>
<p>注：一般情况下，官方下载源会很慢，我们需要给<code>NodeJS</code>修改镜像源。使用</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry http://registry.npm.taobao.org/</span><br></pre></td></tr></table></figure>
<p>来调整为国内镜像源。</p>
</blockquote>
<h4 id="1-1-2-Markdown编辑器Marktext"><a href="#1-1-2-Markdown编辑器Marktext" class="headerlink" title="1.1.2 Markdown编辑器Marktext"></a>1.1.2 <code>Markdown</code>编辑器<code>Marktext</code></h4><p><img data-src="https://s1.ax1x.com/2022/08/16/v057WD.png" alt=""></p>
<p>周知所众，我们写博客一般都是用<code>Markdown</code>这种标记语言的（不会写？参见这篇<a href=""><code>Markdown</code>教程</a>）。纯净的界面，即时的渲染、开源与免费三大特点让我爱上了这款编辑器。别的咱也不说，好不好用你自己说了算！这个项目的开源地址在<code>GitHub</code>上：<a href="https://github.com/marktext/marktext/">https://github.com/marktext/marktext/</a>，之后怎么安装我就不用说了吧。</p>
<h4 id="1-1-3-Windows终端·预览版"><a href="#1-1-3-Windows终端·预览版" class="headerlink" title="1.1.3 Windows终端·预览版"></a>1.1.3 <code>Windows</code>终端·预览版</h4><p>如果你嫌<code>CMD</code>或者<code>Powershell</code>的界面、字体不合你的心意，或者就想尝试一些新功能，你可以试一下<code>Windows Terminal Preview</code>。它把几个终端都打包在了一起，且支持自定义界面和启动位置等，同时可以分屏。</p>
<p><img data-src="https://s1.ax1x.com/2022/08/17/vBcCg1.png" alt=""></p>
<p>你可以在<code>Microsoft Store</code>中下载到这款终端·预览。另外，需要改一下<code>powershell</code>的执行策略，管理员权限执行：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Set-ExecutionPolicy</span> Bypass</span><br></pre></td></tr></table></figure>
<p>即可。</p>
<h4 id="1-1-4-hexo，你网站的框架"><a href="#1-1-4-hexo，你网站的框架" class="headerlink" title="1.1.4 hexo，你网站的框架"></a>1.1.4 <code>hexo</code>，你网站的框架</h4><p>上面的软件都准备好了吗？我们来安装博客框架罢。在<code>powershell</code>中执行：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm install <span class="literal">-g</span> hexo<span class="literal">-cli</span></span><br></pre></td></tr></table></figure>
<p>就可以全局安装这个框架了。安装好之后，重启命令行，并用<code>hexo</code>命令检测是否安装成功：</p>
<p><img data-src="https://s1.ax1x.com/2022/08/17/vBWTOI.png" alt=""></p>
<h3 id="1-2-你的repo与服务器"><a href="#1-2-你的repo与服务器" class="headerlink" title="1.2 你的repo与服务器"></a>1.2 你的<code>repo</code>与服务器</h3><p>我们来到<code>GitHub</code>，并新建一个仓库，名称叫作<code>&#123;username&#125;.github.io</code>。如果你曾跟着之前的文章做过<code>Jekyll</code>版网站、<code>master</code>分支被占用的话，你可以新建一个<code>hexo</code>分支。注意需要勾选<code>LICENSE</code>和<code>README</code>，这样可以形成一个<code>master</code>分支。</p>
<p><img data-src="https://s1.ax1x.com/2022/08/17/vB4wY8.png" alt=""></p>
<p>之后，你就会得到类似这样的一个页面：</p>
<p><img data-src="https://s1.ax1x.com/2022/08/17/vB5y9O.png" alt=""></p>
<p>然后我们转到<code>Settings</code>，启用（修改）<code>GitHub Pages</code>的相关设置，选择<code>Deploy from a branch</code>后勾选你的目标分支。如果你完全跟着我来的，默认是<code>master</code>；如果你以前动用过这个仓库，则切换到你新的分支上。如下图，点击<code>Save</code>就可以触发一次更新：</p>
<p><img data-src="https://s1.ax1x.com/2022/08/17/vB563D.png" alt=""></p>
<p>稍等片刻（大概1~3分钟）后，访问<code>https://&#123;username&#125;.github.io</code>（这就是你的网站域名了），如果显示的不是下面这个灰色的<code>404</code>，那么我们就可以开始下一步了！</p>
<p><img data-src="https://s1.ax1x.com/2022/08/17/vDVNFI.png" alt=""></p>
<blockquote>
<p>注：我曾经在<code>Jekyll</code>那篇文章中说过，<code>GitHub Pages</code>会在每一次<code>commit</code>之后触发一次更新<code>action</code>，即自动化。由于需要在服务器上进行操作，可能会出现”排队“的情况，如果设置没错却迟迟出不来”非404“页面，我想，你可能需要继续等一等……</p>
</blockquote>
<hr>
<h2 id="2-初始化、主题与一些设置"><a href="#2-初始化、主题与一些设置" class="headerlink" title="2. 初始化、主题与一些设置"></a>2. 初始化、主题与一些设置</h2><h3 id="2-1-让Hexo运行起来！"><a href="#2-1-让Hexo运行起来！" class="headerlink" title="2.1 让Hexo运行起来！"></a>2.1 让<code>Hexo</code>运行起来！</h3><p>接下来我们就来让<code>Hexo</code>发挥一下它的威力罢。找到一个合适的文件夹，然后执行下面这条命令来初始化一个<code>Hexo</code>项目（这里以我自己为例，自己修改文件夹名）：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">hexo init hexo_website_tutorial //换上自己的文件夹名</span><br></pre></td></tr></table></figure>
<p>正常情况下你获得到如下的结果：</p>
<p><img data-src="https://s1.ax1x.com/2022/08/17/vDamKe.png" alt=""></p>
<p>这个时候，我们<code>cd</code>看一下都创建了哪些东东：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├─.github</span><br><span class="line">├─node_modules</span><br><span class="line">├─scaffolds</span><br><span class="line">├─source</span><br><span class="line">│  └─_posts</span><br><span class="line">└─themes</span><br></pre></td></tr></table></figure>
<p>简要说明一下：<code>.github</code>文件夹可以直接无视；<code>node_modules</code>是一些<code>hexo</code>本身的依赖；<code>scaffolds</code>里放了一些模板<code>Markdown</code>，暂且不用管它；<code>source</code>文件夹中会放我们的文章；<code>themes</code>文件夹则是为之后应用主题做准备。还有一个<code>_config.yml</code>文件，是我们网站的配置文件。</p>
<p>那么，我们怎么生成一个静态的网站呢？此时我们就要用到<code>hexo generate</code>（简称<code>hexo g</code>）命令了。它会读取我们写的文章，配合着主题设置生成静态文件，并复制二进制文件（图片、音频等）。注意，为了网站资源链接可以正确工作，我们要在<code>_config.yml</code>文件中改一行，是你网站的链接：</p>
<p><img data-src="https://s1.ax1x.com/2022/08/18/vrkW28.png" alt=""></p>
<p>修改好之后，执行截图：</p>
<p><img data-src="https://s1.ax1x.com/2022/08/18/vDXL8A.png" alt=""></p>
<p>执行之后，我们会发现多了一个<code>public</code>文件夹和<code>db.json</code>文件。<code>public</code>文件夹会在生成静态文件之后复制到这里，方便上传；<code>db.json</code>是网站的一些<code>meta</code>信息，可以不用管。</p>
<p>生成完了，我们一定会想看一看生成后的效果。你可以使用<code>hexo server</code>命令在<code>4000</code>端口上启动一个服务器。为了方便，你可以加一个参数<code>-o</code>来自动打开浏览器。如下：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">hexo s <span class="literal">-o</span></span><br></pre></td></tr></table></figure>
<p>在<code>4000</code>端口上，我们的默认网站样式类似这样：</p>
<p><img data-src="https://s1.ax1x.com/2022/08/18/vDXOgI.png" alt=""></p>
<p>此时这个主题叫做<code>landscape</code>。由于我个人有更喜欢的主题（<code>NeXT</code>）并且<code>landscape</code>主题可以开发的部分不多，我们不会使用这款主题。稍后你就会知道如何切换主题。</p>
<h3 id="2-2-部署到服务器"><a href="#2-2-部署到服务器" class="headerlink" title="2.2 部署到服务器"></a>2.2 部署到服务器</h3><p>想让别人看到我们的网站，我们就要更新<code>GitHub</code>上的仓库，触发部署<code>action</code>。可是，我不希望每一次都要用3条<code>git</code>命令来上传，怎么办？一个好消息是，<code>hexo</code>提供给我们一个<code>deploy</code>命令。</p>
<h4 id="2-2-1-远程仓库参数设置"><a href="#2-2-1-远程仓库参数设置" class="headerlink" title="2.2.1 远程仓库参数设置"></a>2.2.1 远程仓库参数设置</h4><p>当然了，<code>hexo</code>此时也不知道我们的仓库在哪里，对吧。这时候配置文件<code>_config.yml</code>就可以派上用场了。我们找到它的<code>Deploy</code>部分，并添加一些配置：</p>
<p><img data-src="https://s1.ax1x.com/2022/08/18/vrCnyj.png" alt=""></p>
<p>具体格式如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">&#x27;git&#x27;</span></span><br><span class="line">    <span class="attr">repo:</span> <span class="string">git@github.com:&#123;username&#125;/&#123;repo_name&#125;.git</span></span><br><span class="line">    <span class="attr">branch:</span> &#123;<span class="string">branch_name</span>&#125;</span><br></pre></td></tr></table></figure>
<p>然后，我们来试一下<code>hexo d</code>这个命令……</p>
<p><img data-src="https://s1.ax1x.com/2022/08/18/vriuaq.png" alt=""></p>
<p>诶，为什么会这样呢？<code>Deployer not found</code>是什么意思？原来，我们还需要安装一个官方插件：<code>hexo-deployer-git</code>。</p>
<h4 id="2-2-2-hexo-deployer-git"><a href="#2-2-2-hexo-deployer-git" class="headerlink" title="2.2.2 hexo-deployer-git"></a>2.2.2 <code>hexo-deployer-git</code></h4><p>我们在网站根目录下执行这个命令：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm i hexo<span class="literal">-deployer</span><span class="literal">-git</span> -<span class="literal">-save</span></span><br></pre></td></tr></table></figure>
<p>然后再执行<code>hexo d</code>（太长了，不用图片了）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INFO  Validating config</span><br><span class="line">INFO  Deploying: git</span><br><span class="line">INFO  Setting up Git deployment...</span><br><span class="line">Initialized empty Git repository in D:/08 网站/hexo_website_tutorial/.deploy_git/.git/</span><br><span class="line">[master (root-commit) 0b3e2b7] First commit</span><br><span class="line"> 1 file changed, 0 insertions(+), 0 deletions(-)</span><br><span class="line"> create mode 100644 placeholder</span><br><span class="line">INFO  Clearing .deploy_git folder...</span><br><span class="line">INFO  Copying files from public folder...</span><br><span class="line">INFO  Copying files from extend dirs...</span><br><span class="line">[master 3a2b089] Site updated: 2022-08-18 17:47:15</span><br><span class="line"> 18 files changed, 5172 insertions(+)</span><br><span class="line"> create mode 100644 2022/08/17/hello-world/index.html</span><br><span class="line"> create mode 100644 archives/2022/08/index.html</span><br><span class="line"> create mode 100644 archives/2022/index.html</span><br><span class="line"> create mode 100644 archives/index.html</span><br><span class="line"> create mode 100644 css/fonts/FontAwesome.otf</span><br><span class="line"> create mode 100644 css/fonts/fontawesome-webfont.eot</span><br><span class="line"> create mode 100644 css/fonts/fontawesome-webfont.svg</span><br><span class="line"> create mode 100644 css/fonts/fontawesome-webfont.ttf</span><br><span class="line"> create mode 100644 css/fonts/fontawesome-webfont.woff</span><br><span class="line"> create mode 100644 css/fonts/fontawesome-webfont.woff2</span><br><span class="line"> create mode 100644 css/images/banner.jpg</span><br><span class="line"> create mode 100644 css/style.css</span><br><span class="line"> create mode 100644 fancybox/jquery.fancybox.min.css</span><br><span class="line"> create mode 100644 fancybox/jquery.fancybox.min.js</span><br><span class="line"> create mode 100644 index.html</span><br><span class="line"> create mode 100644 js/jquery-3.4.1.min.js</span><br><span class="line"> create mode 100644 js/script.js</span><br><span class="line"> delete mode 100644 placeholder</span><br><span class="line">Enumerating objects: 34, done.</span><br><span class="line">Counting objects: 100% (34/34), done.</span><br><span class="line">Delta compression using up to 8 threads</span><br><span class="line">Compressing objects: 100% (26/26), done.</span><br><span class="line">Writing objects: 100% (34/34), 882.39 KiB | 1.49 MiB/s, done.</span><br><span class="line">Total 34 (delta 3), reused 0 (delta 0), pack-reused 0</span><br><span class="line">remote: Resolving deltas: 100% (3/3), done.</span><br><span class="line">To github.com:Guleixibian2009/hexo-website-tutorial.git</span><br><span class="line"> + 5066890...3a2b089 HEAD -&gt; master (forced update)</span><br><span class="line">branch &#x27;master&#x27; set up to track &#x27;git@github.com:Guleixibian2009/hexo-website-tutorial.git/master&#x27;.</span><br><span class="line">INFO  Deploy done: git</span><br></pre></td></tr></table></figure>
<p>如果出现类似的结果，那我们就已经部署成功了。这个时候我们去<code>GitHub</code>上去，稍等一会后并访问你的网站看一下，你应该可以看到和本地端口上完全一样的页面。</p>
<p><img data-src="https://s1.ax1x.com/2022/08/18/vrkDDH.png" alt=""></p>
<h3 id="2-3-切换到NexT主题"><a href="#2-3-切换到NexT主题" class="headerlink" title="2.3 切换到NexT主题"></a>2.3 切换到<code>NexT</code>主题</h3><p>当我们可以成功的部署到<code>GitHub</code>上去后，我们就可以开始切换主题了。我们要用的这个主题叫做<code>NexT</code>，准确的说，是<code>Gemini</code>子主题。为了使用这个主题，我们在根目录下克隆一下<code>GitHub</code>上面的主题仓库<code>theme-next/hexo-theme-next</code>：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/theme<span class="literal">-next</span>/hexo<span class="literal">-theme</span><span class="literal">-next</span> themes/next</span><br></pre></td></tr></table></figure>
<p><img data-src="https://s1.ax1x.com/2022/08/19/vrxxmt.png" alt=""></p>
<p>然后打开根目录下的<code>_config.yml</code>（有区别于之后我们会用到主题内的<code>_config.yml</code>文件，切勿搞混）：</p>
<p><img data-src="https://s1.ax1x.com/2022/08/19/vrzSTf.png" alt=""></p>
<p>修改过后重新生成一遍静态文件（<code>hexo clean</code>+<code>hexo g</code>），打开本地端口（<code>hexo s -o</code>）可以看见，我们已经切换到<code>NexT</code>的<code>Muse</code>子主题了：</p>
<p><img data-src="https://s1.ax1x.com/2022/08/19/vrzDcd.png" alt=""></p>
<p>实际上，<code>NexT</code>主题分别是有4个子主题的。打开<code>themes/next</code>文件夹下（简称主题文件夹下<code>_config.yml</code>），找到95行，可以看到所有子主题，以及黑夜模式的设置（本人并未开启）：</p>
<p><img data-src="https://s1.ax1x.com/2022/08/19/vrzynI.png" alt=""></p>
<p>要切换到<code>Gemini</code>子主题，只需把第100行注释掉，并取消注释第103行即可。我们重新生成一下（还记得那3条命令吧）：</p>
<p><img data-src="https://s1.ax1x.com/2022/08/19/vspsTP.png" alt=""></p>
<p>主题是切换过来了，可是我看着怎么是英文的呢？或者，感觉东西太少了？还有，为什么我叫<code>John Doe</code>？别急，下一步，便是设置一些<code>metadata</code>。</p>
<h3 id="2-4-网站信息设置"><a href="#2-4-网站信息设置" class="headerlink" title="2.4 网站信息设置"></a>2.4 网站信息设置</h3><p>在网站根目录下的<code>_config.yml</code>的开头，你可以看到这样的几条配置：</p>
<p><img data-src="https://s1.ax1x.com/2022/08/19/vsp6Ff.png" alt=""></p>
<p>详细地解释一下（我自己先修改了）：<code>title</code>、<code>subtitle</code>、<code>description</code>、<code>author</code>、<code>language</code>几项在更改后会改变下图中的对应位置，<code>description</code>、<code>keywords</code>、<code>language</code>、<code>timezone</code>几项则是变成了网站<code>metadata</code>。（<kbd>Ctrl+I</kbd>应该可以查看）</p>
<p><img data-src="https://s1.ax1x.com/2022/08/19/vs9EXd.png" alt=""></p>
<p><img data-src="https://s1.ax1x.com/2022/08/19/vs9ZnA.png" alt=""></p>
<p><del>（可能做得有些丑，谅解下哈）</del></p>
<blockquote>
<p>回顾：<code>hexo</code>常用命令（以后我就不会再提醒咯）</p>
<ul>
<li><p>清除生成缓存——<code>hexo clean</code>。（对主题上的混乱或配置未生效有帮助）</p>
</li>
<li><p>生成静态文件——<code>hexo g</code>。</p>
</li>
<li><p>部署到远程服务器——<code>hexo d</code>。</p>
</li>
<li><p>打开本地服务器端口——<code>hexo s</code>。</p>
</li>
</ul>
<p>教你几个小妙招：</p>
<ul>
<li><p><code>hexo d</code>和<code>hexo g</code>其实可以合并成一个命令，叫做<code>hexo g -d</code>，就可以自动先生成再自动部署。</p>
</li>
<li><p><code>hexo s</code>加上参数<code>-o</code>就可以自动在浏览器中打开端口。</p>
</li>
</ul>
</blockquote>
<hr>
<h2 id="3-Gemini子主题的官方配置……"><a href="#3-Gemini子主题的官方配置……" class="headerlink" title="3. Gemini子主题的官方配置……"></a>3. <code>Gemini</code>子主题的官方配置……</h2><p>现在我们就可以给我们的网站添加一些功能与细节了。先打开本地端口，让我们从左往右说：</p>
<h3 id="3-1-左侧的侧边栏"><a href="#3-1-左侧的侧边栏" class="headerlink" title="3.1 左侧的侧边栏"></a>3.1 左侧的侧边栏</h3><p>左边较窄的竖栏叫<code>sidebar</code>（侧边栏），分为上下两部分，上半部分是一个导航栏，存放了一些站内链接；下半部分是关于你、一些网站统计数据、友情链接，这里也是我们可以自定义的地方（非官方的插件，如音乐、天气等，我们在第5节非官方插件中说）。当你打开一片博客后，下半部分也可以作为一个文章目录。下面几张图供参考：</p>
<p><img data-src="https://s1.ax1x.com/2022/08/19/vsihCV.png" alt=""></p>
<p><img data-src="https://s1.ax1x.com/2022/08/19/vsi43T.png" alt=""></p>
<h4 id="3-1-1-添加更多的站内链接"><a href="#3-1-1-添加更多的站内链接" class="headerlink" title="3.1.1 添加更多的站内链接"></a>3.1.1 添加更多的站内链接</h4><p>仔细研究主题<code>_config.yml</code>，你会找到这样一个区块，正是关于站内链接的：</p>
<p><img data-src="https://s1.ax1x.com/2022/08/19/vsFpKe.png" alt=""></p>
<p>看起来，我们目前有两个可用链接（主页、归档），相对应的就是<code>home</code>和<code>archive</code>。</p>
<h5 id="3-1-1-1-添加链接"><a href="#3-1-1-1-添加链接" class="headerlink" title="3.1.1.1 添加链接"></a>3.1.1.1 添加链接</h5><p>我们来试试取消注释<code>about</code>、<code>tags</code>和<code>categories</code>：</p>
<p><img data-src="https://s1.ax1x.com/2022/08/19/vskVoR.png" alt=""></p>
<p>诶，正好，同步增加了三个链接<del>（不过暂时打不开）</del>！那我们是不是就能总结出来填入的格式了？</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">    <span class="attr">key:</span> <span class="string">/link/</span> <span class="string">||</span> <span class="string">icon</span></span><br></pre></td></tr></table></figure>
<p><code>key</code>指的是链接的名字（不代表链接地址，这个名字后面还会有用），一个冒号，然后是链接地址（可相对可绝对），然后是<code>||</code>标识符，后面跟一个<code>font-awesome</code>图标名（只能用免费版的）。</p>
<p>掌握了语法之后，我们就可以尝试添加一个自己的链接了！假设你新建了一个歌单页面（具体操作参见后面第4节文章相关操作），它的链接是<code>/album/</code>，并且想要用<code>font-awesome</code>中<code>fas fa-compact-disc</code>这个图标，那我们就可以在配置文件中添加这样一行：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">    <span class="attr">album:</span> <span class="string">/album/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-compact-disc</span></span><br></pre></td></tr></table></figure>
<p>在你重新生成之前，你突发奇想想要把它放在主页那个链接下面，该怎么办呢？我发现，你只需要把这一行移动到<code>home</code>那一行后面即可：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="attr">album:</span> <span class="string">/album/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-compact-disc</span></span><br><span class="line">  <span class="attr">about:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-user</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-th</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="comment">#schedule: /schedule/ || fa fa-calendar</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || fa fa-sitemap</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || fa fa-heartbeat</span></span><br></pre></td></tr></table></figure>
<p>效果类似这样：</p>
<p><img data-src="https://s1.ax1x.com/2022/08/19/vskeF1.png" alt=""></p>
<p>可是，明明其他链接都有中文，怎么新加的<code>album</code>就没有？</p>
<h5 id="3-1-1-2-调整i18n"><a href="#3-1-1-2-调整i18n" class="headerlink" title="3.1.1.2 调整i18n"></a>3.1.1.2 调整<code>i18n</code></h5><p>别忘了，<code>NexT</code>主题的默认语言是英文！我们是通过修改配置强制翻译成中文的（可以回顾一下2.4节）。那…我们能不能手动翻译（学名<code>internationalization</code>，国际化，简称<code>i18n</code>)呢？其实是可以的。我们找到这个文件：</p>
<p><img data-src="https://s1.ax1x.com/2022/08/19/vsA5gf.png" alt=""></p>
<p>然后我们重新生成，是不是就成功了呢？</p>
<p><img data-src="https://s1.ax1x.com/2022/08/19/vsA48P.png" alt=""></p>
<p>记住这个方法，我们之后也还是会用到的！</p>
<h5 id="3-1-1-3-计数小“徽章”"><a href="#3-1-1-3-计数小“徽章”" class="headerlink" title="3.1.1.3 计数小“徽章”"></a>3.1.1.3 计数小“徽章”</h5><p>想要显示目前我们的博客内一共有几篇文章、几个分类和几个标签吗？我们可以用一个<code>badge</code>解决这件事。还是刚才那段配置，有没有在下面看到一段这样的选项？</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu_settings:</span></span><br><span class="line">  <span class="attr">icons:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">badges:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<p>我们把<code>badges</code>选项调成<code>true</code>，系统就会自动计数了。看一下效果：</p>
<p><img data-src="https://s1.ax1x.com/2022/08/19/vsVzBF.png" alt=""></p>
<p>嗯，光荣的<code>0 0 1</code>。当然现在我们的“标签”页还是打不开的。具体怎么调文章的分类或如何创建“标签”页面等，我会在第4节文章相关操作中讲到。</p>
<h4 id="3-1-2-更新“综合信息中心”"><a href="#3-1-2-更新“综合信息中心”" class="headerlink" title="3.1.2 更新“综合信息中心”"></a>3.1.2 更新“综合信息中心”</h4><p>我之所以把这个侧边栏的下半部分称作一个“综合数据中心”，主要是因为你几乎可以在这里放任何你想放的信息，比如你的头像、个性签名、文章相关统计、个人链接等等。（至于天气和音乐播放器我们之后会在第5节非官方插件中讲到。）这是我的网站目前的样子：</p>
<p><img data-src="https://s1.ax1x.com/2022/08/19/vsEUsS.png" alt=""></p>
<h5 id="3-1-2-1-你的头像"><a href="#3-1-2-1-你的头像" class="headerlink" title="3.1.2.1 你的头像"></a>3.1.2.1 你的头像</h5><p>想要给大家展示一下你的头像吗？当然可以。准备好一张照片（建议方形或圆形），移动到<code>/public/images</code>这个文件夹里。然后打开主题配置文件，找到如下配置：</p>
<p><img data-src="https://s1.ax1x.com/2022/08/19/vsEaqg.png" alt=""></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Sidebar Avatar</span></span><br><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="comment"># Replace the default image and set the url here.</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">/images/avatar.gif</span></span><br><span class="line">  <span class="comment"># If true, the avatar will be dispalyed in circle.</span></span><br><span class="line">  <span class="attr">rounded:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If true, the avatar will be rotated with the cursor.</span></span><br><span class="line">  <span class="attr">rotated:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p><code>url</code>是你图片的路径，格式就是<code>/images/</code>再加上文件名（不一定是<code>avatar.gif</code>）。<code>rounded</code>则是选择是否要显示为圆形，<code>rotated</code>是选择是否要在鼠标移动到图片上时旋转。我们看一下效果如何：</p>
<p><img data-src="https://s1.ax1x.com/2022/08/19/vsENM8.png" alt=""></p>
<p>注：这个黑色的<code>N</code>就是<code>/images/</code>文件夹下的<code>logo.svg</code>。</p>
<h5 id="3-1-2-2-个人链接"><a href="#3-1-2-2-个人链接" class="headerlink" title="3.1.2.2 个人链接"></a>3.1.2.2 个人链接</h5><p>既然说了，这里是“综合信息中心”，那我能不能放一点个人信息（个人链接）呢？当然是可以的。最终的效果如下：</p>
<p><img data-src="https://s1.ax1x.com/2022/08/20/vsY8B9.png" alt=""></p>
<p>那这个是在哪里设置的呢？我们可以找到这样一段配置：</p>
<p><img data-src="https://s1.ax1x.com/2022/08/20/vsYYA1.png" alt=""></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="attr">GitHub:</span> <span class="string">https://github.com/Guleixibian2009</span> <span class="string">||</span> <span class="string">fab</span> <span class="string">fa-github</span></span><br><span class="line">  <span class="attr">E-Mail:</span> <span class="string">mailto:guleixibian2009@outlook.com</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-envelope</span></span><br><span class="line">  <span class="attr">RSS:</span> <span class="string">https://guleixibian2009.github.io/hexo-website-tutorial/atom.xml</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-rss</span></span><br><span class="line">  <span class="attr">Website:</span> <span class="string">https://guleixibian2009.github.io/</span> <span class="string">||</span> <span class="string">fab</span> <span class="string">fa-html5</span></span><br></pre></td></tr></table></figure>
<p>它的语法和<code>3.1.1.1</code>节中链接的语法是相同的，这里就不再赘述了。</p>
<h5 id="3-1-2-3-Creative-Commons文章版权声明"><a href="#3-1-2-3-Creative-Commons文章版权声明" class="headerlink" title="3.1.2.3 Creative Commons文章版权声明"></a>3.1.2.3 <code>Creative Commons</code>文章版权声明</h5><p>是开源项目总得有个开源许可证<code>LICENSE</code>吧。像博客一类非代码开源项目，我们一般选用<code>CC</code>版权声明。一共有6种形式（当然还有其他较特殊的协议，比如放弃权利<code>CC0</code>，可以自行搜索）：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>协议</th>
<th><code>by</code>（<code>Attribution</code>）</th>
<th><code>nc</code>（<code>NonCommercial</code>）</th>
<th><code>nd</code>（<code>No Derivative Works</code>）</th>
<th><code>sa</code>（<code>Share Alike</code>）</th>
</tr>
</thead>
<tbody>
<tr>
<td>转载时必须标示原作者</td>
<td>√</td>
<td>×</td>
<td>×</td>
<td>×</td>
</tr>
<tr>
<td>标示原作者，且禁止修改</td>
<td>√</td>
<td>×</td>
<td>√</td>
<td>×</td>
</tr>
<tr>
<td>标示原作者，且禁止商用</td>
<td>√</td>
<td>√</td>
<td>×</td>
<td>×</td>
</tr>
<tr>
<td>标示原作者，且禁止修改、商用</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td>×</td>
</tr>
<tr>
<td>标示原作者，且禁止商用，必须相同协议</td>
<td>√</td>
<td>√</td>
<td>×</td>
<td>√</td>
</tr>
<tr>
<td>标示原作者，必须相同协议</td>
<td>√</td>
<td>×</td>
<td>×</td>
<td>√</td>
</tr>
</tbody>
</table>
</div>
<p>一般我们选用<code>CC by-nc-sa</code>这种协议。那么，我们如何直观地向别人展示呢？<code>NexT</code>主题内置了小图标的功能，可以找到这一部分配置文件：</p>
<p><img data-src="https://s1.ax1x.com/2022/08/20/vsYG7R.png" alt=""></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">creative_commons:</span></span><br><span class="line">  <span class="attr">license:</span> <span class="string">by-nc-sa</span></span><br><span class="line">  <span class="attr">sidebar:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">post:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">language:</span> <span class="string">deed.zh</span></span><br></pre></td></tr></table></figure>
<p>我们选中<code>sidebar</code>一项，<code>NexT</code>就会自动渲染出一个小图标了。至于<code>post</code>一项，我们放到3.2节中讲。<code>language</code>如果需要调整为中文，直接填写<code>deed.zh</code>即可。看一下渲染效果：</p>
<p><img data-src="https://s1.ax1x.com/2022/08/20/vsY3nJ.png" alt=""></p>
<h4 id="3-1-3-文章目录"><a href="#3-1-3-文章目录" class="headerlink" title="3.1.3 文章目录"></a>3.1.3 文章目录</h4><p>如果你现在进入那篇默认的<code>Hello World</code>文章，你可以在原先“信息中心”的地方看到文章的目录。那么这个目录有没有可以自定义的地方呢？也是有的。我们可以找到对应的配置：</p>
<p><img data-src="https://s1.ax1x.com/2022/08/20/vsdROO.png" alt=""></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">toc:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Automatically add list number to toc.</span></span><br><span class="line">  <span class="attr">number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If true, all words will placed on next lines if header width longer then sidebar width.</span></span><br><span class="line">  <span class="attr">wrap:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># If true, all level of TOC in a post will be displayed, rather than the activated part of it.</span></span><br><span class="line">  <span class="attr">expand_all:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Maximum heading depth of generated toc.</span></span><br><span class="line">  <span class="attr">max_depth:</span> <span class="number">6</span></span><br></pre></td></tr></table></figure>
<p>仔细观察一下生成的<code>toc</code>（<code>Table Of Contents</code>，简称<code>toc</code>），发现每一个标题都被自动编上了号。可是，这就对像我这种习惯手动编号的人很不友好啊，我们就可以把<code>number</code>这个选项关掉。<code>wrap</code>则是说过长的标题是全部显示还是省略号，我选择了全部显示。<code>expand_all</code>指要不要全部展开，如果启用的话就会显示所有标题，然而像我这篇非常长的文章明显是不太合适的，所以就保持在<code>false</code>上。这样它就只会显示当前浏览部分的目录了。<code>max_depth</code>是指要生成多少层标题（1~6）。如果你不想显示过于细致的标题，可以调小。那调整之后效果类似这样：</p>
<p><img data-src="https://s1.ax1x.com/2022/08/20/vsdfmD.png" alt=""></p>
<h3 id="3-2-文章板块相关配置"><a href="#3-2-文章板块相关配置" class="headerlink" title="3.2 文章板块相关配置"></a>3.2 文章板块相关配置</h3><p>终于到了我们的重头戏。有一个美观的<code>sidebar</code>只是基础，博客最重要的就是<code>post</code>（即博文部分）了。官方提供的自定义不多，但还是有可以打开的功能的。（注：在3.2节中我们只会讲关于这一板块的功能，并不会讲到类似“阅读全文按钮”等。我们把它留在第4节文章相关配置里讲。）</p>
<h4 id="3-2-1-文章相关信息"><a href="#3-2-1-文章相关信息" class="headerlink" title="3.2.1 文章相关信息"></a>3.2.1 文章相关信息</h4><p>如果你细心的观察过文章标题下的小字，你就会发现诸如发布时间、更新时间、本文字数、分类等信息。而是否显示它们都是可以调的。</p>
<p><img data-src="https://s1.ax1x.com/2022/08/20/vsgC9g.png" alt=""></p>
<h5 id="3-2-1-1-基本配置"><a href="#3-2-1-1-基本配置" class="headerlink" title="3.2.1.1 基本配置"></a>3.2.1.1 基本配置</h5><p>你可以在这里找到一些基本配置：</p>
<p><img data-src="https://s1.ax1x.com/2022/08/20/vsgP3Q.png" alt=""></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Post meta display settings</span></span><br><span class="line"><span class="attr">post_meta:</span></span><br><span class="line">  <span class="attr">item_text:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">created_at:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">updated_at:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">another_day:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>看起来现在所有功能都是打开的。<code>item_text</code>指的是要不要显示数据名称；<code>created_at</code>是发布时间；<code>categories</code>是文章的分类。由于默认的<code>Hello World</code>文章是没有分类的，所以它就没有显示。可是，为什么我没有看到字数统计等信息呢？原来这是通过另外一项设置实现的。</p>
<h5 id="3-2-1-2-字数统计"><a href="#3-2-1-2-字数统计" class="headerlink" title="3.2.1.2 字数统计"></a>3.2.1.2 字数统计</h5><p>就在<code>post_meta</code>一节下面，有一个<code>symbols_count_time</code>。</p>
<p><img data-src="https://s1.ax1x.com/2022/08/20/vsgicj.png" alt=""></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">separated_meta:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">item_text_post:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">item_text_total:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<p>用之前我们还需要安装一个依赖，叫做<code>hexo-symbols-count-time</code>。直接使用<code>npm</code>安装即可：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm i hexo<span class="literal">-symbols</span><span class="literal">-count</span><span class="literal">-time</span> -<span class="literal">-save</span></span><br></pre></td></tr></table></figure>
<p>然后我们来看一下这些设置有什么用。<code>item_text_post</code>指的是要不要在文章标题下方显示本文字数&amp;阅读时间；<code>item_text_total</code>则是在页脚显示全站计数。我们重新渲染来看一下效果：</p>
<p><img data-src="https://s1.ax1x.com/2022/08/20/vsI96U.png" alt=""></p>
<p><img data-src="https://s1.ax1x.com/2022/08/20/vsIplT.png" alt=""></p>
<h4 id="3-2-2-代码块样式"><a href="#3-2-2-代码块样式" class="headerlink" title="3.2.2 代码块样式"></a>3.2.2 代码块样式</h4><p>在默认的<code>Hello World</code>文章中，有4个代码块。也许你不喜欢这种较亮的主题；或者，你不介意主题，但只是想要添加一个复制按钮？这一切的一切都是可以修改的！我们找一下对应的配置，嗯，在这里：</p>
<p><img data-src="https://s1.ax1x.com/2022/08/20/vsIim4.png" alt=""></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">codeblock:</span></span><br><span class="line">  <span class="comment"># Code Highlight theme</span></span><br><span class="line">  <span class="attr">highlight_theme:</span> <span class="string">normal</span></span><br><span class="line">  <span class="comment"># Add copy button on codeblock</span></span><br><span class="line">  <span class="attr">copy_button:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Show text copy result.</span></span><br><span class="line">    <span class="attr">show_result:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Available values: default | flat | mac</span></span><br><span class="line">    <span class="attr">style:</span> <span class="string">default</span></span><br></pre></td></tr></table></figure>
<p>高亮是默认开启的（没人不用这个功能，你真的不用的话到根目录<code>_config.yml</code>中<code># Writing</code>一节可以禁用）。你可以自己选一个喜欢的<code>highlight_theme</code>，我保留了<code>normal</code>，也就是浅色。<code>copy_button</code>中直接两个都调成<code>true</code>就可以显示复制按钮了。效果如下：</p>
<p><img data-src="https://s1.ax1x.com/2022/08/20/vsICXF.png" alt=""></p>
<h4 id="3-2-3-看见了还真不一定知道是什么的辅助功能"><a href="#3-2-3-看见了还真不一定知道是什么的辅助功能" class="headerlink" title="3.2.3  看见了还真不一定知道是什么的辅助功能"></a>3.2.3  看见了还真不一定知道是什么的辅助功能</h4><p>为了直观地展示这一节的内容，我将先超纲新建一篇文章，大家见谅哈。在这篇文章里既有中文又有英文，我还给了它一个标签，一个分类。</p>
<h5 id="3-2-3-1-中英文空格——Pangu"><a href="#3-2-3-1-中英文空格——Pangu" class="headerlink" title="3.2.3.1 中英文空格——Pangu"></a>3.2.3.1 中英文空格——<code>Pangu</code></h5><p><img data-src="https://s1.ax1x.com/2022/08/20/vsT5f1.png" alt=""></p>
<p>我个人觉得中、英文混杂时没有个空格很难受，有的时候又会忘记加（就是假设，假设！）。怎么办呢？<code>NexT</code>提供一个功能叫做<code>Pangu</code>。它可以自动在中英文之间添加空格。我们找到配置：</p>
<p><img data-src="https://s1.ax1x.com/2022/08/20/vsTTl6.png" alt="">然后改成<code>true</code>即可。渲染一下试试：</p>
<p><img data-src="https://s1.ax1x.com/2022/08/20/vsT4YR.png" alt=""></p>
<h5 id="3-2-3-2-图片懒加载——lazyload"><a href="#3-2-3-2-图片懒加载——lazyload" class="headerlink" title="3.2.3.2 图片懒加载——lazyload"></a>3.2.3.2 图片懒加载——<code>lazyload</code></h5><p>一路看下来，有没有发现博客中的图片都是启用了懒加载的？就在<code>pangu</code>的配置附近，有一个：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Vanilla JavaScript plugin for lazyloading images.</span></span><br><span class="line"><span class="comment"># For more information: https://github.com/ApoorvSaxena/lozad.js</span></span><br><span class="line"><span class="attr">lazyload:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<p>改成<code>true</code>即可。它的原理就是先获取较快的占位图，再在滚动时加载新的图片。效果如下：</p>
<p><img data-src="https://gcdnb.pbrd.co/images/62i8BHj3vjF7.gif?o=1" alt=""></p>
<p>（是动图，压缩过，点击重新播放）</p>
<h5 id="3-2-3-3-图片放大——fancybox"><a href="#3-2-3-3-图片放大——fancybox" class="headerlink" title="3.2.3.3 图片放大——fancybox"></a>3.2.3.3 图片放大——<code>fancybox</code></h5><p>想要实现一个图片点击放大功能吗？<code>fancybox</code>可以满足你的需求。我们找到这样一段配置：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># FancyBox is a tool that offers a nice and elegant way to add zooming functionality for images.</span></span><br><span class="line"><span class="comment"># For more information: https://fancyapps.com/fancybox</span></span><br><span class="line"><span class="attr">fancybox:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<p>改成<code>true</code>之后我们来看一下效果：</p>
<p><img data-src="https://s1.ax1x.com/2022/08/20/vsToSx.png" alt=""></p>
<h5 id="3-2-3-4-局部刷新——pjax"><a href="#3-2-3-4-局部刷新——pjax" class="headerlink" title="3.2.3.4 局部刷新——pjax"></a>3.2.3.4 局部刷新——<code>pjax</code></h5><p>想要快速的切换页面？启用<code>pjax</code>即可。可能很多人听说过<code>ajax</code>，其实<code>pjax</code>相当于类似的功能。</p>
<p>启用之前需要先用<code>git</code>克隆<code>theme-next-pjax</code>的仓库。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/theme<span class="literal">-next</span>/theme<span class="literal">-next</span><span class="literal">-pjax</span> themes/next/source/lib/pjax</span><br></pre></td></tr></table></figure>
<p>然后在配置文件中启用<code>pjax</code>：</p>
<p><img data-src="https://s1.ax1x.com/2022/08/20/vsqaj0.png" alt=""></p>
<p>效果图我就不放了，动图上传起来太麻烦，得另找图床。可以自己试一下效果。</p>
<h4 id="3-2-4-数学公式支持——mathjax"><a href="#3-2-4-数学公式支持——mathjax" class="headerlink" title="3.2.4 数学公式支持——mathjax"></a>3.2.4 数学公式支持——<code>mathjax</code></h4><p>如果你看过这篇<a href="https://guleixibian2009.github.io/2021/11/28/Markdown中Latex常用语法/">关于<code>LaTex</code>的文章</a>的话，你可能会知道，<code>Markdown</code>文章中是可以添加数学公式的。那么，<code>Hexo</code>有没有渲染数学公式的功能呢？是有的。我们可以找到如下配置：</p>
<p><img data-src="https://s1.ax1x.com/2022/08/21/vycLss.png" alt=""></p>
<p>当然注释里也说得很清楚了，我们需要安装另一个<code>hexo</code>编译器，即<code>hexo-renderer-kramed</code>。使用如下两个命令：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm un hexo<span class="literal">-renderer</span><span class="literal">-marked</span></span><br><span class="line">npm i hexo renderer<span class="literal">-kramed</span> -<span class="literal">-save</span></span><br></pre></td></tr></table></figure>
<p>安装即可。将<code>enable</code>那一行改为<code>true</code>，这个时候你就已经准备好<code>MathJax</code>了，来测试一下：</p>
<script type="math/tex; mode=display">
f(x) =
\begin{cases}
x^2 \qquad & x \gt 0 \\
e^x \qquad & x \le 0
\end{cases}</script><p>不过，使用<code>hexo-renderer-kramed</code>会带来一个小问题…</p>
<h4 id="3-2-5-修复Todo-List无法渲染的问题"><a href="#3-2-5-修复Todo-List无法渲染的问题" class="headerlink" title="3.2.5 修复Todo List无法渲染的问题"></a>3.2.5 修复<code>Todo List</code>无法渲染的问题</h4><p>这个问题是我在写<code>Markdown</code>语法那篇文章时发现的。虽然<code>Todo List</code>不是一个非常重要的语法，但我想我们最好还是修复一下这个问题：</p>
<p><img data-src="https://s1.ax1x.com/2022/08/27/vR74PS.png" alt=""></p>
<p>解决办法是，打开<code>node_modules/hexo-renderer-kramed/lib/renderer.js</code>，并在第19行添加以下内容（对，就是查到的）：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Support To-Do List</span></span><br><span class="line">Renderer.prototype.listitem = <span class="function"><span class="keyword">function</span>(<span class="params">text</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="regexp">/^\s*\[[x ]\]\s*/</span>.test(text)) &#123;</span><br><span class="line">    text = text.replace(<span class="regexp">/^\s*\[ \]\s*/</span>, <span class="string">&#x27;&lt;input type=&quot;checkbox&quot; disabled=&quot;disabled&quot;&gt;&lt;/input&gt; &#x27;</span>).replace(<span class="regexp">/^\s*\[x\]\s*/</span>, <span class="string">&#x27;&lt;input type=&quot;checkbox&quot; disabled=&quot;disabled&quot; checked&gt;&lt;/input&gt; &#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&lt;li style=&quot;list-style: none&quot;&gt;&#x27;</span> + text + <span class="string">&#x27;&lt;/li&gt;\n&#x27;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&lt;li&gt;&#x27;</span> + text + <span class="string">&#x27;&lt;/li&gt;\n&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;; </span><br></pre></td></tr></table></figure>
<p>修改之后重新渲染一遍即可。还是来测试一下：</p>
<ul>
<li style="list-style: none"><input type="checkbox" disabled="disabled" checked></input> 这是一个<code>Todo List</code>。</li>
<li style="list-style: none"><input type="checkbox" disabled="disabled"></input> 这是一个未被勾选的选项。</li>
</ul>
<h4 id="3-2-6-文末板块配置"><a href="#3-2-6-文末板块配置" class="headerlink" title="3.2.6 文末板块配置"></a>3.2.6 文末板块配置</h4><p>在文章末尾一般会放置一些关于文章的额外的信息。这是我的博客文末的功能：</p>
<p><img data-src="https://s1.ax1x.com/2022/08/28/vW2L2q.png" alt=""></p>
<h5 id="3-2-6-1-版权声明方框"><a href="#3-2-6-1-版权声明方框" class="headerlink" title="3.2.6.1 版权声明方框"></a>3.2.6.1 版权声明方框</h5><p>很重视要告诉你的读者这是你的原创文章，或者觉得有必要强调自己使用了<code>Creative Commons</code>声明？可以考虑添加一个版权方框。至于设置的话，在这里：</p>
<p><img data-src="https://s1.ax1x.com/2022/08/28/vW2U81.png" alt=""></p>
<p>把<code>post: false</code>调整为<code>true</code>即可。重新生成一下，看一下效果：</p>
<p><img data-src="https://s1.ax1x.com/2022/08/28/vW2Y59.png" alt=""></p>
<p>当然，如果你对默认的翻译不满意的话，可以找到之前那个<code>i18n</code>配置文件，然后自行修改。</p>
<p><img data-src="https://s1.ax1x.com/2022/08/28/vW2NCR.png" alt=""></p>
<h5 id="3-2-6-2-修改标签的小图标"><a href="#3-2-6-2-修改标签的小图标" class="headerlink" title="3.2.6.2 修改标签的小图标"></a>3.2.6.2 修改标签的小图标</h5><p>仔细看，在文章末尾会显示出这篇文章的标签。在上一节的图片中，它的样式是<code># Test</code>。我个人不喜欢这个<code>#</code>，想把它换掉。有这个功能吗？可以找到如下配置：</p>
<p><img data-src="https://s1.ax1x.com/2022/08/29/vfFMzd.png" alt=""></p>
<p>把<code>tag_icon</code>一项改成<code>true</code>，然后重新渲染一下看看：</p>
<p><img data-src="https://s1.ax1x.com/2022/08/29/vfFniD.png" alt=""></p>
<h5 id="3-2-6-3-其他发布渠道链接（引流）"><a href="#3-2-6-3-其他发布渠道链接（引流）" class="headerlink" title="3.2.6.3 其他发布渠道链接（引流）"></a>3.2.6.3 其他发布渠道链接（引流）</h5><p>需要在文章末尾给自己其他的发布渠道（如公众号，<code>CSDN</code>等）或其它前端项目引流吗？我们同样可以添加一个链接方框。这是添加后的效果：</p>
<p><img data-src="https://s1.ax1x.com/2022/08/29/vfFuJe.png" alt=""></p>
<p>我们可以找到这样的配置：</p>
<p><img data-src="https://s1.ax1x.com/2022/08/29/vfFKRH.png" alt=""></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Subscribe through Telegram Channel, Twitter, etc.</span></span><br><span class="line"><span class="comment"># Usage: `Key: permalink || icon` (Font Awesome)</span></span><br><span class="line"><span class="attr">follow_me:</span></span><br><span class="line">  <span class="comment">#Twitter: https://twitter.com/username || fab fa-twitter</span></span><br><span class="line">  <span class="comment">#Telegram: https://t.me/channel_name || fab fa-telegram</span></span><br><span class="line">  <span class="comment">#WeChat: /images/wechat_channel.jpg || fab fa-weixin</span></span><br><span class="line">  <span class="comment">#RSS: /atom.xml || fa fa-rss</span></span><br></pre></td></tr></table></figure>
<p>它的语法和3.1.1.1节的是一样的，可以参考一下。同时，如果你觉得老是修改<code>i18n</code>很烦的话，可以直接用你想要的名字作为<code>Key</code>，如：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">follow_me:</span></span><br><span class="line">  <span class="comment">#Twitter: https://twitter.com/username || fab fa-twitter</span></span><br><span class="line">  <span class="comment">#Telegram: https://t.me/channel_name || fab fa-telegram</span></span><br><span class="line">  <span class="comment">#WeChat: /images/wechat_channel.jpg || fab fa-weixin</span></span><br><span class="line">  <span class="attr">RSS:</span> <span class="string">/atom.xml</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-rss</span></span><br><span class="line">  <span class="string">旧版网站:</span> <span class="string">https://guleixibian.github.io/</span> <span class="string">||</span> <span class="string">fab</span> <span class="string">fa-html5</span></span><br><span class="line">  <span class="string">手写网站:</span> <span class="string">https://guleixibian2009.github.io/Hand-Written-HTML-Site/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-laptop-code</span></span><br><span class="line">  <span class="string">Awesome-Bootstrap项目:</span> <span class="string">https://guleixibian2009.github.io/awesome-bs5/</span> <span class="string">||</span> <span class="string">fab</span> <span class="string">fa-bootstrap</span></span><br></pre></td></tr></table></figure>
<h5 id="3-2-6-4-打赏功能"><a href="#3-2-6-4-打赏功能" class="headerlink" title="3.2.6.4 打赏功能"></a>3.2.6.4 打赏功能</h5><p>在自己的网站上加几个打赏二维码还是一个不错的选择<del>（当然我其实没有放）</del>，包括一些项目<code>README</code>里面也会放。预先准备好几个收款码（一定是固定的那种）或者你想放的图片，放到<code>themes/next/source/images</code>文件夹中。找到这样的配置：</p>
<p><img data-src="https://s1.ax1x.com/2022/08/29/vfBut0.png" alt=""></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Reward (Donate)</span></span><br><span class="line"><span class="comment"># Front-matter variable (unsupport animation).</span></span><br><span class="line"><span class="attr">reward_settings:</span></span><br><span class="line">  <span class="comment"># If true, reward will be displayed in every article by default.</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">animation:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment">#comment: Donate comment here.</span></span><br><span class="line"></span><br><span class="line"><span class="attr">reward:</span></span><br><span class="line">  <span class="comment">#wechatpay: /images/wechatpay.png</span></span><br><span class="line">  <span class="comment">#alipay: /images/alipay.png</span></span><br><span class="line">  <span class="comment">#paypal: /images/paypal.png</span></span><br><span class="line">  <span class="comment">#bitcoin: /images/bitcoin.png</span></span><br></pre></td></tr></table></figure>
<p>这个打赏的配置有两部分。<code>reward_settings</code>是设置打赏按钮；图片地址要写在<code>reward</code>里面。先把<code>enable</code>调成<code>true</code>，然后添加几张图片试试：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">reward_settings:</span></span><br><span class="line">  <span class="comment"># If true, reward will be displayed in every article by default.</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">animation:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">comment:</span> <span class="string">给作者买一杯作业...</span></span><br><span class="line"></span><br><span class="line"><span class="attr">reward:</span></span><br><span class="line">  <span class="comment">#wechatpay: /images/wechatpay.png</span></span><br><span class="line">  <span class="comment">#alipay: /images/alipay.png</span></span><br><span class="line">  <span class="comment">#paypal: /images/paypal.png</span></span><br><span class="line">  <span class="comment">#bitcoin: /images/bitcoin.png</span></span><br><span class="line">  <span class="string">把我的网站分享给别人吧！:</span> <span class="string">/images/websiteQR.png</span></span><br></pre></td></tr></table></figure>
<p>至于<code>comment</code>一行的话，是你想要在打赏按钮上方显示的句子。看一下效果：</p>
<p><img data-src="https://s1.ax1x.com/2022/08/29/vfBnkq.png" alt=""></p>
<h3 id="3-3-网站上的小“零件”"><a href="#3-3-网站上的小“零件”" class="headerlink" title="3.3 网站上的小“零件”"></a>3.3 网站上的小“零件”</h3><p>这一章是关于页面上的一些（官方的）小功能。比如说（并不是所有的）：</p>
<p><img data-src="https://s1.ax1x.com/2022/08/29/vfD88f.png" alt=""></p>
<h4 id="3-3-1-页脚信息显示"><a href="#3-3-1-页脚信息显示" class="headerlink" title="3.3.1 页脚信息显示"></a>3.3.1 页脚信息显示</h4><p>页脚（<code>footer</code>）也是稍微有一些可以调整的地方的：</p>
<p><img data-src="https://s1.ax1x.com/2022/08/29/vfDG28.png" alt=""></p>
<p>我们目前的页脚是这样的：</p>
<p><img title="" data-src="https://s1.ax1x.com/2022/08/29/vfD3PP.png" alt="" data-align="inline"></p>
<p>看起来有一个版权符号，年份，作者名，还有一个爱心。但实际上，版权年份其实只会显示当前年份。如果想像我一样显示类似2021~2022，该如何实现呢？我们可以找到这样一段配置：</p>
<p><img data-src="https://s1.ax1x.com/2022/08/29/vfDJxS.png" alt=""></p>
<p>具体来讲一下：</p>
<ol>
<li><p>被注释掉的一行<code>since</code>指的是站点建立的时间。把它取消注释，并改为现在的年份，就可以每年更新了（每年要重新渲染一次）。</p>
</li>
<li><p>想要让爱心动起来的话，可以把<code>icon</code>中<code>animated</code>改为<code>true</code>。</p>
</li>
<li><p>版权默认使用项目名称，但如果希望使用我自己的名字，可以在<code>copyright</code>中写上自己的名字。</p>
</li>
<li><p><code>powered</code>指要不要显示“由<code>Hexo</code>强力驱动”，默认打开。</p>
</li>
<li><p><code>beian</code>中是网站<code>ICP</code>备案，我没备案就不写上了。修改完后，记得重新渲染一下。</p>
</li>
</ol>
<p>那个计数是怎么实现的呢？那是一个第三方服务，我放在第5章中讲。</p>
<h4 id="3-3-2-回到顶部按钮"><a href="#3-3-2-回到顶部按钮" class="headerlink" title="3.3.2 回到顶部按钮"></a>3.3.2 回到顶部按钮</h4><p>看完一篇非常长的文章，如果读者想要一键返回顶部，我们就需要一个<code>back2top</code>按钮。基本款的默认已经有了，但是我们还可以对它进行进一步配置。</p>
<p><img data-src="https://s1.ax1x.com/2022/08/30/vhUJyj.png" alt=""></p>
<p>这里一共有3个选项。<code>enable</code>默认开启；<code>sidebar</code>指的是按钮的位置要不要加在侧边栏下方；<code>scrollpercent</code>是显示阅读百分比。我开启了第三项。最终效果：</p>
<p><img data-src="https://s1.ax1x.com/2022/08/30/vhU8Sg.png" alt=""></p>
<h4 id="3-3-3-阅读进度条"><a href="#3-3-3-阅读进度条" class="headerlink" title="3.3.3 阅读进度条"></a>3.3.3 阅读进度条</h4><p>如何让读者清晰地看出自己已经读了多少呢？刚刚显示百分比的功能还是不错的。不过我们还有更加直观一些的方法——阅读进度条。找到这段配置：</p>
<p><img data-src="https://s1.ax1x.com/2022/08/30/vhUGlQ.png" alt=""></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Reading progress bar</span></span><br><span class="line"><span class="attr">reading_progress:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Available values: top | bottom</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">top</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">&quot;#37c6c0&quot;</span></span><br><span class="line">  <span class="attr">height:</span> <span class="string">3px</span></span><br></pre></td></tr></table></figure>
<p>如果你不介意进度条的颜色和高度的话，直接<code>enable: true</code>就已经可以用了。不满意的话可以自己调整一下下面三个参数。这是最终的效果：</p>
<p><img data-src="https://s1.ax1x.com/2022/08/30/vhU1fS.png" alt=""></p>
<h4 id="3-3-4-书签功能"><a href="#3-3-4-书签功能" class="headerlink" title="3.3.4 书签功能"></a>3.3.4 书签功能</h4><p>需要在关闭页面时记录下自己的阅读进度吗？可以打开（自动）书签功能。找一下：</p>
<p><img data-src="https://s1.ax1x.com/2022/08/30/vhdkKH.png" alt=""></p>
<p>直接把<code>enable</code>调成<code>true</code>即可。默认的版本是<code>auto</code>，即关闭页面自动保存；你也可以调成<code>manual</code>，只在读者点击图标时保存。效果如下（自己尝试一下吧）：</p>
<p><img data-src="https://s1.ax1x.com/2022/08/30/vhdC8O.png" alt=""></p>
<h4 id="3-3-5-右上角GitHub徽标"><a href="#3-3-5-右上角GitHub徽标" class="headerlink" title="3.3.5 右上角GitHub徽标"></a>3.3.5 右上角<code>GitHub</code>徽标</h4><p>虽然我们已经在侧边栏中加过一个<code>github</code>链接了，但我们同样可以用一个更加明显的方式为自己的<code>github</code>账号引流。这就是大名鼎鼎的<code>GitHub Banner</code>。至于配置的话，就在刚才的下面：</p>
<p><img data-src="https://s1.ax1x.com/2022/08/30/vhdArd.png" alt=""></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># `Follow me on GitHub` banner in the top-right corner.</span></span><br><span class="line"><span class="attr">github_banner:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">permalink:</span> <span class="string">https://github.com/Guleixibian2009</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">Follow</span> <span class="string">me</span> <span class="string">on</span> <span class="string">GitHub~</span></span><br></pre></td></tr></table></figure>
<p>打开功能，先把<code>enable</code>调成<code>true</code>。<code>permalink</code>是指向你想要引流的链接（比如<code>github</code>账号，项目地址等），<code>title</code>是鼠标移到图标上时显示什么。来试一下：</p>
<p><img data-src="https://s1.ax1x.com/2022/08/30/vhdixe.png" alt=""></p>
<p>不过如果细看的话…这个<code>banner</code>和书签在页面顶部时似乎有点小bug。重叠我能接受，可是露出一个角来就有点奇怪了啊！</p>
<p><img data-src="https://s1.ax1x.com/2022/08/30/vhdP2D.png" alt=""></p>
<p>我研究了一下，可以把书签的<code>CSS</code>中<code>right</code>属性调到<code>25px</code>就好了。找一下<code>/themes/next/source/css/_common/outline/header/bookmark.styl</code>文件…不太确定这是什么语言，但是不怕！找到上面那个<code>right</code>（第5行那个）把那个变量名称改成<code>25px</code>即可了。这样就不会重叠了。</p>
<p><img data-src="https://s1.ax1x.com/2022/08/30/vhdEqA.png" alt=""></p>
<blockquote>
<p>另及：使用这个变量的本意应该是想让书签的右侧和<code>b2t</code>按钮右侧宽度相同，但我觉得<code>5px</code>应该不太看的出来吧。</p>
</blockquote>
<h4 id="3-3-6-加载进度条——pace"><a href="#3-3-6-加载进度条——pace" class="headerlink" title="3.3.6 加载进度条——pace"></a>3.3.6 加载进度条——<code>pace</code></h4><p>注意到网站上加载时的蓝色加载条了吗？</p>
<p><img data-src="https://s1.ax1x.com/2022/08/30/vhfg2j.png" alt=""></p>
<p>这个进度条是基于<code>pace</code>做出来的。首先我们需要克隆<code>pace</code>的仓库：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> themes/next</span><br><span class="line">git clone https://github.com/theme<span class="literal">-next</span>/theme<span class="literal">-next</span><span class="literal">-pace</span> source/lib/pace</span><br></pre></td></tr></table></figure>
<p>然后找到对应的配置：</p>
<p><img data-src="https://s1.ax1x.com/2022/08/30/vhf2xs.png" alt=""></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Progress bar in the top during page loading.</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/theme-next-pace</span></span><br><span class="line"><span class="comment"># For more information: https://github.com/HubSpot/pace</span></span><br><span class="line"><span class="attr">pace:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Themes list:</span></span><br><span class="line">  <span class="comment"># big-counter | bounce | barber-shop | center-atom | center-circle | center-radar | center-simple</span></span><br><span class="line">  <span class="comment"># corner-indicator | fill-left | flat-top | flash | loading-bar | mac-osx | material | minimal</span></span><br><span class="line">  <span class="attr">theme:</span> <span class="string">minimal</span></span><br></pre></td></tr></table></figure>
<p>我用的是<code>minimal</code>。重新渲染一下，看一下效果吧。</p>
<h4 id="3-3-7-网站图标——favicon"><a href="#3-3-7-网站图标——favicon" class="headerlink" title="3.3.7 网站图标——favicon"></a>3.3.7 网站图标——<code>favicon</code></h4><p>直到现在我们网站的图标还是那个黑色的<code>N</code>。能不能改一个好看一点的呢？先找一个自己喜欢的图标，然后转成<code>ico</code>格式的文件（可以用<code>convertio</code>试试）。复制两份，分别命名<code>16x16.ico</code>和<code>32x32.ico</code>。拖到<code>themes/next/source/images</code>文件夹里面。然后我们找到对应的配置：</p>
<p><img data-src="https://s1.ax1x.com/2022/09/01/v5LMNj.png" alt=""></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">favicon:</span></span><br><span class="line">  <span class="attr">small:</span> <span class="string">/images/16x16.ico</span></span><br><span class="line">  <span class="attr">medium:</span> <span class="string">/images/32x32.ico</span></span><br><span class="line">  <span class="comment">#apple_touch_icon: /images/apple-touch-icon-next.png</span></span><br><span class="line">  <span class="comment">#safari_pinned_tab: /images/logo.svg</span></span><br><span class="line">  <span class="comment">#android_manifest: /images/manifest.json</span></span><br><span class="line">  <span class="comment">#ms_browserconfig: /images/browserconfig.xml</span></span><br></pre></td></tr></table></figure>
<p>只保留<code>small</code>和<code>medium</code>，再把文件名填进去即可。</p>
<hr>
<h2 id="4-文章相关配置"><a href="#4-文章相关配置" class="headerlink" title="4. 文章相关配置"></a>4. 文章相关配置</h2><p>现在我们已经把基本的一些配置好了。我们可以开始添加一些文章、页面<del>（心心念念的标签、分类页）</del>，还可以有搜索、<code>404</code>页面等。你会学到如何给文章添加标签、分类等等。</p>
<h3 id="4-1-关于博客——post"><a href="#4-1-关于博客——post" class="headerlink" title="4.1 关于博客——post"></a>4.1 关于博客——<code>post</code></h3><p>如果你曾注意过<code>scaffolds</code>文件夹里的内容，你会看到<code>Hexo</code>一共有3种“类型”，分别是<code>post</code>博客、<code>page</code>页面和<code>draft</code>草稿。我不太习惯用草稿功能，就把它放过喽。我们先来把博客讲一下：</p>
<h4 id="4-1-1-新建一篇文章"><a href="#4-1-1-新建一篇文章" class="headerlink" title="4.1.1 新建一篇文章"></a>4.1.1 新建一篇文章</h4><p>还记得3.2.3节中我超纲建文章吗？建文章的命令是<code>hexo new</code>。如下：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">hexo new a<span class="literal">-new</span><span class="literal">-post</span></span><br></pre></td></tr></table></figure>
<p>然后我们就可以在<code>source/_post</code>里面找到一个<code>a-new-post.md</code>。打开看看：</p>
<p><img data-src="https://s1.ax1x.com/2022/08/30/vh5OMj.png" alt=""></p>
<p>文件几乎是空白的，只有一小段<code>YML</code>（学名<code>YAML Front Matter</code>）。这里面存放着关于这篇文章的元信息：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">a-new-post</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2022-08-30 17:02:10</span></span><br><span class="line"><span class="attr">tags:</span></span><br></pre></td></tr></table></figure>
<p>默认是有三个字段的，即<code>title</code>、<code>date</code>和<code>tags</code>。<code>title</code>会先默认设置为文件名，你可以改成这篇文章的标题（比如“4.1.1节新建文章示例”）。<code>date</code>建议不要改，是你新建文章的时间。<code>tags</code>是这篇文章的标签。先在文章内部写点东西试试渲染一下。我现在修改成这样，渲染一下看看：</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 4.1.1节新建文章示例</span><br><span class="line">date: 2022-08-30 17:02:10</span><br><span class="line"><span class="section">tags:</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line"></span><br><span class="line">Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut </span><br><span class="line">labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris </span><br><span class="line">nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit </span><br><span class="line">esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt </span><br><span class="line">in culpa qui officia deserunt mollit anim id est laborum.</span><br></pre></td></tr></table></figure>
<p><img data-src="https://s1.ax1x.com/2022/08/30/vh5xZq.png" alt=""></p>
<h4 id="4-1-2-标签与分类"><a href="#4-1-2-标签与分类" class="headerlink" title="4.1.2 标签与分类"></a>4.1.2 标签与分类</h4><p>现在我们尝试给文章添加一些标签和分类（照例，用<code>Test</code>）。只需在<code>Front Matter</code>中加一点即可：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="number">4.1</span><span class="number">.1</span><span class="string">节新建文章示例</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2022-08-30 17:02:10</span></span><br><span class="line"><span class="attr">tags:</span> </span><br><span class="line"><span class="bullet">-</span> <span class="string">Test1</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">Test2</span></span><br><span class="line"><span class="attr">categories:</span></span><br><span class="line"><span class="bullet">-</span> [<span class="string">Test1</span>, <span class="string">Test2</span>]</span><br><span class="line"><span class="bullet">-</span> <span class="string">Test3</span></span><br></pre></td></tr></table></figure>
<p>可以看到我们添加了一个<code>categories</code>字段。先讲标签：新建一行，然后用<code>-</code>打头，空格，然后输入分类名，可以重复多行。<code>categories</code>中是差不多的，可是这个<code>- []</code>是用来干嘛的呢？这代表分类下的子分类。待会新建分类<code>page</code>时你就会看出来它的效果。渲染一下看看：</p>
<p><img data-src="https://s1.ax1x.com/2022/08/30/vhH89f.png" alt=""></p>
<p>（为了一张图放完，这张图片是80%比例下的截图的）</p>
<h4 id="4-1-3-主页节选——excerpt"><a href="#4-1-3-主页节选——excerpt" class="headerlink" title="4.1.3 主页节选——excerpt"></a>4.1.3 主页节选——<code>excerpt</code></h4><p>我们新加的博客内容都是很短的，可以完整的放在主页上。可像我这种几k字的，主页完全放不下啊！这是我们就可以使用节选功能，同时会自动显示一个按钮，提示“继续阅读”。语法如下：</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">This is a piece of text. It&#x27;s going to be very long.</span><br><span class="line"></span><br><span class="line">&lt;!--more--&gt;</span><br><span class="line"></span><br><span class="line">Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut </span><br><span class="line">labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris </span><br><span class="line">nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit </span><br><span class="line">esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt </span><br><span class="line">in culpa qui officia deserunt mollit anim id est laborum.</span><br></pre></td></tr></table></figure>
<p>没错，只要在你想分开的地方加一个<code>&lt;!--more--&gt;</code>即可。我们拿<code>Hello World</code>那篇文章试一下：</p>
<p><img data-src="https://s1.ax1x.com/2022/08/30/vhH14P.png" alt=""></p>
<h4 id="4-1-4-文章置顶"><a href="#4-1-4-文章置顶" class="headerlink" title="4.1.4 文章置顶"></a>4.1.4 文章置顶</h4><p>在我的网站主页上有一篇置顶的序言，就像书的<code>preface</code>一样。<code>Hexo</code>文章在主页上的排列顺序（默认）是按发布时间后往前（即越新越往上）排布的，如何打破这个规则，强制在最上方呢？一开始我也没有查到对应的设置（都是手写进去代码），不过在翻看<code>hexo</code>的生成代码时（不太具体知道这是什么语言，似乎是<code>mozilla</code>开发的<code>nunjucks</code>），我注意到有一个<code>sticky</code>选项（而且似乎值是个数字），在这里：</p>
<p><img data-src="https://s1.ax1x.com/2022/08/31/v4LWTJ.png" alt=""></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;%- if post.sticky &gt; 0 %&#125;</span><br><span class="line">  &lt;span class=&quot;post-sticky-flag&quot; title=&quot;&#123;&#123; __(&#x27;post.sticky&#x27;) &#125;&#125;&quot;&gt;</span><br><span class="line">    &lt;i class=&quot;fa fa-thumbtack&quot;&gt;&lt;/i&gt;</span><br><span class="line">  &lt;/span&gt;</span><br><span class="line">&#123;%- endif %&#125;</span><br></pre></td></tr></table></figure>
<p>然后我就找到一篇<code>post</code>，在<code>Front Matter</code>里面加上这么一行：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">sticky:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>诶，神奇的是就好了！我在<code>_config.yml</code>中没有看到任何和<code>sticky</code>有关的配置，没想到自己摸索出来了。看一下最后的效果：</p>
<p><img data-src="https://s1.ax1x.com/2022/08/31/v4LRw4.png" alt=""></p>
<h4 id="4-1-5-分页功能"><a href="#4-1-5-分页功能" class="headerlink" title="4.1.5 分页功能"></a>4.1.5 分页功能</h4><p>目前来说，我们的主页上可能还没有几篇文章。可是，设想一下将来，当你有了几十篇博客（只是设想），难道还得全部一股脑的堆在主页上吗？我们可以尝试加一个分页功能。即：每满设定的文章数就会自动生成主页的下一页。先看一下效果吧，我是6篇一分：</p>
<p><img data-src="https://s1.ax1x.com/2022/08/31/v4OXuT.png" alt=""></p>
<p>找一下如下的配置（注意在<code>Hexo</code>配置文件内，切勿搞混了）：</p>
<p><img data-src="https://s1.ax1x.com/2022/08/31/v4OLvV.png" alt=""></p>
<p>看起来是默认打开的啊？那我就把数值减小一点，改成6就好了。</p>
<h3 id="4-2-关于页面——page"><a href="#4-2-关于页面——page" class="headerlink" title="4.2 关于页面——page"></a>4.2 关于页面——<code>page</code></h3><p>在3.1.1.1节中我们在侧边栏中添加了标签页、分类页，还有一个歌单的链接。这一章我们会把这些页面补齐，并给网站添加一个<code>404</code>页面。</p>
<h4 id="4-2-1-新建页面"><a href="#4-2-1-新建页面" class="headerlink" title="4.2.1 新建页面"></a>4.2.1 新建页面</h4><p>新建页面和新建一篇博客的命令是差不多的。如下，只需要在<code>new</code>后面添加一个<code>page</code>：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure>
<p><code>tags</code>就是所有标签页。可是，执行这个命令到底会发生什么呢？我们来看一下<code>source</code>文件夹。多了一个<code>tags</code>文件夹，里面有一个<code>index.md</code>。打开看看：</p>
<p><img data-src="https://s1.ax1x.com/2022/09/02/vIRp9g.png" alt=""></p>
<p>嗯，和<code>post</code>差不多，一个时间一个标题，只是没有标签和分类。然后，看一下渲染的效果，有没有这个页面了：</p>
<p><img data-src="https://s1.ax1x.com/2022/09/02/vIRCcj.png" alt=""></p>
<p>但这个样子肯定是有<code>bug</code>的。第一，它的标题怎么叫<code>tags</code>？第二，之前链接列表中既然有这个默认的<code>tags</code>，那它为什么不是自动化的，不可能连统计标签的功能都没有吧！别急，马上就把这个功能加进来，只需要一行<code>Front Matter</code>，再把标题改下：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">所有标签</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">tags</span></span><br></pre></td></tr></table></figure>
<p>试一下渲染效果：</p>
<p><img data-src="https://s1.ax1x.com/2022/09/02/vIR93Q.png" alt=""></p>
<p>似乎好了耶！然后类似的，我们加一下分类、关于和歌单页，把<code>tags</code>分别换为<code>categories</code>、<code>about</code>、<code>album</code>即可。别忘了改页面的标题，并给分类页加上<code>type: categories</code>！这是最后的效果：</p>
<p><img data-src="https://s1.ax1x.com/2022/09/03/voSauR.png" alt=""></p>
<p>至于<code>about</code>和<code>album</code>页的话，可以放自己想放的东西。</p>
<blockquote>
<p>另及：还记得我们在4.1.2节中给文章添加了一个<code>- []</code>嵌套分类吗？现在你应该可以理解这是什么意思了吧：它表示分类下的子分类，比如“编程”，“编程-<code>Python</code>”等等。同时支持更多层嵌套。</p>
</blockquote>
<h4 id="4-2-2-404页面"><a href="#4-2-2-404页面" class="headerlink" title="4.2.2 404页面"></a>4.2.2 <code>404</code>页面</h4><p><code>404</code>页面和之前的页面做起来很相似。还是用<code>hexo new page 404</code>这个命令来新建出页面，然后我们来添加一些配置：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2021-08-15 16:28:02</span></span><br><span class="line"><span class="attr">comments:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">sitemap:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">/404</span></span><br></pre></td></tr></table></figure>
<p><code>title</code>设为空，这样就不会显示标题。<code>comments: false</code>表示不在本页上加载<code>Gitalk</code>，详见第5章。<code>sitemap: false</code>表示不把本页加入站点地图，详见第6章。最重要的是这个<code>permalink</code>，它会声明：这个页面是通用<code>404</code>页面。往里面加上一些提示性的句子，比如：</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line"><span class="section"># 404 Not Found 您访问的页面走丢了！</span></span><br><span class="line"></span><br><span class="line">将于10秒后返回 [<span class="string">首页</span>](<span class="link">https://guleixibian2009.github.io/hexo-website-tutorial</span>) ......</span><br></pre></td></tr></table></figure>
<p>渲染出来就是这样：</p>
<p><img data-src="https://s1.ax1x.com/2022/09/03/vo9hh8.png" alt=""></p>
<h5 id="4-2-2-1-自动跳转功能"><a href="#4-2-2-1-自动跳转功能" class="headerlink" title="4.2.2.1 自动跳转功能"></a>4.2.2.1 自动跳转功能</h5><p>上面的代码块里提到了10秒后返回主页。这个是靠下面一段代码实现的：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">&quot;javascript&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"> </span></span><br><span class="line"><span class="javascript">    <span class="built_in">setTimeout</span>(<span class="string">&quot;javascript:location.href=&#x27;/&#x27;&quot;</span>, <span class="number">10000</span>); </span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>我曾经在<code>Jekyll</code>那篇文章里面提到过，还记得吗？直接把它粘贴到<code>index.md</code>末尾即可。重新渲染，可以自己去看一下效果。</p>
<h3 id="4-3-关于搜索——searchdb"><a href="#4-3-关于搜索——searchdb" class="headerlink" title="4.3 关于搜索——searchdb"></a>4.3 关于搜索——<code>searchdb</code></h3><p>当我们网站上的文章渐渐多起来后，我们就需要一个方便读者找到对应文章的方式，这就是一个搜索功能。我们先安装一下对应的<code>package</code>：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm i hexo<span class="literal">-generator</span><span class="literal">-searchdb</span> -<span class="literal">-save</span></span><br></pre></td></tr></table></figure>
<p>不同的是，我们不能直接去找主题<code>_config.yml</code>内的配置，而是得先在博客配置内添加这样的配置，添在底部即可：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Local Search</span></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure>
<p>随后我们再去找这一段配置：</p>
<p><img data-src="https://s1.ax1x.com/2022/09/03/voAu79.png" alt=""></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Local Search</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/hexo-generator-searchdb</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># If auto, trigger search by changing input.</span></span><br><span class="line">  <span class="comment"># If manual, trigger search by pressing enter key or search button.</span></span><br><span class="line">  <span class="attr">trigger:</span> <span class="string">auto</span></span><br><span class="line">  <span class="comment"># Show top n results per article, show all results by setting to -1</span></span><br><span class="line">  <span class="attr">top_n_per_article:</span> <span class="number">1</span></span><br><span class="line">  <span class="comment"># Unescape html strings to the readable one.</span></span><br><span class="line">  <span class="attr">unescape:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Preload the search data when the page loads.</span></span><br><span class="line">  <span class="attr">preload:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<p>先把<code>enable</code>调成<code>true</code>，就可以开启功能了。然后看到<code>top_n_per_article</code>的选项，意思是说每篇博客显示几个结果。可以调大一点，比如调成5。我们来看一下渲染的效果。</p>
<p><img data-src="https://s1.ax1x.com/2022/09/03/voAZXF.png" alt=""></p>
<p><img data-src="https://s1.ax1x.com/2022/09/03/voAmm4.png" alt=""></p>
<p>然后顺便讲一下那个提示语是怎么改的。找到<code>i18n</code>文件，如下：</p>
<p><img data-src="https://s1.ax1x.com/2022/09/03/voAn0J.png" alt=""></p>
<p>把<code>placeholder</code>改成你想要的提示语即可。</p>
<h3 id="4-4-如何对README和LICENSE禁用渲染"><a href="#4-4-如何对README和LICENSE禁用渲染" class="headerlink" title="4.4 如何对README和LICENSE禁用渲染"></a>4.4 如何对<code>README</code>和<code>LICENSE</code>禁用渲染</h3><p>也许你已经发现，我们在第1节中创建的<code>README</code>和<code>LICENSE</code>都已经被覆盖，找不到了，就连<code>commit</code>都消失的无影无踪。不过，经过我的尝试，我们还是有办法添加回它们的。我们先复制这两个文件进<code>source</code>文件夹，然后找到主题配置：</p>
<p><img data-src="https://s1.ax1x.com/2022/09/03/voA590.png" alt=""></p>
<p>看到那行<code>skip_render</code>了吗？我们用一个列表来代表禁用渲染的文件：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">skip_render:</span> [<span class="string">README.md</span>, <span class="string">LICENSE</span>]</span><br></pre></td></tr></table></figure>
<p><code>[]</code>就表示一个列表，每个文件名用逗号隔开即可。看一下渲染之后会发生什么：</p>
<p><img data-src="https://s1.ax1x.com/2022/09/03/voAhhq.png" alt=""></p>
<p>这样，我们的<code>README</code>就不会被渲染成<code>HTML</code>了。以上这些，就是我们所有的较为基础的配置与文章相关的内容了。接下来我们会涉及到一些更高级的功能，使用到第三方插件，可以自己选择。</p>
<hr>
<h2 id="5-第三方插件配置"><a href="#5-第三方插件配置" class="headerlink" title="5. 第三方插件配置"></a>5. 第三方插件配置</h2><p>写到这文章已经很长了，将近20k字了。不管怎么样，我们来继续我们的教程，<del>争取再写20k啊</del>。</p>
<h3 id="5-1-动态背景"><a href="#5-1-动态背景" class="headerlink" title="5.1 动态背景"></a>5.1 动态背景</h3><p>读了这么久的文章了，不会还没注意到我的动态背景吧。在背景上有50个点，随机游走，相互靠近时就会连成一条线。靠近鼠标时则会被“困住”，直到再次移动鼠标。这叫做<code>canvas_nest</code>。</p>
<blockquote>
<p>另及：<code>next</code>其实有官方的动态背景，但我个人不满意，所以搜到了这一款。它曾经被集成入<code>Next</code>，但现在已不默认被集成，所以我把它归在第三方插件中。</p>
</blockquote>
<p>我们先安装对应的插件，在<code>themes/next</code>文件夹下执行：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/theme<span class="literal">-next</span>/theme<span class="literal">-next</span><span class="literal">-canvas</span><span class="literal">-nest</span> source/lib/canvas<span class="literal">-nest</span></span><br></pre></td></tr></table></figure>
<p>随后我们需要新增一段<code>yml</code>，加在主题配置文件内，随便加在哪里。不过便于后期修改，我把它和其他动态背景放在一起。</p>
<p><img data-src="https://s1.ax1x.com/2022/09/03/voVwSP.png" alt=""></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Canvas Nest</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/theme-next-canvas-nest </span></span><br><span class="line"><span class="attr">canvas_nest:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> </span><br><span class="line">  <span class="attr">onmobile:</span> <span class="literal">true</span> </span><br><span class="line">  <span class="attr">color:</span> <span class="string">&#x27;0,0,0&#x27;</span> </span><br><span class="line">  <span class="attr">opacity:</span> <span class="number">0.5</span> </span><br><span class="line">  <span class="attr">zIndex:</span> <span class="number">-1</span> </span><br><span class="line">  <span class="attr">count:</span> <span class="number">50</span> </span><br></pre></td></tr></table></figure>
<p>可以修改的有几个参数：<code>color</code>指线的颜色，配合<code>opacity</code>透明度使用；<code>zIndex</code>指图层，<code>-1</code>代表最下层；<code>count</code>代表最多同时出现多少条线。修改之后渲染即可。我特地给你们看一下效果：</p>
<p><img data-src="https://s1.ax1x.com/2022/09/03/voVaWt.png" alt=""></p>
<h3 id="5-2-侧边栏插件"><a href="#5-2-侧边栏插件" class="headerlink" title="5.2 侧边栏插件"></a>5.2 侧边栏插件</h3><p>总觉得侧边栏少了点东西，没有个性？我们可以尝试添加一些不同的东西……这是最后的效果：</p>
<p><img data-src="https://s1.ax1x.com/2022/09/03/vo8YT0.png" alt=""></p>
<h4 id="5-2-1-外链播放器"><a href="#5-2-1-外链播放器" class="headerlink" title="5.2.1 外链播放器"></a>5.2.1 外链播放器</h4><p>音乐播放器的话是用的一个网易云的外链服务，好处在于方便（根本不需要登录什么的），快速（加载快播放也流畅）。我们先随便找一首歌（网页版的）：</p>
<p><img data-src="https://s1.ax1x.com/2022/09/03/vo8Jwq.png" alt=""></p>
<h5 id="5-2-1-1-获取插件"><a href="#5-2-1-1-获取插件" class="headerlink" title="5.2.1.1 获取插件"></a>5.2.1.1 获取插件</h5><p>看到上面的红色框框了吗？点进去，就是一个外链的生成界面：</p>
<p><img data-src="https://s1.ax1x.com/2022/09/03/vo8eTP.png" alt=""></p>
<p>出于兼容性的考虑我们只能用<code>&lt;iframe&gt;</code>版的，<code>flash</code>已经过时了。首先我们要调整一个宽度，自己觉得合适就可以。不过不要过宽，否则待会会放不下。我自己选的是<code>280x66</code>。然后尽量不选自动播放吧，用户体验可能不会特别好，万一读者不喜欢这首歌怎么办？然后复制下面的代码就可以了，类似这样：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">frameborder</span>=<span class="string">&quot;no&quot;</span> <span class="attr">border</span>=<span class="string">&quot;0&quot;</span> <span class="attr">marginwidth</span>=<span class="string">&quot;0&quot;</span> <span class="attr">marginheight</span>=<span class="string">&quot;0&quot;</span> <span class="attr">width</span>=<span class="string">280</span> <span class="attr">height</span>=<span class="string">86</span> <span class="attr">src</span>=<span class="string">&quot;//music.163.com/outchain/player?type=2&amp;id=2080607&amp;auto=0&amp;height=66&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>注意一下另外两个红框，是两个相同的数字，即歌曲<code>id</code>。以后需要更改歌曲只要打开网页版后复制网址中的<code>id</code>并替换就可以了。</p>
<h5 id="5-2-1-2-调整侧边栏宽度"><a href="#5-2-1-2-调整侧边栏宽度" class="headerlink" title="5.2.1.2 调整侧边栏宽度"></a>5.2.1.2 调整侧边栏宽度</h5><p><code>Next</code>主题侧边栏的宽度默认是240，这个会有点窄，要调大一点。不是说一定要比插件的宽度长，短一点也可以，它会自动的缩短。然后我这边就选了260像素。看一下配置：</p>
<p><img data-src="https://s1.ax1x.com/2022/09/03/vo8KfS.png" alt=""></p>
<h5 id="5-2-1-3-插入swig模板"><a href="#5-2-1-3-插入swig模板" class="headerlink" title="5.2.1.3 插入swig模板"></a>5.2.1.3 插入<code>swig</code>模板</h5><p>到现在我们已经有了一个播放器，调了宽度，可是怎么把它插入到侧边栏里来呢？我们要到模板文件里去插。找到这个文件（<code>themes/next/layout/_partials/sidebar/site-overview.swig</code>），在105行左右（<code>CC</code>之后，<code>Blogroll</code>之前）插入代码即可：</p>
<p><img data-src="https://s1.ax1x.com/2022/09/03/vo8uY8.png" alt=""></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line">&#123;%- if theme.creative_commons.license and theme.creative_commons.sidebar %&#125;</span><br><span class="line">  &lt;div class=&quot;cc-license motion-element&quot; itemprop=&quot;license&quot;&gt;</span><br><span class="line">  &#123;%- set ccImage = &#x27;&lt;img src=&quot;&#x27; + url_for(theme.images + &#x27;/cc-&#x27; + theme.creative_commons.license + &#x27;.svg&#x27;) + &#x27;&quot; alt=&quot;Creative Commons&quot;&gt;&#x27; %&#125;</span><br><span class="line">    &#123;&#123; next_url(ccURL, ccImage, &#123;class: &#x27;cc-opacity&#x27;&#125;) &#125;&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&#123;%- endif %&#125;</span><br><span class="line"></span><br><span class="line">&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=280 height=86 src=&quot;//music.163.com/outchain/player?type=2&amp;id=2080607&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;</span><br><span class="line"></span><br><span class="line">&#123;# Blogroll #&#125;</span><br><span class="line">&#123;%- if theme.links %&#125;</span><br><span class="line">  &lt;div class=&quot;links-of-blogroll motion-element&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;links-of-blogroll-title&quot;&gt;</span><br><span class="line">      &#123;%- if theme.links_settings.icon %&#125;&lt;i class=&quot;&#123;&#123; theme.links_settings.icon &#125;&#125; fa-fw&quot;&gt;&lt;/i&gt;&#123;%- endif %&#125;</span><br><span class="line">      &#123;&#123; theme.links_settings.title &#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;ul class=&quot;links-of-blogroll-list&quot;&gt;</span><br><span class="line">      &#123;%- for blogrollText, blogrollURL in theme.links %&#125;</span><br><span class="line">        &lt;li class=&quot;links-of-blogroll-item&quot;&gt;</span><br><span class="line">          &#123;&#123; next_url(blogrollURL, blogrollText, &#123;title: blogrollURL&#125;) &#125;&#125;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">      &#123;%- endfor %&#125;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&#123;%- endif %&#125;</span><br></pre></td></tr></table></figure>
<p>最后我们来看一下渲染出来的效果：</p>
<p><img data-src="https://s1.ax1x.com/2022/09/03/vo8nFf.png" alt=""></p>
<h4 id="5-2-2-天气插件"><a href="#5-2-2-天气插件" class="headerlink" title="5.2.2 天气插件"></a>5.2.2 天气插件</h4><p>接下来是一个天气的插件。我们这个插件来自<code>tianqi.com</code>，它这个可以实时获取城市，不过原来是直接使用的，现在要关注什么公众号了，不过我可以直接把代码给大家。这是我当时获取到的代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">width</span>=<span class="string">&quot;250&quot;</span> <span class="attr">height</span>=<span class="string">&quot;90&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span> <span class="attr">scrolling</span>=<span class="string">&quot;no&quot;</span> <span class="attr">hspace</span>=<span class="string">&quot;0&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://i.tianqi.com/?c=code&amp;a=getcode&amp;id=7&amp;icon=1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>目前还是可以正常运行的，不要求什么密码。我们还是找到<code>site-overview.swig</code>，把上面的代码粘贴到外链播放器下面去。看一下最终的效果：</p>
<p><img data-src="https://s1.ax1x.com/2022/09/03/voJXLj.png" alt=""></p>
<h3 id="5-3-不蒜子访客统计"><a href="#5-3-不蒜子访客统计" class="headerlink" title="5.3 不蒜子访客统计"></a>5.3 不蒜子访客统计</h3><p>需要一项服务来显示自己的客流量？<code>Next</code>中集成了<code>busuanzi</code>统计，虽然是第三方服务但也可以方便地添加到页面上。我们可以先看一下它的官网：</p>
<p><img data-src="https://s1.ax1x.com/2022/09/04/voOrJH.png" alt=""></p>
<h4 id="5-3-1-启用功能"><a href="#5-3-1-启用功能" class="headerlink" title="5.3.1 启用功能"></a>5.3.1 启用功能</h4><p>当然我们不用那么复杂，又一次在<code>swig</code>添加那么多代码，我们只要找到对应的配置勾选一下：</p>
<p><img data-src="https://s1.ax1x.com/2022/09/04/voOgyt.png" alt=""></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Show Views / Visitors of the website / page with busuanzi.</span></span><br><span class="line"><span class="comment"># Get more information on http://ibruce.info/2015/04/04/busuanzi</span></span><br><span class="line"><span class="attr">busuanzi_count:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">total_visitors:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_visitors_icon:</span> <span class="string">fa</span> <span class="string">fa-user</span></span><br><span class="line">  <span class="attr">total_views:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_views_icon:</span> <span class="string">fa</span> <span class="string">fa-eye</span></span><br><span class="line">  <span class="attr">post_views:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">post_views_icon:</span> <span class="string">fa</span> <span class="string">fa-eye</span></span><br></pre></td></tr></table></figure>
<p>然后直接把所有的<code>false</code>改成<code>true</code>就可以拥有实时文章阅读量计数等功能。看一下最后的效果：</p>
<p><img data-src="https://s1.ax1x.com/2022/09/04/voO6SA.png" alt=""></p>
<p>可是不对啊，我既然选了<code>post_views</code>，怎么不显示计数呢？于是我就去翻代码…</p>
<h4 id="5-3-2-翻swig，瞎折腾"><a href="#5-3-2-翻swig，瞎折腾" class="headerlink" title="5.3.2 翻swig，瞎折腾"></a>5.3.2 翻<code>swig</code>，瞎折腾</h4><p><img data-src="https://s1.ax1x.com/2022/09/04/voOcQI.png" alt=""></p>
<p>在<code>themes/next/layout/_macro/post.swig</code>文件的120行找到这样的代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;%- if not is_index and theme.busuanzi_count.enable and theme.busuanzi_count.post_views %&#125;</span><br><span class="line">  &lt;span class=&quot;post-meta-item&quot; title=&quot;&#123;&#123; __(&#x27;post.views&#x27;) &#125;&#125;&quot; id=&quot;busuanzi_container_page_pv&quot; </span><br><span class="line">style=&quot;display: none;&quot;&gt;</span><br><span class="line">    &lt;span class=&quot;post-meta-item-icon&quot;&gt;</span><br><span class="line">      &lt;i class=&quot;&#123;&#123; theme.busuanzi_count.post_views_icon &#125;&#125;&quot;&gt;&lt;/i&gt;</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">    &lt;span class=&quot;post-meta-item-text&quot;&gt;&#123;&#123; __(&#x27;post.views&#x27;) + __(&#x27;symbol.colon&#x27;) &#125;&#125;&lt;/span&gt;</span><br><span class="line">    &lt;span id=&quot;busuanzi_value_page_pv&quot;&gt;&lt;/span&gt;</span><br><span class="line">  &lt;/span&gt;</span><br><span class="line">&#123;%- endif %&#125;</span><br></pre></td></tr></table></figure>
<p>凭直觉来看，<code>if not is_index</code>很成问题啊！核理推测一下，是不是我们进入一篇文章就能看见<code>post_views</code>计数了？</p>
<p><img data-src="https://s1.ax1x.com/2022/09/04/voOsWd.png" alt=""></p>
<p>果然。那在核理推测一下，是不是把<code>not is_index and</code>去掉，就可以在主页上显示了呢？我自己试了一下，发现这样会有<code>bug</code>，哪怕不看文章，也会出现计数的情况，个人没有想到特别好的解决方案，于是还是没有改。</p>
<h3 id="5-4-相关文章插件"><a href="#5-4-相关文章插件" class="headerlink" title="5.4 相关文章插件"></a>5.4 相关文章插件</h3><p>然后的话再讲一种引流的方式，这个相关文章插件。这算是一种站内引流吧。这个是最终的效果：</p>
<p><img data-src="https://s1.ax1x.com/2022/09/04/vTMkRJ.png" alt=""></p>
<h4 id="5-4-1-安装与配置"><a href="#5-4-1-安装与配置" class="headerlink" title="5.4.1 安装与配置"></a>5.4.1 安装与配置</h4><p>照常我们先找到对应的配置。然后看一下需要的<code>dependency</code>：</p>
<p><img data-src="https://s1.ax1x.com/2022/09/04/vTMZs1.png" alt=""></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Related popular posts</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/tea3/hexo-related-popular-posts</span></span><br><span class="line"><span class="attr">related_posts:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">title:</span> <span class="comment"># Custom header, leave empty to use the default one</span></span><br><span class="line">  <span class="attr">display_in_home:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">params:</span></span><br><span class="line">    <span class="attr">maxCount:</span> <span class="number">5</span></span><br><span class="line">    <span class="comment">#PPMixingRate: 0.0</span></span><br><span class="line">    <span class="comment">#isDate: false</span></span><br><span class="line">    <span class="comment">#isImage: false</span></span><br><span class="line">    <span class="comment">#isExcerpt: false</span></span><br></pre></td></tr></table></figure>
<p>看起来我们需要安装<code>hexo-related-popular-posts</code>这个插件。安装过程中<code>npm</code>可能会提示你有部分<code>package</code>已被<code>deprecated</code>，不过不用管。安装后我们来改一下配置：</p>
<p><code>enable</code>调成<code>true</code>之后就可以打开功能；<code>display_in_home</code>指要不要在主页上显示，我没开启；<code>title</code>、<code>maxCount</code>什么的，我放张图就懂了（另及：<code>isExcerpt</code>要求文章中一定出现<code>&lt;!--more--&gt;</code>手动分页，默认不会显示全文）：</p>
<p><img data-src="https://s1.ax1x.com/2022/09/04/vTMAz9.png" alt=""></p>
<p>所以最后的配置类似这样：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Related popular posts</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/tea3/hexo-related-popular-posts</span></span><br><span class="line"><span class="attr">related_posts:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">相关文章</span> <span class="string">为你推荐</span></span><br><span class="line">  <span class="attr">display_in_home:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">params:</span></span><br><span class="line">    <span class="attr">maxCount:</span> <span class="number">3</span></span><br><span class="line">    <span class="comment">#PPMixingRate: 0.0</span></span><br><span class="line">    <span class="attr">isDate:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#isImage: false</span></span><br><span class="line">    <span class="attr">isExcerpt:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>不过我们现在由于多方面原因（标签、分类等）并不会生成。我们随便再创一篇文章，来点相同的标签啥的。我们重新渲染…出错了！<code>hexo g</code>会出现两个<code>ERROR</code>，但没有更多信息，而<code>hexo s</code>运行后，有的文章打不开，还出现如下错误：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Unhandled rejection Template render error: (D:\08 网站\hexo_website_tutorial\themes\next\layout\post.swig)</span><br><span class="line">  Template render error: (D:\08 网站\hexo_website_tutorial\themes\next\layout\post.swig)</span><br><span class="line">  Template render error: (D:\08 网站\hexo_website_tutorial\themes\next\layout\post.swig) [Line 19, Column 14]</span><br><span class="line">  Template render error: (D:\08 网站\hexo_website_tutorial\themes\next\layout\post.swig)</span><br><span class="line">  Template render error: (D:\08 网站\hexo_website_tutorial\themes\next\layout\_partials\head\head-unique.swig) [Line 10, Column 23]</span><br><span class="line">  Template render error: (D:\08 网站\hexo_website_tutorial\themes\next\layout\post.swig) [Line 3, Column 3]</span><br><span class="line">  Template render error: (D:\08 网站\hexo_website_tutorial\themes\next\layout\post.swig)</span><br><span class="line">  Template render error: (D:\08 网站\hexo_website_tutorial\themes\next\layout\_partials\header\index.swig) [Line 6, Column 15]</span><br><span class="line">  Template render error: (D:\08 网站\hexo_website_tutorial\themes\next\layout\post.swig)</span><br><span class="line">  Template render error: (D:\08 网站\hexo_website_tutorial\themes\next\layout\_partials\header\sub-menu.swig) [Line 2, Column 29]</span><br><span class="line">  Template render error: (D:\08 网站\hexo_website_tutorial\themes\next\layout\post.swig)</span><br><span class="line">  Template render error: (D:\08 网站\hexo_website_tutorial\themes\next\layout\_partials\header\sub-menu.swig)</span><br><span class="line">  Template render error: (D:\08 网站\hexo_website_tutorial\themes\next\layout\post.swig) [Line 5, Column 3]</span><br><span class="line">  Template render error: (D:\08 网站\hexo_website_tutorial\themes\next\layout\post.swig) [Line 9, Column 12]</span><br><span class="line">  Template render error: (D:\08 网站\hexo_website_tutorial\themes\next\layout\_macro\post.swig) [Line 214, Column 16]</span><br><span class="line">  Template render error: (D:\08 网站\hexo_website_tutorial\themes\next\layout\_partials\post\post-related.swig)</span><br><span class="line">  TypeError: config._d.getTime is not a function</span><br><span class="line">    at Object._prettifyError (D:\08 网站\hexo_website_tutorial\node_modules\nunjucks\src\lib.js:36:11)</span><br><span class="line">    at D:\08 网站\hexo_website_tutorial\node_modules\nunjucks\src\environment.js:563:19</span><br><span class="line">    at Template.root [as rootRenderFunc] (eval at _compile (D:\08 网站\hexo_website_tutorial\node_modules\nunjucks\src\environment.js:633:18), &lt;anonymous&gt;:45:3)</span><br><span class="line">    at Template.render (D:\08 网站\hexo_website_tutorial\node_modules\nunjucks\src\environment.js:552:10)</span><br><span class="line">    at D:\08 网站\hexo_website_tutorial\themes\next\scripts\renderer.js:32:29</span><br><span class="line">    at _View._compiled (D:\08 网站\hexo_website_tutorial\node_modules\hexo\lib\theme\view.js:136:50)</span><br><span class="line">    at _View.render (D:\08 网站\hexo_website_tutorial\node_modules\hexo\lib\theme\view.js:39:17)</span><br><span class="line">    at D:\08 网站\hexo_website_tutorial\node_modules\hexo\lib\hexo\index.js:64:21</span><br><span class="line">    at tryCatcher (D:\08 网站\hexo_website_tutorial\node_modules\bluebird\js\release\util.js:16:23)</span><br><span class="line">    at D:\08 网站\hexo_website_tutorial\node_modules\bluebird\js\release\method.js:15:34</span><br><span class="line">    at RouteStream._read (D:\08 网站\hexo_website_tutorial\node_modules\hexo\lib\hexo\router.js:47:5)</span><br><span class="line">    at Readable.read (node:internal/streams/readable:496:12)</span><br><span class="line">    at resume_ (node:internal/streams/readable:999:12)</span><br><span class="line">    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)</span><br></pre></td></tr></table></figure>
<p>似乎是什么获取时间时有<code>bug</code>。有办法修复吗？</p>
<h4 id="5-4-2-修复相关bug"><a href="#5-4-2-修复相关bug" class="headerlink" title="5.4.2 修复相关bug"></a>5.4.2 修复相关<code>bug</code></h4><p>经过多次尝试与搜索，我终于找到对应的解决方案。原文章参见“致谢”一节中的第5条。我们援引一下：</p>
<blockquote>
<p>经过排查，本次发生错误是由 <code>hexo-related-popular-posts</code> 引发，在该库源码中使用 <code>moment</code> 初始化 <code>list.date</code> 导致了错误。 <code>list.date</code> 通过打印值可以看到是一个 <code>moment</code> 对象，但这个 <code>moment</code> 对象并不规范或者说可能在某处修改了这个 <code>moment</code> 对象的值。</p>
<p><code>moment</code> 内部初始化有一段逻辑是:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>._d = <span class="keyword">new</span> <span class="built_in">Date</span>(config._d != <span class="literal">null</span> ? config._d.getTime() : <span class="literal">NaN</span>);</span><br></pre></td></tr></table></figure>
<p>这个 <code>config</code> 就是 <code>moment(list.date)</code> 传入的 <code>list.date</code> 的值。<code>config._d</code> 是一个时间类型的字符串，并不是 <code>Date</code> 类型，因此没有 <code>getTime</code> 的方法。</p>
<p>临时解决方法有两种，一是将 <code>isDate</code> 设为 <code>false</code>，也就是推荐列表中不展示时间。</p>
<p>二是修改源码，做一层错误处理。从 <code>node_modules</code> 中打开文件(<code>/node_modules/hexo-related-popular-posts/lib/list-json.js</code>), 在编辑器中查找以下代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (inOptions.isDate &amp;&amp; list.date != <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">    ret.date =  moment(list.date).format(config.date_format || <span class="string">&#x27;YYYY-MM-DD&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>修改为：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (inOptions.isDate &amp;&amp; list.date != <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ret.date =  moment(list.date).format(config.date_format || <span class="string">&#x27;YYYY-MM-DD&#x27;</span>)</span><br><span class="line">    &#125; <span class="keyword">catch</span>(ex) &#123;</span><br><span class="line">        ret.date =  moment(list.date._d).format(config.date_format || <span class="string">&#x27;YYYY-MM-DD&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上述只是临时的解决方案，由于不好确定是哪一方的原因，也不想继续耗费太多精力在上面。</p>
</blockquote>
<p>我个人也不是特别了解原理，不过这的确解决了我们的问题。大概在这里：</p>
<p><img data-src="https://s1.ax1x.com/2022/09/04/vTMVMR.png" alt=""></p>
<p>然后便解决了。感谢<code>anran758</code>大佬。</p>
<h3 id="5-5-评论系统"><a href="#5-5-评论系统" class="headerlink" title="5.5 评论系统"></a>5.5 评论系统</h3><p>在写到这里的时候我有点犹豫，因为原来用的<code>GiTalk</code>由于某些网络原因（见下）挂掉了，又没有决定换什么，所以迟了好久。最后我选中的是来必力<code>livere</code>。</p>
<blockquote>
<p><strong>《论我捣鼓<code>GiTalk</code>的简要过程》</strong></p>
<p>写到这里我本想去截图，结果一看启动不起来，没办法新建<code>issue</code>也没法登录<code>GitHub</code>账号。在排查了设置、网络的问题后，我发现有个致命的问题：<code>cors-anywhere.azm.workers.dev</code>被墙掉，然后<code>GiTalk</code>无法进行<code>GitHub oauth</code>，就不能用了。</p>
<p>我于是尝试自己搭<code>worker</code>，结果发现是所有<code>Cloudflare worker</code>的链接都被墙掉了，然后我就彻底没招了，就只好作罢。不过……真的吗？</p>
<p>后来我找到了<code>GiTalk</code>的仓库，里面有类似的<code>Issue</code>，甚至翻出了<code>CORS Anywhere</code>的仓库，找到了一个基于<code>Heroku</code>的备用<code>demo</code>链接。在一个<code>Issue</code>的<a href="https://github.com/Rob--W/cors-anywhere/issues/301#issuecomment-870990778">某条评论</a>、<a href="https://github.com/Rob--W/cors-anywhere/issues/301#issuecomment-1012060775">某条评论</a>中找到了一些备用链接。于是，就可以恢复正常了！</p>
<p><strong>另及：今年（2022）11月28号<code>Heroku</code>会关闭所有的免费服务，所以你看到类似<code>herokuapp.com</code>的链接都不用试了…</strong></p>
</blockquote>
<p>最后的话成品是这样：</p>
<p><img data-src="https://s1.ax1x.com/2022/09/07/vbFLZD.png" alt=""></p>
<h4 id="5-5-1-来必力livere"><a href="#5-5-1-来必力livere" class="headerlink" title="5.5.1 来必力livere"></a>5.5.1 来必力<code>livere</code></h4><p>这个服务来自韩国，是韩语的页面，但是一旦应用到网站上就是中文的。到<a href="https://livere.com">https://livere.com</a>注册一个账号（你可能需要翻译），登录然后点击页首“安装”按钮，选择<code>city</code>版，填入链接什么的：</p>
<p><img data-src="https://s1.ax1x.com/2022/09/07/vbFxJA.png" alt=""></p>
<p><img data-src="https://s1.ax1x.com/2022/09/07/vbFbqO.png" alt=""></p>
<p>经过这一系列操作以后，我们会得到一串代码，在这里：<a href="http://livere.com/insight/myCode">http://livere.com/insight/myCode</a>：</p>
<p><img data-src="https://s1.ax1x.com/2022/09/07/vbFvid.png" alt=""></p>
<p>复制<code>data-uid</code>里的内容，然后找到如下配置：</p>
<p><img data-src="https://s1.ax1x.com/2022/09/07/vbFXIH.png" alt=""></p>
<p>直接把你的<code>data-uid</code>复制进去就好了。看一下渲染的效果：</p>
<p><img data-src="https://s1.ax1x.com/2022/09/07/vbFOde.png" alt=""></p>
<h4 id="5-5-2-GiTalk"><a href="#5-5-2-GiTalk" class="headerlink" title="5.5.2 GiTalk"></a>5.5.2 <code>GiTalk</code></h4><p><code>GiTalk</code>的话是一个很“程序员”的评论系统。基于<code>GitHub</code>，支持<code>Markdown</code>，简单而优雅。不过，除了一些基本的配置以外，我们还需要更换<code>CORS Anywhere</code>的代理。我们先找到它的配置，看一下需要些什么：</p>
<p><img data-src="https://s1.ax1x.com/2022/09/10/vLjhLQ.png" alt=""></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Gitalk</span></span><br><span class="line"><span class="comment"># For more information: https://gitalk.github.io, https://github.com/gitalk/gitalk</span></span><br><span class="line"><span class="attr">gitalk:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">github_id:</span> <span class="comment"># GitHub repo owner</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="comment"># Repository name to store issues</span></span><br><span class="line">  <span class="attr">client_id:</span> <span class="comment"># GitHub Application Client ID</span></span><br><span class="line">  <span class="attr">client_secret:</span> <span class="comment"># GitHub Application Client Secret</span></span><br><span class="line">  <span class="attr">admin_user:</span> <span class="comment"># GitHub repo owner and collaborators, only these guys can initialize gitHub issues</span></span><br><span class="line">  <span class="attr">distraction_free_mode:</span> <span class="literal">true</span> <span class="comment"># Facebook-like distraction free mode</span></span><br><span class="line">  <span class="comment"># Gitalk&#x27;s display language depends on user&#x27;s browser or system environment</span></span><br><span class="line">  <span class="comment"># If you want everyone visiting your site to see a uniform language, you can set a force language value</span></span><br><span class="line">  <span class="comment"># Available values: en | es-ES | fr | ru | zh-CN | zh-TW</span></span><br><span class="line">  <span class="attr">language:</span> </span><br></pre></td></tr></table></figure>
<p>另外，这是人家的官网：</p>
<p><img data-src="https://s1.ax1x.com/2022/09/10/vLjWQS.png" alt=""></p>
<h5 id="5-5-2-1-获取GitHub-Application"><a href="#5-5-2-1-获取GitHub-Application" class="headerlink" title="5.5.2.1 获取GitHub Application"></a>5.5.2.1 获取<code>GitHub Application</code></h5><p>大部分配置都好填，可是这个<code>client_id</code>和<code>client_secret</code>怎么办？我们需要自己新建一个<code>GH App</code>。打开<a href="https://github.com/settings/developers">https://github.com/settings/developers</a>，并新建一个<code>Oauth APP</code>（右上角的按钮）：</p>
<p><img data-src="https://s1.ax1x.com/2022/09/10/vLj2z8.png" alt=""></p>
<p>之后需要输入应用名称，应用官网（<code>Homepage URL</code>和<code>Authorization callback URL</code>），这两个一定一定要一样的，并且得加上<code>https://</code>。</p>
<p><img data-src="https://s1.ax1x.com/2022/09/10/vLjfsg.png" alt=""></p>
<p>注册以后复制<code>Client ID</code>，新建<code>Client secret</code>，按红框里的按钮。</p>
<p><img data-src="https://s1.ax1x.com/2022/09/10/vLjgRf.png" alt=""></p>
<p>新建后务必立刻复制，否则就只能重新建了。</p>
<p><img data-src="https://s1.ax1x.com/2022/09/10/vLj5Zj.png" alt=""></p>
<p>然后我们写到配置的<code>client_id</code>和<code>client_secret</code>里即可。至于其他的配置的话：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Gitalk</span></span><br><span class="line"><span class="comment"># For more information: https://gitalk.github.io, https://github.com/gitalk/gitalk</span></span><br><span class="line"><span class="attr">gitalk:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">github_id:</span> <span class="comment"># GitHub repo owner</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="comment"># Repository name to store issues</span></span><br><span class="line">  <span class="attr">client_id:</span> <span class="comment"># GitHub Application Client ID</span></span><br><span class="line">  <span class="attr">client_secret:</span> <span class="comment"># GitHub Application Client Secret</span></span><br><span class="line">  <span class="attr">admin_user:</span> <span class="comment"># GitHub repo owner and collaborators, only these guys can initialize gitHub issues</span></span><br><span class="line">  <span class="attr">distraction_free_mode:</span> <span class="literal">true</span> <span class="comment"># Facebook-like distraction free mode</span></span><br><span class="line">  <span class="comment"># Gitalk&#x27;s display language depends on user&#x27;s browser or system environment</span></span><br><span class="line">  <span class="comment"># If you want everyone visiting your site to see a uniform language, you can set a force language value</span></span><br><span class="line">  <span class="comment"># Available values: en | es-ES | fr | ru | zh-CN | zh-TW</span></span><br><span class="line">  <span class="attr">language:</span></span><br></pre></td></tr></table></figure>
<p><code>enable</code>打开，<code>github_id</code>写上你的<code>GitHub</code>用户名，<code>repo</code>是你网站的仓库名（比如<code>guleixibian2009.github.io</code>），<code>admin_user</code>还是填自己的用户名。<code>distraction_free_mode</code>和<code>language</code>自己按喜好调即可。</p>
<h5 id="5-5-2-2-配置proxy"><a href="#5-5-2-2-配置proxy" class="headerlink" title="5.5.2.2 配置proxy"></a>5.5.2.2 配置<code>proxy</code></h5><p>设置是好了，可是在用之前我们还需要改<code>CORS Anywhere</code>的镜像。我们如何把<code>proxy</code>改掉呢？参阅<code>GiTalk</code>的<code>README</code>（见“致谢”，6），有一个<code>proxy</code>的选项。</p>
<p>我们找一下这个文件（<code>themes/next/layout/_third-party/comments/gitalk.swig</code>）：</p>
<p><img data-src="https://s1.ax1x.com/2022/09/10/vOEatO.png" alt=""></p>
<p>有这样一段代码。然后，把下面这段代码复制到里面去，如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">proxy       : <span class="string">&#x27;https://proxy.cors.sh/https://github.com/login/oauth/access_token&#x27;</span></span><br></pre></td></tr></table></figure>
<p>最后的效果就是：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">NexT.utils.loadComments(<span class="built_in">document</span>.querySelector(<span class="string">&#x27;#gitalk-container&#x27;</span>), <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  NexT.utils.getScript(<span class="string">&#x27;&#123;&#123; gitalk_js_uri &#125;&#125;&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> gitalk = <span class="keyword">new</span> Gitalk(&#123;</span><br><span class="line">      <span class="attr">clientID</span>    : <span class="string">&#x27;&#123;&#123; theme.gitalk.client_id &#125;&#125;&#x27;</span>,</span><br><span class="line">      <span class="attr">clientSecret</span>: <span class="string">&#x27;&#123;&#123; theme.gitalk.client_secret &#125;&#125;&#x27;</span>,</span><br><span class="line">      <span class="attr">repo</span>        : <span class="string">&#x27;&#123;&#123; theme.gitalk.repo &#125;&#125;&#x27;</span>,</span><br><span class="line">      <span class="attr">owner</span>       : <span class="string">&#x27;&#123;&#123; theme.gitalk.github_id &#125;&#125;&#x27;</span>,</span><br><span class="line">      <span class="attr">admin</span>       : [<span class="string">&#x27;&#123;&#123; theme.gitalk.admin_user &#125;&#125;&#x27;</span>],</span><br><span class="line">      <span class="attr">id</span>          : <span class="string">&#x27;&#123;&#123; gitalk_md5(page.path) &#125;&#125;&#x27;</span>,</span><br><span class="line">      &#123;%- <span class="keyword">if</span> theme.gitalk.language == <span class="string">&#x27;&#x27;</span> %&#125;</span><br><span class="line">        <span class="attr">language</span>: <span class="built_in">window</span>.navigator.language || <span class="built_in">window</span>.navigator.userLanguage,</span><br><span class="line">      &#123;% <span class="keyword">else</span> %&#125;</span><br><span class="line">        <span class="attr">language</span>: <span class="string">&#x27;&#123;&#123; theme.gitalk.language &#125;&#125;&#x27;</span>,</span><br><span class="line">      &#123;%- endif %&#125;</span><br><span class="line">      <span class="attr">distractionFreeMode</span>: &#123;&#123; theme.gitalk.distraction_free_mode &#125;&#125;,</span><br><span class="line">      <span class="attr">proxy</span>       : <span class="string">&#x27;https://proxy.cors.sh/https://github.com/login/oauth/access_token&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line">    gitalk.render(<span class="string">&#x27;gitalk-container&#x27;</span>);</span><br><span class="line">  &#125;, <span class="built_in">window</span>.Gitalk);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>如果没看出来区别的话就直接复制替换即可。然后我们重新渲染，试一下：</p>
<p><img data-src="https://s1.ax1x.com/2022/09/10/vOEY0x.png" alt=""></p>
<p>不过如果需要尝试登录的话一定要部署之后才能测试…所以上线试一下登录：</p>
<p><img data-src="https://s1.ax1x.com/2022/09/10/vOEt76.png" alt=""></p>
<p>然后<code>GiTalk</code>会自动创建一个<code>Issue</code>。我们应该可以在仓库里找到这样一个<code>Issue</code>，标题就是文章名：</p>
<p><img data-src="https://s1.ax1x.com/2022/09/10/vOEUAK.png" alt=""></p>
<p>如果一切正常的话，我们就配置成功了！</p>
<h3 id="5-6-鼠标点击特效"><a href="#5-6-鼠标点击特效" class="headerlink" title="5.6 鼠标点击特效"></a>5.6 鼠标点击特效</h3><p>当你点击页面时，你（之前是）可以看到一个彩色的爱心（的）。这个的话，先复制下面的代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">!<span class="function"><span class="keyword">function</span>(<span class="params">e,t,a</span>)</span>&#123;<span class="function"><span class="keyword">function</span> <span class="title">n</span>(<span class="params"></span>)</span>&#123;c(<span class="string">&quot;.heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: &#x27;&#x27;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;&quot;</span>),o(),r()&#125;<span class="function"><span class="keyword">function</span> <span class="title">r</span>(<span class="params"></span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> e=<span class="number">0</span>;e&lt;d.length;e++)d[e].alpha&lt;=<span class="number">0</span>?(t.body.removeChild(d[e].el),d.splice(e,<span class="number">1</span>)):(d[e].y--,d[e].scale+=<span class="number">.004</span>,d[e].alpha-=<span class="number">.013</span>,d[e].el.style.cssText=<span class="string">&quot;left:&quot;</span>+d[e].x+<span class="string">&quot;px;top:&quot;</span>+d[e].y+<span class="string">&quot;px;opacity:&quot;</span>+d[e].alpha+<span class="string">&quot;;transform:scale(&quot;</span>+d[e].scale+<span class="string">&quot;,&quot;</span>+d[e].scale+<span class="string">&quot;) rotate(45deg);background:&quot;</span>+d[e].color+<span class="string">&quot;;z-index:99999&quot;</span>);requestAnimationFrame(r)&#125;<span class="function"><span class="keyword">function</span> <span class="title">o</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> t=<span class="string">&quot;function&quot;</span>==<span class="keyword">typeof</span> e.onclick&amp;&amp;e.onclick;e.onclick=<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;t&amp;&amp;t(),i(e)&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">i</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> a=t.createElement(<span class="string">&quot;div&quot;</span>);a.className=<span class="string">&quot;heart&quot;</span>,d.push(&#123;<span class="attr">el</span>:a,<span class="attr">x</span>:e.clientX-<span class="number">5</span>,<span class="attr">y</span>:e.clientY-<span class="number">5</span>,<span class="attr">scale</span>:<span class="number">1</span>,<span class="attr">alpha</span>:<span class="number">1</span>,<span class="attr">color</span>:s()&#125;),t.body.appendChild(a)&#125;<span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> a=t.createElement(<span class="string">&quot;style&quot;</span>);a.type=<span class="string">&quot;text/css&quot;</span>;<span class="keyword">try</span>&#123;a.appendChild(t.createTextNode(e))&#125;<span class="keyword">catch</span>(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName(<span class="string">&quot;head&quot;</span>)[<span class="number">0</span>].appendChild(a)&#125;<span class="function"><span class="keyword">function</span> <span class="title">s</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span><span class="string">&quot;rgb(&quot;</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">&quot;,&quot;</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">&quot;,&quot;</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">&quot;)&quot;</span>&#125;<span class="keyword">var</span> d=[];e.requestAnimationFrame=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="built_in">setTimeout</span>(e,<span class="number">1e3</span>/<span class="number">60</span>)&#125;&#125;(),n()&#125;(<span class="built_in">window</span>,<span class="built_in">document</span>);</span><br></pre></td></tr></table></figure>
<p>然后在<code>themes/next/source/js/src</code>这个文件夹（自己创建）中，新建<code>clicklove.js</code>，代码复制进去即可。我们有了代码，但如何引用呢？我们需要找到模板文件（<code>themes/next/layout/_layout.swig</code>），并复制如下代码到这个位置：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 页面点击小红心 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/src/clicklove.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>粘贴到这里：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  &#123;%- if theme.pjax %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;pjax&quot;</span>&gt;</span></span><br><span class="line">  &#123;%- endif %&#125;</span><br><span class="line">  &#123;% include &#x27;_third-party/math/index.swig&#x27; %&#125;</span><br><span class="line">  &#123;% include &#x27;_third-party/quicklink.swig&#x27; %&#125;</span><br><span class="line"></span><br><span class="line">  &#123;&#123;- next_inject(&#x27;bodyEnd&#x27;) &#125;&#125;</span><br><span class="line">  &#123;%- if theme.pjax %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  &#123;%- endif %&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 页面点击小红心 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/src/clicklove.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>然后重新渲染试试：</p>
<p><img data-src="https://s1.ax1x.com/2022/09/11/vOyFds.png" alt=""></p>
<p>然后现在我用的烟花的话，原理类似，新建一个<code>fireworks.js</code>，里面复制：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">&#123; origin, speed, color, angle, context &#125;</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.origin = origin</span><br><span class="line">    <span class="built_in">this</span>.position = &#123; ...this.origin &#125;</span><br><span class="line">    <span class="built_in">this</span>.color = color</span><br><span class="line">    <span class="built_in">this</span>.speed = speed</span><br><span class="line">    <span class="built_in">this</span>.angle = angle</span><br><span class="line">    <span class="built_in">this</span>.context = context</span><br><span class="line">    <span class="built_in">this</span>.renderCount = <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">draw</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.context.fillStyle = <span class="built_in">this</span>.color</span><br><span class="line">    <span class="built_in">this</span>.context.beginPath()</span><br><span class="line">    <span class="built_in">this</span>.context.arc(<span class="built_in">this</span>.position.x, <span class="built_in">this</span>.position.y, <span class="number">2</span>, <span class="number">0</span>, <span class="built_in">Math</span>.PI * <span class="number">2</span>)</span><br><span class="line">    <span class="built_in">this</span>.context.fill()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">move</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.position.x = (<span class="built_in">Math</span>.sin(<span class="built_in">this</span>.angle) * <span class="built_in">this</span>.speed) + <span class="built_in">this</span>.position.x</span><br><span class="line">    <span class="built_in">this</span>.position.y = (<span class="built_in">Math</span>.cos(<span class="built_in">this</span>.angle) * <span class="built_in">this</span>.speed) + <span class="built_in">this</span>.position.y + (<span class="built_in">this</span>.renderCount * <span class="number">0.3</span>)</span><br><span class="line">    <span class="built_in">this</span>.renderCount++</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Boom</span> </span>&#123;</span><br><span class="line">  <span class="title">constructor</span> (<span class="params">&#123; origin, context, circleCount = <span class="number">16</span>, area &#125;</span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>.origin = origin</span><br><span class="line">    <span class="built_in">this</span>.context = context</span><br><span class="line">    <span class="built_in">this</span>.circleCount = circleCount</span><br><span class="line">    <span class="built_in">this</span>.area = area</span><br><span class="line">    <span class="built_in">this</span>.stop = <span class="literal">false</span></span><br><span class="line">    <span class="built_in">this</span>.circles = []</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">randomArray</span>(<span class="params">range</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> length = range.length</span><br><span class="line">    <span class="keyword">const</span> randomIndex = <span class="built_in">Math</span>.floor(length * <span class="built_in">Math</span>.random())</span><br><span class="line">    <span class="keyword">return</span> range[randomIndex]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">randomColor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> range = [<span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;F&#x27;</span>]</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;#&#x27;</span> + <span class="built_in">this</span>.randomArray(range) + <span class="built_in">this</span>.randomArray(range) + <span class="built_in">this</span>.randomArray(range) + <span class="built_in">this</span>.randomArray(range) + <span class="built_in">this</span>.randomArray(range) + <span class="built_in">this</span>.randomArray(range)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">randomRange</span>(<span class="params">start, end</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (end - start) * <span class="built_in">Math</span>.random() + start</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">init</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.circleCount; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> circle = <span class="keyword">new</span> Circle(&#123;</span><br><span class="line">        <span class="attr">context</span>: <span class="built_in">this</span>.context,</span><br><span class="line">        <span class="attr">origin</span>: <span class="built_in">this</span>.origin,</span><br><span class="line">        <span class="attr">color</span>: <span class="built_in">this</span>.randomColor(),</span><br><span class="line">        <span class="attr">angle</span>: <span class="built_in">this</span>.randomRange(<span class="built_in">Math</span>.PI - <span class="number">1</span>, <span class="built_in">Math</span>.PI + <span class="number">1</span>),</span><br><span class="line">        <span class="attr">speed</span>: <span class="built_in">this</span>.randomRange(<span class="number">1</span>, <span class="number">6</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="built_in">this</span>.circles.push(circle)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">move</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.circles.forEach(<span class="function">(<span class="params">circle, index</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (circle.position.x &gt; <span class="built_in">this</span>.area.width || circle.position.y &gt; <span class="built_in">this</span>.area.height) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.circles.splice(index, <span class="number">1</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      circle.move()</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.circles.length == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.stop = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">draw</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.circles.forEach(<span class="function"><span class="params">circle</span> =&gt;</span> circle.draw())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CursorSpecialEffects</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.computerCanvas = <span class="built_in">document</span>.createElement(<span class="string">&#x27;canvas&#x27;</span>)</span><br><span class="line">    <span class="built_in">this</span>.renderCanvas = <span class="built_in">document</span>.createElement(<span class="string">&#x27;canvas&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.computerContext = <span class="built_in">this</span>.computerCanvas.getContext(<span class="string">&#x27;2d&#x27;</span>)</span><br><span class="line">    <span class="built_in">this</span>.renderContext = <span class="built_in">this</span>.renderCanvas.getContext(<span class="string">&#x27;2d&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.globalWidth = <span class="built_in">window</span>.innerWidth</span><br><span class="line">    <span class="built_in">this</span>.globalHeight = <span class="built_in">window</span>.innerHeight</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.booms = []</span><br><span class="line">    <span class="built_in">this</span>.running = <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">handleMouseDown</span>(<span class="params">e</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> boom = <span class="keyword">new</span> Boom(&#123;</span><br><span class="line">      <span class="attr">origin</span>: &#123; <span class="attr">x</span>: e.clientX, <span class="attr">y</span>: e.clientY &#125;,</span><br><span class="line">      <span class="attr">context</span>: <span class="built_in">this</span>.computerContext,</span><br><span class="line">      <span class="attr">area</span>: &#123;</span><br><span class="line">        <span class="attr">width</span>: <span class="built_in">this</span>.globalWidth,</span><br><span class="line">        <span class="attr">height</span>: <span class="built_in">this</span>.globalHeight</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    boom.init()</span><br><span class="line">    <span class="built_in">this</span>.booms.push(boom)</span><br><span class="line">    <span class="built_in">this</span>.running || <span class="built_in">this</span>.run()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">handlePageHide</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.booms = []</span><br><span class="line">    <span class="built_in">this</span>.running = <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">init</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> style = <span class="built_in">this</span>.renderCanvas.style</span><br><span class="line">    style.position = <span class="string">&#x27;fixed&#x27;</span></span><br><span class="line">    style.top = style.left = <span class="number">0</span></span><br><span class="line">    style.zIndex = <span class="string">&#x27;999999999999999999999999999999999999999999&#x27;</span></span><br><span class="line">    style.pointerEvents = <span class="string">&#x27;none&#x27;</span></span><br><span class="line"></span><br><span class="line">    style.width = <span class="built_in">this</span>.renderCanvas.width = <span class="built_in">this</span>.computerCanvas.width = <span class="built_in">this</span>.globalWidth</span><br><span class="line">    style.height = <span class="built_in">this</span>.renderCanvas.height = <span class="built_in">this</span>.computerCanvas.height = <span class="built_in">this</span>.globalHeight</span><br><span class="line"></span><br><span class="line">    <span class="built_in">document</span>.body.append(<span class="built_in">this</span>.renderCanvas)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;mousedown&#x27;</span>, <span class="built_in">this</span>.handleMouseDown.bind(<span class="built_in">this</span>))</span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;pagehide&#x27;</span>, <span class="built_in">this</span>.handlePageHide.bind(<span class="built_in">this</span>))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">run</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.running = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.booms.length == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.running = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    requestAnimationFrame(<span class="built_in">this</span>.run.bind(<span class="built_in">this</span>))</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.computerContext.clearRect(<span class="number">0</span>, <span class="number">0</span>, <span class="built_in">this</span>.globalWidth, <span class="built_in">this</span>.globalHeight)</span><br><span class="line">    <span class="built_in">this</span>.renderContext.clearRect(<span class="number">0</span>, <span class="number">0</span>, <span class="built_in">this</span>.globalWidth, <span class="built_in">this</span>.globalHeight)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.booms.forEach(<span class="function">(<span class="params">boom, index</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (boom.stop) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.booms.splice(index, <span class="number">1</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      boom.move()</span><br><span class="line">      boom.draw()</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">this</span>.renderContext.drawImage(<span class="built_in">this</span>.computerCanvas, <span class="number">0</span>, <span class="number">0</span>, <span class="built_in">this</span>.globalWidth, <span class="built_in">this</span>.globalHeight)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cursorSpecialEffects = <span class="keyword">new</span> CursorSpecialEffects()</span><br><span class="line">cursorSpecialEffects.init()</span><br></pre></td></tr></table></figure>
<p>然后把<code>_layout.swig</code>里改一下就好了。效果的话，点击一下试试？</p>
<h3 id="5-7-把猫…养在博客？"><a href="#5-7-把猫…养在博客？" class="headerlink" title="5.7 把猫…养在博客？"></a>5.7 把猫…养在博客？</h3><p>这一步也是很简单的啊。对对，我说的就是左下角那只白猫……</p>
<p><img data-src="https://s1.ax1x.com/2022/09/11/vO5tUS.png" alt=""></p>
<p>这个插件叫做<code>live2d</code>。官方地址的话，<a href="https://github.com/xiazeyu/live2d-widget-models/">https://github.com/xiazeyu/live2d-widget-models/</a>可以查到所有的<code>model</code>。这只猫的话，它叫<code>tororo</code>，虽然我也不知道为啥…我们需要先安装依赖：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm install hexo<span class="literal">-helper</span><span class="literal">-live2d</span> live2d<span class="literal">-widget</span><span class="literal">-model</span><span class="literal">-tororo</span></span><br></pre></td></tr></table></figure>
<p>但这样还不太行。我们需要加一段配置，加在<code>Hexo</code>的<code>_config.yml</code>里：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># live2d performance</span></span><br><span class="line"><span class="attr">live2d:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">scriptFrom:</span> <span class="string">local</span></span><br><span class="line">  <span class="attr">pluginRootPath:</span> <span class="string">live2dw/</span></span><br><span class="line">  <span class="attr">pluginJsPath:</span> <span class="string">lib/</span></span><br><span class="line">  <span class="attr">pluginModelPath:</span> <span class="string">assets/</span></span><br><span class="line">  <span class="attr">tagMode:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">debug:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">model:</span></span><br><span class="line">    <span class="attr">use:</span> <span class="string">live2d-widget-model-tororo</span></span><br><span class="line">  <span class="attr">display:</span></span><br><span class="line">    <span class="attr">position:</span> <span class="string">left</span></span><br><span class="line">    <span class="attr">width:</span> <span class="number">280</span></span><br><span class="line">    <span class="attr">height:</span> <span class="number">560</span></span><br><span class="line">  <span class="attr">mobile:</span></span><br><span class="line">    <span class="attr">show:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>我并没有了解过所有的参数，反正就是把<code>use</code>改成<code>live2d-widget-model-tororo</code>，同时改一下位置、长、宽即可。</p>
<p>嘿嘿，看起来这一段很短，对吧？其实我当时研究了很久，网上没有太好的教程，最后才发现要安装<code>hexo-helper-live2d</code>啊。</p>
<h3 id="5-8-AddThis-Utilities分享功能"><a href="#5-8-AddThis-Utilities分享功能" class="headerlink" title="5.8 AddThis Utilities分享功能"></a>5.8 <code>AddThis Utilities</code>分享功能</h3><p>虽然我这个博客还是没什么名气，可万一之后需要有一个分享功能，怎么办？在<code>Next</code>的配置中提到了<code>Addthis</code>分享。这个怎么实现呢？</p>
<p><img data-src="https://s1.ax1x.com/2022/09/11/vO7Ca6.png" alt=""></p>
<p>先到<code>addthis.com</code>注册一个账号（另及：加速<code>Google Recaptcha</code>的方法见之后的文章），然后照着这些截图来：</p>
<p>登录之后有这样一个页面，我们选择第一个，<code>Share Buttons</code>；</p>
<p><img data-src="https://s1.ax1x.com/2022/09/11/vO79Vx.png" alt=""></p>
<p>然后，选择<code>Floating</code>；</p>
<p><img data-src="https://s1.ax1x.com/2022/09/11/vO7Sq1.png" alt=""></p>
<p>之后我们开始自定义工具。先选择<code>Selected by you</code>，用<code>ADD MORE SERVICES</code>改分享方式；</p>
<p><img data-src="https://s1.ax1x.com/2022/09/11/vOTzrR.png" alt=""></p>
<p>最后我选了这些，比如微信、QQ、生成二维码等等；</p>
<p><img data-src="https://s1.ax1x.com/2022/09/11/vO7PIK.png" alt=""></p>
<p>在第四个栏目里调整一下位置，和手机是否显示；</p>
<p><img data-src="https://s1.ax1x.com/2022/09/11/vO7kGD.png" alt=""></p>
<p>最后<code>Activate Tool</code>，获取代码；</p>
<p><img data-src="https://s1.ax1x.com/2022/09/11/vO7ARe.png" alt=""></p>
<p>不过我们不需要所有的代码，找一下代码里的<code>pubid</code>，应该是<code>ra-</code>打头，接着复制进配置文件里即可。</p>
<p><img data-src="https://s1.ax1x.com/2022/09/11/vO7FPO.png" alt=""></p>
<p>渲染看一下。</p>
<blockquote>
<p>另及：如果没有的话，检查一下是否浏览器屏蔽了“跟踪器”。</p>
<p>还有…我本来想继续写下去，写一个<code>Widgetpack</code>打分功能。可惜人家服务器有问题，功能暂时下线了，等恢复了我再加上吧。</p>
</blockquote>
<p>好耶！我们现在就把这8个功能配置完啦！接下来…我们来看一点更高级的东东！</p>
<hr>
<h2 id="6-更高级的功能"><a href="#6-更高级的功能" class="headerlink" title="6. 更高级的功能"></a>6. 更高级的功能</h2><p>这一章的话，主要讲一些“看不见”的东西，比如站点地图，<code>RSS</code>等等。</p>
<h3 id="6-1-RSS订阅"><a href="#6-1-RSS订阅" class="headerlink" title="6.1 RSS订阅"></a>6.1 <code>RSS</code>订阅</h3><p>一般博客都是提供<code>RSS Feed</code>来订阅的。之前我们提到过<code>RSS</code>，包括侧边栏链接、文章结尾的友链，等等。要生成的话我们只需要安装插件<code>hexo-generator-feed</code>，每次<code>hexo g</code>都会自动生成。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm install hexo<span class="literal">-generator</span><span class="literal">-feed</span> -<span class="literal">-save</span></span><br></pre></td></tr></table></figure>
<p>不过，生成出来的文件在哪里呢？看一下…应该是<code>/atom.xml</code>。</p>
<p><img data-src="https://s1.ax1x.com/2022/09/11/vXpMo4.png" alt=""></p>
<h3 id="6-2-站点地图sitemap"><a href="#6-2-站点地图sitemap" class="headerlink" title="6.2 站点地图sitemap"></a>6.2 站点地图<code>sitemap</code></h3><p>站点地图的话主要是为搜索引擎用的，这一小节算是给后文的一个铺垫。同样的，只需要安装插件<code>hexo-generator-sitemap</code>即可。这次生成出来的是<code>/sitemap.xml</code>。</p>
<p><img data-src="https://s1.ax1x.com/2022/09/11/vXpueU.png" alt=""></p>
<h3 id="6-3-CDN与图床"><a href="#6-3-CDN与图床" class="headerlink" title="6.3 CDN与图床"></a>6.3 <code>CDN</code>与图床</h3><p>默认的话，<code>next</code>会使用<code>jsdelivr</code>作为默认的<code>CDN</code>，不过<code>cdn.jsdelivr.net</code>这个节点不是特别的稳定（被墙过），所以我个人是换到了<code>fastly</code>节点上。具体位置的话，在这里，至于改不改就看你自己了。</p>
<p><img data-src="https://s1.ax1x.com/2022/09/11/vXplFJ.png" alt=""></p>
<p>同时如果你想要往文章里添加图片，那光靠自己的域名（也就是<code>GitHub</code>）肯定是不够的，我们一定会需要一个快速的、稳定的图床。我个人推荐是<code>imgse</code>路过图床，它这个是免费的，而且已经有10年历史，上传也非常方便。它支持<code>10MB</code>内的<code>JPG</code>和<code>PNG</code>，子节点是<code>ax1x.com</code>。</p>
<p><img data-src="https://s1.ax1x.com/2022/09/12/vXoGPU.png" alt=""></p>
<h3 id="6-4-Bing-SEO"><a href="#6-4-Bing-SEO" class="headerlink" title="6.4 Bing SEO"></a>6.4 <code>Bing SEO</code></h3><p>搜索引擎优化确实是一件很重要的事情，最简单的是<code>Bing</code>。官网的话，<a href="https://www.bing.com/webmasters/about/">https://www.bing.com/webmasters/about/</a>，用<code>Microsoft</code>账户登录是最方便的（除非你有<code>FB</code>或者<code>Google</code>，不过这不太可能吧）。</p>
<p><img data-src="https://s1.ax1x.com/2022/09/11/vXpKwF.png" alt=""></p>
<p><img data-src="https://s1.ax1x.com/2022/09/11/vXpmLT.png" alt=""></p>
<h4 id="6-4-1-注册与验证"><a href="#6-4-1-注册与验证" class="headerlink" title="6.4.1 注册与验证"></a>6.4.1 注册与验证</h4><p>登录进来之后，我们输入网址，登记页面（页面布局可能和图片有些许区别）。</p>
<p><img data-src="https://s1.ax1x.com/2022/09/11/vXpJQx.png" alt=""></p>
<p>登记过后会要求我们验证页面。三种方法中最简单的是<code>&lt;meta&gt;</code>标签，直接复制代码，然后加到<code>_layout.swig</code>的<code>&lt;head&gt;</code>里去就好了。重新渲染、部署，然后等待片刻、验证。</p>
<p><img data-src="https://s1.ax1x.com/2022/09/11/vXpGS1.png" alt=""></p>
<p><img data-src="https://s1.ax1x.com/2022/09/11/vXpYy6.png" alt=""></p>
<p><img data-src="https://s1.ax1x.com/2022/09/11/vXp3WR.png" alt=""></p>
<p>这就代表验证成功了。</p>
<h4 id="6-4-2-提交网站地图"><a href="#6-4-2-提交网站地图" class="headerlink" title="6.4.2 提交网站地图"></a>6.4.2 提交网站地图</h4><p>点击右上角那个“提交站点地图”，并输入你刚生成的站点地图的网址，可以加速爬网。</p>
<p><img data-src="https://s1.ax1x.com/2022/09/11/vXp1Y9.png" alt=""></p>
<p><img data-src="https://s1.ax1x.com/2022/09/11/vXptOK.png" alt=""></p>
<p>然后…等待扫描…可能会需要一段时间。</p>
<p>这就代表扫描完了：</p>
<p><img data-src="https://s1.ax1x.com/2022/09/11/vX9CX6.png" alt=""></p>
<p>不过真正能搜到是需要2天时间的，先放一下我自己的博客的截图：</p>
<p><img data-src="https://s1.ax1x.com/2022/09/11/vX9inK.png" alt=""></p>
<p>当然这个<code>SEO</code>肯定是不止这么多的。相关的功能等着你去探索，包括<code>Microsoft Clarity</code>等等。</p>
<h3 id="6-5-模板文件与动态样式表"><a href="#6-5-模板文件与动态样式表" class="headerlink" title="6.5 模板文件与动态样式表"></a>6.5 模板文件与动态样式表</h3><p>最后这一小节不是具体的教你去“干什么”，而是具体“怎么干”。每个人对网站的外观跟行为逻辑有自己的看法，而自定义的终极方式就是修改底层。</p>
<p><img data-src="https://s1.ax1x.com/2022/09/24/xAMc4I.png" alt=""></p>
<p>在<code>Next</code>这个主题下，关于底层的两个文件夹，一个是<code>layout</code>，一个是<code>source</code>，具体见下：</p>
<h4 id="6-5-1-Mozilla-Nunjucks"><a href="#6-5-1-Mozilla-Nunjucks" class="headerlink" title="6.5.1 Mozilla Nunjucks"></a>6.5.1 <code>Mozilla Nunjucks</code></h4><p>在上网查之前我一直以为我们修改的什么<code>_layout.swig</code>啊都是用什么<code>swig</code>语言写的，但一搜其实并没有这个语言（有，但极其小众，且已为<code>unmaintained</code>状态）。直到我看到<code>renderer.js</code>里的代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* global hexo */</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> nunjucks = <span class="built_in">require</span>(<span class="string">&#x27;nunjucks&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// Return a compiled renderer.</span></span><br><span class="line">njkRenderer.compile = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> compiledTemplate = njkCompile(data);</span><br><span class="line">  <span class="comment">// Need a closure to keep the compiled template.</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">locals</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> compiledTemplate.render(locals);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">hexo.extend.renderer.register(<span class="string">&#x27;njk&#x27;</span>, <span class="string">&#x27;html&#x27;</span>, njkRenderer);</span><br><span class="line">hexo.extend.renderer.register(<span class="string">&#x27;swig&#x27;</span>, <span class="string">&#x27;html&#x27;</span>, njkRenderer);</span><br></pre></td></tr></table></figure>
<p>才发现有<code>nunjucks</code>这种语言。它的语法可以在官网<a href="https://mozilla.github.io/nunjucks/">https://mozilla.github.io/nunjucks/</a>查到，据说和<code>jinja2</code>（基于<code>Python</code>的）一模一样，此外还支持自定义后缀什么的。这里讲一点特殊的变量，举些例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;%- if theme.pjax %&#125;</span><br><span class="line">    &lt;div id=&quot;pjax&quot;&gt;</span><br><span class="line">  &#123;%- endif %&#125;</span><br><span class="line">  &#123;% include &#x27;_third-party/math/index.swig&#x27; %&#125;</span><br><span class="line">  &#123;% include &#x27;_third-party/quicklink.swig&#x27; %&#125;</span><br><span class="line"></span><br><span class="line">  &#123;&#123;- next_inject(&#x27;bodyEnd&#x27;) &#125;&#125;</span><br><span class="line">  &#123;%- if theme.pjax %&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &#123;%- endif %&#125;</span><br></pre></td></tr></table></figure>
<p>（来自<code>_layout.swig</code>）有一个<code>if</code>语句，后面跟的是<code>theme.pjax</code>。这个<code>theme</code>指的是<code>Next</code>主题的<code>_config.yml</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;site-author motion-element&quot; itemprop=&quot;author&quot; itemscope itemtype=&quot;http://schema.org/Person&quot;&gt;</span><br><span class="line">  &#123;%- if theme.avatar.url %&#125;</span><br><span class="line">    &lt;img class=&quot;site-author-image&quot; itemprop=&quot;image&quot; alt=&quot;&#123;&#123; author &#125;&#125;&quot;</span><br><span class="line">      src=&quot;&#123;&#123; url_for(theme.avatar.url) &#125;&#125;&quot;&gt;</span><br><span class="line">  &#123;%- endif %&#125;</span><br><span class="line">  &lt;p class=&quot;site-author-name&quot; itemprop=&quot;name&quot;&gt;&#123;&#123; author &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;div class=&quot;site-description&quot; itemprop=&quot;description&quot;&gt;&#123;&#123; description &#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>（来自<code>_partials/sidebar/site-overview.swig</code>）这里引用了一个变量<code>&#123;&#123; author &#125;&#125;</code>，像这种没有<code>theme.</code>的都来自<code>Hexo</code>的<code>_config.yml</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% block title %&#125;&#123;&#123; page.title &#125;&#125; | &#123;&#123; title &#125;&#125;&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>
<p>（来自<code>post.swig</code>）这里引用的<code>&#123;&#123; page.title &#125;&#125;</code>有前缀<code>page.</code>，代表当前正渲染的页面（准确地说是<code>post</code>或<code>page</code>的<code>Front Matter</code>）。</p>
<h4 id="6-5-2-Stylus"><a href="#6-5-2-Stylus" class="headerlink" title="6.5.2 Stylus"></a>6.5.2 <code>Stylus</code></h4><p>这个就没太多好讲的了，因为我自己也没学过动态<code>CSS</code>。在<code>source/css</code>这个文件夹下所有<code>.styl</code>后缀的文件都是样式表。我们之前修改过一个书签的，还记得吗？</p>
<hr>
<h2 id="7-总结与回顾"><a href="#7-总结与回顾" class="headerlink" title="7. 总结与回顾"></a>7. 总结与回顾</h2><p>到这里，我们所有的教程已经写完了。在这“短暂的”几十分钟，几小时，甚至几天中，我们终于成功的做出来这样一个基于<code>Hexo</code>+<code>Next</code>的博客网站了。还记得那几条命令吧，我还是写在这里备用。</p>
<ul>
<li><p><code>hexo clean</code>清除本地缓存</p>
</li>
<li><p><code>hexo g</code>生成网页</p>
</li>
<li><p><code>hexo s</code>打开本地服务器</p>
</li>
<li><p><code>hexo d</code>部署到远程</p>
</li>
<li><p><code>hexo new</code>新建文章</p>
</li>
<li><p><code>hexo new page</code>新建页面</p>
</li>
</ul>
<p>接下来，就是你继续探索，大展身手的时刻了！嗯…48k字，我也是圆了长久以来的梦想。那么，我们就下次再见喽~</p>
<hr>
<h2 id="8-致谢"><a href="#8-致谢" class="headerlink" title="8. 致谢"></a>8. 致谢</h2><p>这里写一下我参考到的文章：</p>
<ol>
<li><p><a href="https://jerrymiao2019.github.io/2021/04/10/%E5%9F%BA%E4%BA%8EGithub-io-Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/">基于Github.io+Hexo搭建个人博客 | JerryMiao2019’s Blog</a></p>
</li>
<li><p><a href="https://corecabin.cn/2021/08/14/solve-some-problems-of-hexo-renderer-kramed-rendering-conflicts/">解决hexo-renderer-kramed渲染冲突的部分问题 | 卡洛的核心舱</a></p>
</li>
<li><p><a href="https://zhuanlan.zhihu.com/p/30836436">Hexo+Next主题优化 | 知乎</a></p>
</li>
<li><p><a href="https://blog.csdn.net/nightmare_dimple/article/details/86661502">Hexo博客优化之Next主题美化 | nightmare_dimple的博客 | CSDN博客</a></p>
</li>
<li><p><a href="https://anran758.github.io/blog/2020/09/27/hexo-issue/">Hexo 常见问题解决方案 | Anran758’s blog</a></p>
</li>
<li><p><a href="https://github.com/gitalk/gitalk#options">GitHub - gitalk/gitalk</a></p>
</li>
<li><p><a href="https://blog.csdn.net/qq_34146679/article/details/86065071">Hexo给NexT主题内添加页面点击出现爱心的效果_| 女王的禅师范的博客 | CSDN博客</a></p>
</li>
<li><p><a href="https://tding.top/archives/58cff12b.html">Hexo-NexT 添加打字特效、鼠标点击特效 | 小丁的个人博客</a></p>
</li>
<li><p><a href="https://www.cnblogs.com/wangyuehan/p/9860371.html">Hexo+yilia添加helper-live2d插件宠物动画，很好玩的哦~~ | 王约翰 | 博客园</a></p>
</li>
<li><p><a href="https://blog.csdn.net/u010053344/article/details/50706790">Github 搭建 hexo （五）- 站点地图（sitemap.xml）|_Small蒙奇的博客 | CSDN博客</a></p>
</li>
</ol>
<p><strong>THE END</strong>感谢您的阅读~</p>
]]></content>
      <categories>
        <category>GitHub</category>
        <category>Pages</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>Website</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>【转】jQuery——从此前端JavaScript……不再愁？！</title>
    <url>/2023/01/07/jquery-basic-syntax/</url>
    <content><![CDATA[<p>最近计划把我去年上半年的<code>Hand-Written-HTML-Site</code>拿出来讲一讲，展示一下我研究<code>JavaScript</code>的成果。在写的过程中我用到了<code>jQuery</code>，这里先转一篇入门的教程过来，后面如果有需要的话可以来这里查阅。</p>
<p>原文链接、参考资料：</p>
<ol>
<li><p><a href="https://zhuanlan.zhihu.com/p/538115881">jQuery入门 - 知乎</a></p>
</li>
<li><p><a href="https://blog.csdn.net/hy250_/article/details/124813755">jQuery入门教程_小宇爱吃辣条的博客-CSDN博客_jquery教程</a></p>
</li>
<li><p><a href="https://blog.csdn.net/weixin_51094637/article/details/124490662">JQuery中Ajax的简单操作_低头只管敲的博客-CSDN博客_jquery ajax</a></p>
</li>
</ol>
<span id="more"></span>
<h2 id="1-使用jQuery"><a href="#1-使用jQuery" class="headerlink" title="1. 使用jQuery"></a>1. 使用<code>jQuery</code></h2><p><code>jQuery</code>是一个快速、简洁的<code>JavaScript</code>框架，于2006年1月由John Resig发布。<code>jQuery</code>设计的宗旨是<code>Write Less，Do More</code>，即倡导写更少的代码，做更多的事情。它封装<code>JavaScript</code>常用的功能代码，提供一种简便的<code>JavaScript</code>设计模式，优化<code>HTML</code>文档操作、事件处理、动画设计和<code>Ajax</code>交互。</p>
<p>一般为了获取最新的<code>jQuery</code>，我们使用<code>CDN</code>，例如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/jquery@3/dist/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<h2 id="2-jQuery元素选择器"><a href="#2-jQuery元素选择器" class="headerlink" title="2. jQuery元素选择器"></a>2. <code>jQuery</code>元素选择器</h2><h3 id="2-1-元素选择器"><a href="#2-1-元素选择器" class="headerlink" title="2.1 元素选择器"></a>2.1 元素选择器</h3><p><code>jQuery</code>使用<code>CSS</code>选择器来选取<code>HTML</code>元素：</p>
<ol>
<li><p><code>$(&quot;p&quot;)</code> 选取 <code>&lt;p&gt;</code> 元素</p>
</li>
<li><p><code>$(&quot;p.intro&quot;)</code> 选取所有<code>class=intro</code>的<code>&lt;p&gt;</code>元素</p>
</li>
<li><p><code>$(&quot;p#demo&quot;)</code>选取所有<code>id=&quot;demo&quot;</code>的<code>&lt;p&gt;</code>元素</p>
</li>
</ol>
<h3 id="2-2-属性选择器"><a href="#2-2-属性选择器" class="headerlink" title="2.2 属性选择器"></a>2.2 属性选择器</h3><ol>
<li><p><code>$(&quot;[href]&quot;)</code> 选取所有带有<code>href</code>属性的元素</p>
</li>
<li><p><code>$(&quot;[href=&#39;#&#39;]&quot;)</code> 选取所有带有<code>href</code>值等于<code>#</code>的元素</p>
</li>
<li><p><code>$(&quot;[href!=&#39;#&#39;]&quot;)</code> 选取所有带有<code>href</code>值不等于<code>#</code>的元素</p>
</li>
<li><p><code>$(&quot;[href$=&#39;.jpg&#39;]&quot;)</code> 选取所有<code>href</code>值以<code>.jpg</code>结尾的元素</p>
</li>
</ol>
<h3 id="2-3-更多例子"><a href="#2-3-更多例子" class="headerlink" title="2.3 更多例子"></a>2.3 更多例子</h3><ol>
<li><p><code>$(&quot;p.intro.demo&quot;)</code>选取所有<code>class=intro</code>同时<code>class=demo</code>的<code>&lt;p&gt;</code>元素</p>
</li>
<li><p><code>$(this)</code>选取<code>JavaScript</code>中当前元素</p>
</li>
<li><p><code>$(&quot;*&quot;)</code>选取所有元素</p>
</li>
<li><p><code>$(&quot;p,i,a&quot;)</code>选取所有<code>&lt;p&gt;</code>、<code>&lt;i&gt;</code>和<code>&lt;a&gt;</code></p>
</li>
</ol>
<h3 id="2-4-层次选择器"><a href="#2-4-层次选择器" class="headerlink" title="2.4 层次选择器"></a>2.4 层次选择器</h3><ol>
<li><p><code>$(&quot;p a&quot;)</code>选择所有<code>&lt;p&gt;</code>中的<code>&lt;a&gt;</code></p>
</li>
<li><p><code>$(&quot;div.demo &gt; div&quot;)</code>选择<code>&lt;div class=&quot;demo&quot;&gt;</code>中的<code>&lt;div&gt;</code>，不包括这些<code>&lt;div&gt;</code>的子代<code>&lt;div&gt;</code></p>
</li>
<li><p><code>$(&quot;span.code + button.copy&quot;)</code>选择<code>&lt;span class=&quot;code&quot;&gt;</code>后最相邻的<code>&lt;button class=&quot;copy&quot;&gt;</code></p>
</li>
<li><p><code>$(&quot;span#demo ~ img&quot;)</code>选择<code>&lt;span id=&quot;demo&quot;&gt;</code>后所有<code>&lt;img&gt;</code></p>
</li>
</ol>
<h3 id="2-5-过滤选择器"><a href="#2-5-过滤选择器" class="headerlink" title="2.5 过滤选择器"></a>2.5 过滤选择器</h3><h4 id="2-5-1-基本过滤"><a href="#2-5-1-基本过滤" class="headerlink" title="2.5.1 基本过滤"></a>2.5.1 基本过滤</h4><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center"><strong>选择器</strong></th>
<th style="text-align:center"><strong>描述</strong></th>
<th style="text-align:center"><strong>示例</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>:first</code></td>
<td style="text-align:center">选择第1个元素</td>
<td style="text-align:center"><code>$(&quot;div:first&quot;)</code>选择第1个<code>div</code>元素</td>
</tr>
<tr>
<td style="text-align:center"><code>:last</code></td>
<td style="text-align:center">选择最后1个元素</td>
<td style="text-align:center"><code>$(&quot;div:last&quot;)</code>选择最后1个<code>div</code>元素</td>
</tr>
<tr>
<td style="text-align:center"><code>:not(E1)</code></td>
<td style="text-align:center">去除所有<code>E1</code>选择器匹配的元素</td>
<td style="text-align:center"><code>$(&quot;input:not(.my)&quot;)</code>选择<code>class</code>不是<code>.my</code>的所有<code>input</code>元素</td>
</tr>
<tr>
<td style="text-align:center"><code>:even</code></td>
<td style="text-align:center">选择索引是偶数的所有元素，索引从0开始</td>
<td style="text-align:center"><code>$(&quot;tr:even&quot;)</code>选择表格中所有偶数的行</td>
</tr>
<tr>
<td style="text-align:center"><code>:odd</code></td>
<td style="text-align:center">选择索引是奇数的所有元素，索引从0开始</td>
<td style="text-align:center"><code>$(&quot;tr:odd&quot;)</code>选择表格中所有奇数的行</td>
</tr>
<tr>
<td style="text-align:center"><code>:eq(index)</code></td>
<td style="text-align:center">选择索引值是<code>index</code>的元素，<code>index</code>从0开始</td>
<td style="text-align:center"><code>$(&quot;tr:eq(1)&quot;)</code>选择表格行索引等于1的行</td>
</tr>
<tr>
<td style="text-align:center"><code>:gt(index)</code></td>
<td style="text-align:center">选择索引值大于<code>index</code>的元素，<code>index</code>从0开始</td>
<td style="text-align:center"><code>$(&quot;tr:gt(1)&quot;)</code>选择表格行索引大于1的行</td>
</tr>
<tr>
<td style="text-align:center"><code>:lt(index)</code></td>
<td style="text-align:center">选择索引值小于<code>index</code>的元素，<code>index</code>从0开始</td>
<td style="text-align:center"><code>$(&quot;tr:lt(1)&quot;)</code>选择表格行索引小于1的行</td>
</tr>
<tr>
<td style="text-align:center"><code>:header</code></td>
<td style="text-align:center">所取所有的标题元素</td>
<td style="text-align:center"><code>$(&quot;:header&quot;)</code>选择网页中所有的<code>&lt;h1&gt;~&lt;h6&gt;</code></td>
</tr>
<tr>
<td style="text-align:center"><code>:animated</code></td>
<td style="text-align:center">选择当前正在执行动画的所有元素</td>
<td style="text-align:center"><code>$(&quot;div:animated&quot;)</code>选择正在执行动画的<code>div</code>元素</td>
</tr>
</tbody>
</table>
</div>
<h4 id="2-5-2-内容过滤"><a href="#2-5-2-内容过滤" class="headerlink" title="2.5.2 内容过滤"></a>2.5.2 内容过滤</h4><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center"><strong>选择器</strong></th>
<th style="text-align:center"><strong>描述</strong></th>
<th style="text-align:center"><strong>示例</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>:contains(text)</code></td>
<td style="text-align:center">选择含有<code>text</code>文本内容的元素</td>
<td style="text-align:center"><code>$(&quot;div:contains(&#39;我&#39;)&quot;)</code>选择内容里包含我的所有<code>div</code></td>
</tr>
<tr>
<td style="text-align:center"><code>:empty</code></td>
<td style="text-align:center">选择不包含子元素或文本的空元素</td>
<td style="text-align:center"><code>$(&quot;div:empty&quot;)</code>选择不包含子元素（含文本）的所有<code>div</code>元素</td>
</tr>
<tr>
<td style="text-align:center"><code>:has(E1)</code></td>
<td style="text-align:center">选择包含有(<code>E1</code>选择器匹配的元素)的所有元素</td>
<td style="text-align:center"><code>$(&quot;div:has(p)&quot;)</code>选择含有<code>p</code>元素的所有<code>div</code>元素</td>
</tr>
<tr>
<td style="text-align:center"><code>:parent</code></td>
<td style="text-align:center">选择含有子元素或文本的元素</td>
<td style="text-align:center"><code>$(&quot;div:parent&quot;)</code>选择拥有子元素（包含文本）的所有<code>div</code>元素</td>
</tr>
</tbody>
</table>
</div>
<h4 id="2-5-3-子元素过滤"><a href="#2-5-3-子元素过滤" class="headerlink" title="2.5.3 子元素过滤"></a>2.5.3 子元素过滤</h4><div class="table-container">
<table>
<thead>
<tr>
<th><strong>选择器</strong></th>
<th><strong>功能描述</strong></th>
<th><strong>简单示例</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>:nth-child(index/even/odd)</code></td>
<td>选取每个父元素下的第<code>index</code>个子元素或奇偶元素.(<code>index</code>从1开始）</td>
<td><code>:eq(index)</code>只匹配一个元素,而<code>:nth-child(index)</code>将为每一个父元素匹配子元素,并且<code>:nth-child(index)</code>的<code>index</code>从1开始,而<code>:eq(index)</code>的<code>index</code>从0开始.</td>
</tr>
<tr>
<td><code>:first-child</code></td>
<td>选择每个父元素的第1个子元素</td>
<td><code>:first</code>只选择单个元素,而<code>:first-child</code>将为每个父元素匹配第1个子元素如:<code>$(“ul li:first-child”)</code>选择每个<code>&lt;ul&gt;</code>下的第一个<code>&lt;li&gt;</code></td>
</tr>
<tr>
<td><code>:last-child</code></td>
<td>选取每个父元素的最后1个子元素</td>
<td><code>$(“ul li:last-child”)</code>选择每个<code>&lt;ul&gt;</code>下的最后一个<code>&lt;li&gt;</code></td>
</tr>
<tr>
<td><code>:only-child</code></td>
<td>如果某个元素是它父元素中惟一的子元素,那么将会被匹配.如果父元素中含有其他元素,则不会被匹配</td>
<td><code>$(“ul li:only-child”)</code>在中选取是惟一子元素的<code>&lt;li&gt;</code></td>
</tr>
</tbody>
</table>
</div>
<blockquote>
<p><code>:nth-child()</code>选择器详细功能描述:</p>
<ul>
<li><p><code>:nth-child(even)</code>能选择每个父元素下的索引值是偶数的元素</p>
</li>
<li><p><code>:nth-child(odd)</code>选择出每个父元素下的索引值是奇数的元素</p>
</li>
<li><p><code>:nth-child(2)</code>选取每个父元素下的索引值等于2的元素 </p>
</li>
<li><p><code>:nth-child(3n)</code>能选出每个父元素下的索引值是3的倍数的元素,n从0开始</p>
</li>
<li><p><code>:nth-child(3n+1)</code>能选取每个父元素下的索引值是3n+1的元素.n从0开始</p>
</li>
</ul>
</blockquote>
<hr>
<h2 id="3-jQuery事件"><a href="#3-jQuery事件" class="headerlink" title="3. jQuery事件"></a>3. <code>jQuery</code>事件</h2><p>页面对不同访问者的响应叫做事件，事件处理程序指的是当<code>HTML</code>中发生某些事件时所调用的方法</p>
<p>页面中指定一个点击事件对应：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;p&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">&#x27;Click&#x27;</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>其它的事件还有：</p>
<ul>
<li><p>鼠标事件：<code>click</code>、<code>dblclick</code>、<code>mouseenter</code>、<code>mouseleave</code>、<code>hover</code></p>
</li>
<li><p>键盘事件：<code>keypress</code>、<code>keydown</code>、<code>keyup</code></p>
</li>
<li><p>表单事件：<code>submit</code>、<code>change</code>、<code>focus</code>、<code>blur</code></p>
</li>
<li><p>文档、窗口事件：<code>load</code>、<code>resize</code>、<code>scroll</code>、<code>unload</code></p>
</li>
</ul>
<p>这里面有一个入口函数<code>$(document).ready()</code>，简称<code>$()</code>。<code>$(document).ready()</code>与<code>window.οnlοad=function()&#123;&#125;</code>的区别:</p>
<div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th><code>window.onload</code></th>
<th><code>$(document).ready()</code></th>
</tr>
</thead>
<tbody>
<tr>
<td>执行时机</td>
<td>必须等待网页全部加载完毕（包括 图片等），然后再执行包裹代码</td>
<td>只需要等待网页中的<code>DOM</code>结构加载完毕，就能执行包裹的代码</td>
</tr>
<tr>
<td>执行次数</td>
<td>只能执行一次，如果第二次，那么 第一次的执行会被覆盖</td>
<td>可以执行多次，第N次都不会被上 一次覆盖</td>
</tr>
</tbody>
</table>
</div>
<hr>
<h2 id="4-jQuery操作元素动画"><a href="#4-jQuery操作元素动画" class="headerlink" title="4. jQuery操作元素动画"></a>4. <code>jQuery</code>操作元素动画</h2><h3 id="4-1-显示隐藏"><a href="#4-1-显示隐藏" class="headerlink" title="4.1 显示隐藏"></a>4.1 显示隐藏</h3><p>可以使用<code>hide()</code>和<code>show()</code>方法来隐藏和显示<code>HTML</code>元素：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">&quot;p&quot;</span>).hide();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">&quot;p&quot;</span>).show();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>语法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//speed  规定隐藏/显示的速度</span></span><br><span class="line"><span class="comment">//callback  隐藏或显示完成后所执行的函数</span></span><br><span class="line"></span><br><span class="line">$(selector).hide(speed,callback);</span><br><span class="line"></span><br><span class="line">$(selector).show(speed,callback);</span><br></pre></td></tr></table></figure>
<p>可以使用<code>toggle()</code>方法来切换<code>hide()</code>和<code>show()</code>方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">&quot;p&quot;</span>).toggle();</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 语法</span></span><br><span class="line"><span class="comment">// $(selector).toggle(speed,callback);</span></span><br></pre></td></tr></table></figure>
<h3 id="4-2-淡入淡出"><a href="#4-2-淡入淡出" class="headerlink" title="4.2 淡入淡出"></a>4.2 淡入淡出</h3><p>通过<code>fade</code>，可以实现元素的淡入淡出效果。四种<code>fade</code>方法，都可接收2个参数：</p>
<ol>
<li><code>speed</code>：规定效果的时长</li>
<li><code>callback</code>：完成后所执行的函数</li>
</ol>
<p><code>fadeIn()</code>用于淡入已隐藏的元素:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">&quot;#div1&quot;</span>).fadeIn();</span><br><span class="line">  $(<span class="string">&quot;#div3&quot;</span>).fadeIn(<span class="number">3000</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><code>fadeOut()</code>方法用于淡出可见元素：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">&quot;#div1&quot;</span>).fadeOut();</span><br><span class="line">  $(<span class="string">&quot;#div3&quot;</span>).fadeOut(<span class="number">3000</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><code>fadeToggle()</code>方法可以在<code>fadeIn()</code>与<code>fadeOut()</code>方法之间进行切换，如果元素已淡出，则<code>fadeToggle()</code>会向元素添加淡入效果；如果元素已淡入，则<code>fadeToggle()</code>会向元素添加淡出效果：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">&quot;#div1&quot;</span>).fadeOut();</span><br><span class="line">  $(<span class="string">&quot;#div3&quot;</span>).fadeOut(<span class="number">3000</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><code>fadeTo()</code>方法允许渐变为给定的不透明度（值介于 0 与 1 之间）：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">&quot;#div3&quot;</span>).fadeTo(<span class="number">3000</span>,<span class="number">0.3</span>);</span><br><span class="line">  $(<span class="string">&quot;#div3&quot;</span>).fadeTo(<span class="number">3000</span>,<span class="number">0.5</span>);</span><br><span class="line">  $(<span class="string">&quot;#div3&quot;</span>).fadeTo(<span class="number">3000</span>,<span class="number">0.7</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="4-3-滑动"><a href="#4-3-滑动" class="headerlink" title="4.3 滑动"></a>4.3 滑动</h3><p>通过<code>slide</code>，可以实现元素的滑入滑出效果。三种<code>slide</code>方法，都可接收2个参数：</p>
<ol>
<li><code>speed</code>：规定效果的时长</li>
<li><code>callback</code>：完成后所执行的函数</li>
</ol>
<p><code>slideDown()</code>方法用于向下滑动元素：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">&quot;#div1&quot;</span>).slideDown();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><code>slideUp()</code>方法用于向上滑动元素：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">&quot;#div1&quot;</span>).slideUp();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><code>slideToggle()</code>方法可以在<code>slideDown()</code>与<code>slideUp()</code>方法之间进行切换。如果元素向下滑动，则<code>slideToggle()</code>可向上滑动它们；如果元素向上滑动，则<code>slideToggle()</code>可向下滑动它们：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">&quot;#divl&quot;</span>).slideToggle();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="4-4-自定义动画"><a href="#4-4-自定义动画" class="headerlink" title="4.4 自定义动画"></a>4.4 自定义动画</h3><p><code>animate()</code>方法用于创建自定义动画。</p>
<p>默认所有 HTML 元素都有一个静态位置，且无法移动。如需对位置进行操作，首先把元素的<code>CSS position</code>属性设置为<code>relative</code>、<code>fixed</code>或<code>absolute</code>才可。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//必需的 params 参数定义形成动画的 CSS 属性。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//可选的 speed 参数规定效果的时长。它可以取以下值：&quot;slow&quot;、&quot;fast&quot; 或毫秒。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//可选的 callback 参数是动画完成后所执行的函数名称</span></span><br><span class="line"></span><br><span class="line">$(selector).animate(&#123;params&#125;,speed,callback);</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">&quot;div&quot;</span>).animate(&#123;<span class="attr">left</span>:<span class="string">&#x27;250px&#x27;</span>&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>同时操作多个属性：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">&quot;div&quot;</span>).animate(&#123;</span><br><span class="line">    <span class="attr">left</span>:<span class="string">&#x27;250px&#x27;</span>,</span><br><span class="line">    <span class="attr">opacity</span>:<span class="string">&#x27;0.5&#x27;</span>,</span><br><span class="line">    <span class="attr">height</span>:<span class="string">&#x27;150px&#x27;</span>,</span><br><span class="line">    <span class="attr">width</span>:<span class="string">&#x27;150px&#x27;</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><code>animate()</code>方法可以用来操作大部分<code>CSS</code>属性。当使用<code>animate()</code>时，必须使用驼峰写所有的属性名，比如，必须使用<code>paddingLeft</code>而不是<code>padding-left</code>，使用<code>marginRight</code>而不是<code>margin-right</code>。</p>
<p>也可以定义相对值（该值相对于元素的当前值）。需要在值的前面加上<code>+=</code>或<code>-=</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">&quot;div&quot;</span>).animate(&#123;</span><br><span class="line">    <span class="attr">left</span>:<span class="string">&#x27;250px&#x27;</span>,</span><br><span class="line">    <span class="attr">height</span>:<span class="string">&#x27;+=150px&#x27;</span>,</span><br><span class="line">    <span class="attr">width</span>:<span class="string">&#x27;+=150px&#x27;</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="4-5-停止所有动画"><a href="#4-5-停止所有动画" class="headerlink" title="4.5 停止所有动画"></a>4.5 停止所有动画</h3><p><code>stop()</code>方法用于停止还在执行的动画或效果，适用于所有<code>jQuery</code>效果函数，包括滑动、淡入淡出和自定义动画：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//$(selector).stop(stopAll,goToEnd);</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;#stop&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">&quot;#panel&quot;</span>).stop();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="5-jQuery操作DOM"><a href="#5-jQuery操作DOM" class="headerlink" title="5. jQuery操作DOM"></a>5. <code>jQuery</code>操作<code>DOM</code></h2><h3 id="5-1-获取、改变元素内容"><a href="#5-1-获取、改变元素内容" class="headerlink" title="5.1 获取、改变元素内容"></a>5.1 获取、改变元素内容</h3><ul>
<li><p><code>text()</code>：设置或返回所选元素的文本内容</p>
</li>
<li><p><code>html()</code>：设置或返回所选元素的内容（包括 HTML 标记）</p>
</li>
<li><p><code>val()</code>：设置或返回表单字段的值</p>
</li>
</ul>
<p>获取内容：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;#btn1&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  alert(<span class="string">&quot;Text: &quot;</span> + $(<span class="string">&quot;#test&quot;</span>).text());</span><br><span class="line">&#125;);</span><br><span class="line">$(<span class="string">&quot;#btn2&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  alert(<span class="string">&quot;HTML: &quot;</span> + $(<span class="string">&quot;#test&quot;</span>).html());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;#btn1&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  alert(<span class="string">&quot;Value: &quot;</span> + $(<span class="string">&quot;#test&quot;</span>).val());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>改变内容：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;#btn1&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">&quot;#test1&quot;</span>).text(<span class="string">&quot;Hello world!&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">$(<span class="string">&quot;#btn2&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">&quot;#test2&quot;</span>).html(<span class="string">&quot;&lt;b&gt;Hello world!&lt;/b&gt;&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">$(<span class="string">&quot;#btn3&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">&quot;#test3&quot;</span>).val(<span class="string">&quot;Hello world&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="5-2-获取、设置元素属性"><a href="#5-2-获取、设置元素属性" class="headerlink" title="5.2 获取、设置元素属性"></a>5.2 获取、设置元素属性</h3><p><code>attr()</code>方法用于获取、设置属性值：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  alert($(<span class="string">&quot;a&quot;</span>).attr(<span class="string">&quot;href&quot;</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">&quot;a&quot;</span>).attr(<span class="string">&quot;href&quot;</span>,<span class="string">&quot;https://www.baidu.com/&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置多个属性</span></span><br><span class="line">$(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">&quot;a&quot;</span>).attr(&#123;</span><br><span class="line">      <span class="attr">href</span> :<span class="string">&quot;https://www.baidu.com/&quot;</span>,</span><br><span class="line">      <span class="attr">title</span> : <span class="string">&quot;百度&quot;</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="5-3-添加、删除元素"><a href="#5-3-添加、删除元素" class="headerlink" title="5.3 添加、删除元素"></a>5.3 添加、删除元素</h3><p><code>append()</code>方法在被选元素的结尾插入内容：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;p&quot;</span>).append(<span class="string">&quot;我是使用append插入的内容&quot;</span>);</span><br></pre></td></tr></table></figure>
<p><code>prepend()</code>方法在被选元素的开头插入内容：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;p&quot;</span>).prepend(<span class="string">&quot;我是使用prepend插入的内容&quot;</span>);</span><br></pre></td></tr></table></figure>
<p><code>after()</code>方法在被选元素之后插入内容：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;p&quot;</span>).after(<span class="string">&quot;我是使用after插入的内容&quot;</span>);</span><br></pre></td></tr></table></figure>
<p><code>before()</code>方法在被选元素之前插入内容：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;p&quot;</span>).before(<span class="string">&quot;我是使用before插入的内容&quot;</span>);</span><br></pre></td></tr></table></figure>
<p><code>remove()</code>方法删除被选元素及其子元素：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;#div1&quot;</span>).remove();</span><br></pre></td></tr></table></figure>
<p><code>remove()</code>方法也可接受一个参数，允许对被删元素进行过滤</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;p&quot;</span>).remove(<span class="string">&quot;.text&quot;</span>);</span><br></pre></td></tr></table></figure>
<p><code>empty()</code>方法删除被选元素的子元素：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;#div1&quot;</span>).empty();</span><br></pre></td></tr></table></figure>
<h3 id="5-4-操作CSS"><a href="#5-4-操作CSS" class="headerlink" title="5.4 操作CSS"></a>5.4 操作<code>CSS</code></h3><p><code>addClass()</code>方法向元素添加<code>class</code>属性：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// list red</span></span><br><span class="line">  $(<span class="string">&quot;h1,h2,p&quot;</span>).addClass(<span class="string">&quot;red&quot;</span>);</span><br><span class="line">  $(<span class="string">&quot;div&quot;</span>).addClass(<span class="string">&quot;box&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>也可以在<code>addClass()</code>方法中规定多个类：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">&quot;#div1&quot;</span>).addClass(<span class="string">&quot;box blue&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><code>removeClass()</code>删除指定的<code>class</code>属性：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">&quot;h1,h2,p&quot;</span>).removeClass(<span class="string">&quot;red&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><code>toggleClass()</code>对被选元素进行添加/删除类的切换操作：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">&quot;h1,h2,p&quot;</span>).toggleClass(<span class="string">&quot;red&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><code>css()</code>方法设置或返回被选元素的一个或多个样式属性：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取样式</span></span><br><span class="line">$(<span class="string">&quot;p&quot;</span>).css();</span><br><span class="line"><span class="comment">//获取背景颜色</span></span><br><span class="line">$(<span class="string">&quot;p&quot;</span>).css(<span class="string">&quot;background-color&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置样式</span></span><br><span class="line">$(<span class="string">&quot;p&quot;</span>).css(<span class="string">&quot;background-color&quot;</span>,<span class="string">&quot;yellow&quot;</span>);</span><br><span class="line"><span class="comment">//设置多个样式</span></span><br><span class="line">$(<span class="string">&quot;p&quot;</span>).css(&#123;<span class="string">&quot;background-color&quot;</span>:<span class="string">&quot;yellow&quot;</span>,<span class="string">&quot;font-size&quot;</span>:<span class="string">&quot;200%&quot;</span>&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="5-5-获取尺寸"><a href="#5-5-获取尺寸" class="headerlink" title="5.5 获取尺寸"></a>5.5 获取尺寸</h3><p><code>width()</code>方法设置或返回元素的宽度（不包括<code>padding</code>、<code>border</code>、<code>margin</code>），<code>height()</code>方法设置或返回元素的高度（不包括<code>padding</code>、<code>border</code>、<code>margin</code>）：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log($(<span class="string">&quot;#div1&quot;</span>).width())</span><br><span class="line">    <span class="built_in">console</span>.log($(<span class="string">&quot;#div1&quot;</span>).height())</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><code>innerWidth()</code>方法返回元素的宽度（包括<code>padding</code>），<code>innerHeight()</code>方法返回元素的高度（包括<code>padding</code>）：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log($(<span class="string">&quot;#div1&quot;</span>).innerWidth())</span><br><span class="line">    <span class="built_in">console</span>.log($(<span class="string">&quot;#div1&quot;</span>).innerHeight())</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><code>outerWidth()</code>方法返回元素的宽度（包括<code>padding</code>和<code>border</code>），<code>outerHeight()</code>方法返回元素的高度（包括<code>padding</code>和<code>border</code>）：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log($(<span class="string">&quot;#div1&quot;</span>).outerWidth())</span><br><span class="line">    <span class="built_in">console</span>.log($(<span class="string">&quot;#div1&quot;</span>).outerHeight())</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><code>outerWidth(true)</code>方法返回元素的宽度（包括<code>padding</code>、<code>border</code>、<code>margin</code>），<code>outerHeight(true)</code>方法返回元素的高度（包括<code>padding</code>、<code>border</code>、<code>margin</code>）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log($(<span class="string">&quot;#div1&quot;</span>).outerWidth(<span class="literal">true</span>))</span><br><span class="line">    <span class="built_in">console</span>.log($(<span class="string">&quot;#div1&quot;</span>).outerHeight(<span class="literal">true</span>))</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><code>width()</code>和<code>height()</code>方法也可用于指定元素宽度高度：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">&quot;#div1&quot;</span>).width(<span class="number">500</span>).height(<span class="number">500</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="6-jQuery元素遍历"><a href="#6-jQuery元素遍历" class="headerlink" title="6. jQuery元素遍历"></a>6. <code>jQuery</code>元素遍历</h2><h3 id="6-1-向上遍历DOM树"><a href="#6-1-向上遍历DOM树" class="headerlink" title="6.1 向上遍历DOM树"></a>6.1 向上遍历<code>DOM</code>树</h3><p><code>parent()</code>方法返回被选元素的直接父元素，该方法只会向上一级对<code>DOM</code>树进行遍历：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;span&quot;</span>).parent().css(&#123;<span class="string">&quot;color&quot;</span>:<span class="string">&quot;red&quot;</span>,<span class="string">&quot;border&quot;</span>:<span class="string">&quot;2px solid red&quot;</span>&#125;</span><br></pre></td></tr></table></figure>
<p><code>parents()</code>方法返回被选元素的所有祖先元素，它一路向上直到文档的根元素 （<code>&lt;html&gt;</code>）：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;span&quot;</span>).parents().css(&#123;<span class="string">&quot;color&quot;</span>:<span class="string">&quot;red&quot;</span>,<span class="string">&quot;border&quot;</span>:<span class="string">&quot;2px solid red&quot;</span>&#125;</span><br></pre></td></tr></table></figure>
<p><code>parentsUntil()</code>方法返回介于两个给定元素之间的所有祖先元素：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;span&quot;</span>).parentsUntil(<span class="string">&quot;div&quot;</span>).css(&#123;<span class="string">&quot;color&quot;</span>:<span class="string">&quot;red&quot;</span>,<span class="string">&quot;border&quot;</span>:<span class="string">&quot;2px solid red&quot;</span>&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="6-2-向下遍历DOM树"><a href="#6-2-向下遍历DOM树" class="headerlink" title="6.2 向下遍历DOM树"></a>6.2 向下遍历<code>DOM</code>树</h3><p><code>children()</code>方法返回被选元素的所有直接子元素：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;div&quot;</span>).children().css(&#123;<span class="string">&quot;color&quot;</span>:<span class="string">&quot;red&quot;</span>,<span class="string">&quot;border&quot;</span>:<span class="string">&quot;2px solid red&quot;</span>&#125;);</span><br><span class="line"><span class="comment">//过滤对子元素</span></span><br><span class="line">$(<span class="string">&quot;div&quot;</span>).children(<span class="string">&quot;p.1&quot;</span>).css(&#123;<span class="string">&quot;color&quot;</span>:<span class="string">&quot;red&quot;</span>,<span class="string">&quot;border&quot;</span>:<span class="string">&quot;2px solid red&quot;</span>&#125;);</span><br></pre></td></tr></table></figure>
<p><code>find()</code>方法返回被选元素的后代元素，一路向下直到最后一个后代：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//只选中span</span></span><br><span class="line">$(<span class="string">&quot;div&quot;</span>).find(<span class="string">&quot;span&quot;</span>).css(&#123;<span class="string">&quot;color&quot;</span>:<span class="string">&quot;red&quot;</span>,<span class="string">&quot;border&quot;</span>:<span class="string">&quot;2px solid red&quot;</span>&#125;);</span><br><span class="line"><span class="comment">//选中所有</span></span><br><span class="line">$(<span class="string">&quot;div&quot;</span>).find(<span class="string">&quot;*&quot;</span>).css(&#123;<span class="string">&quot;color&quot;</span>:<span class="string">&quot;red&quot;</span>,<span class="string">&quot;border&quot;</span>:<span class="string">&quot;2px solid red&quot;</span>&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="6-3-DOM树中水平遍历"><a href="#6-3-DOM树中水平遍历" class="headerlink" title="6.3 DOM树中水平遍历"></a>6.3 <code>DOM</code>树中水平遍历</h3><p><code>siblings()</code>方法返回被选元素的所有同胞元素：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;h2&quot;</span>).siblings().css(&#123;<span class="string">&quot;color&quot;</span>:<span class="string">&quot;red&quot;</span>,<span class="string">&quot;border&quot;</span>:<span class="string">&quot;2px solid red&quot;</span>&#125;);</span><br><span class="line"><span class="comment">// &lt;h2&gt; 的同胞元素的所有 &lt;p&gt; 元素</span></span><br><span class="line">$(<span class="string">&quot;h2&quot;</span>).siblings(<span class="string">&quot;p&quot;</span>).css(&#123;<span class="string">&quot;color&quot;</span>:<span class="string">&quot;red&quot;</span>,<span class="string">&quot;border&quot;</span>:<span class="string">&quot;2px solid red&quot;</span>&#125;);</span><br></pre></td></tr></table></figure>
<p><code>next()</code>方法返回被选元素的下一个同胞元素：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;h2&quot;</span>).next().css(&#123;<span class="string">&quot;color&quot;</span>:<span class="string">&quot;red&quot;</span>,<span class="string">&quot;border&quot;</span>:<span class="string">&quot;2px solid red&quot;</span>&#125;);</span><br></pre></td></tr></table></figure>
<p><code>nextAll()</code>方法返回被选元素的所有跟随的同胞元素：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;h2&quot;</span>).nextAll().css(&#123;<span class="string">&quot;color&quot;</span>:<span class="string">&quot;red&quot;</span>,<span class="string">&quot;border&quot;</span>:<span class="string">&quot;2px solid red&quot;</span>&#125;);</span><br></pre></td></tr></table></figure>
<p><code>nextUntil()</code>方法返回介于两个给定参数之间的所有跟随的同胞元素：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;h2&quot;</span>).nextUntil(<span class="string">&quot;h6&quot;</span>).css(&#123;<span class="string">&quot;color&quot;</span>:<span class="string">&quot;red&quot;</span>,<span class="string">&quot;border&quot;</span>:<span class="string">&quot;2px solid red&quot;</span>&#125;);</span><br></pre></td></tr></table></figure>
<p>同理，<code>prev()</code>获得匹配元素集合中每个元素紧邻的前一个同胞元素；<code>prevAll()</code>获得当前匹配元素集合中每个元素的前面的同胞元素；<code>prevUntil()</code>方法获得当前匹配元素集合中每个元素的前面的同胞元素。</p>
<h3 id="6-4-遍历中的过滤"><a href="#6-4-遍历中的过滤" class="headerlink" title="6.4 遍历中的过滤"></a>6.4 遍历中的过滤</h3><p><code>first()</code>方法返回被选元素的首个元素：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;div p&quot;</span>).first().css(<span class="string">&quot;background-color&quot;</span>,<span class="string">&quot;yellow&quot;</span>)</span><br></pre></td></tr></table></figure>
<p><code>last()</code>方法返回被选元素的最后一个元素：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;div p&quot;</span>).last().css(<span class="string">&quot;background-color&quot;</span>,<span class="string">&quot;yellow&quot;</span>)</span><br></pre></td></tr></table></figure>
<p><code>eq()</code>方法返回被选元素中带有指定索引号的元素：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;p&quot;</span>).eq(<span class="number">1</span>).css(<span class="string">&quot;background-color&quot;</span>,<span class="string">&quot;yellow&quot;</span>)</span><br></pre></td></tr></table></figure>
<p><code>filter()</code>方法允许您规定一个标准,匹配的元素会被返回：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;p&quot;</span>).filter(<span class="string">&quot;.info&quot;</span>).css(<span class="string">&quot;background-color&quot;</span>,<span class="string">&quot;yellow&quot;</span>)</span><br></pre></td></tr></table></figure>
<p><code>not()</code>方法返回不匹配标准的所有元素：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;p&quot;</span>).not(<span class="string">&quot;.info&quot;</span>).css(<span class="string">&quot;background-color&quot;</span>,<span class="string">&quot;yellow&quot;</span>)</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="7-jQuery中的Ajax操作"><a href="#7-jQuery中的Ajax操作" class="headerlink" title="7. jQuery中的Ajax操作"></a>7. <code>jQuery</code>中的<code>Ajax</code>操作</h2><h3 id="7-1-Ajax是什么？"><a href="#7-1-Ajax是什么？" class="headerlink" title="7.1 Ajax是什么？"></a>7.1 <code>Ajax</code>是什么？</h3><p>全称：<code>ASynchronous JavaScript And XML</code> （代表 异步<code>JavaScript</code>和<code>XML</code>)</p>
<p><code>Ajax</code>并不是编程语言，是一种用于创建快速动态网页的技术。</p>
<p><code>Ajax</code>组合了：浏览器内建的<code>XMLHttpRequest</code>对象（从<code>web</code> 服务器请求数据）、<code>JavaScript</code>和<code>HTML DOM</code>（显示或使用数据）</p>
<p><code>Ajax</code>是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。 </p>
<p>通过在后台与服务器进行少量数据交换，<code>Ajax</code>可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。传统的网页（不使用<code>Ajax</code>）如果需要更新内容，必须重载整个网页页面。</p>
<p>同步与异步的区别在于，当用户发送同步请求时，当前页面不可以使用，服务器响应页面到客户端，响应完成，用户才可以使用页面；但当用户发送异步请求时，当前页面还可以继续使用，当异步请求的数据响应给页面，页面把数据显示出来。</p>
<pre class="mermaid">sequenceDiagram
    participant B as Browser
    participant S as Server

    note left of B: Something happened.
    B->>+S: XHR(XMLHttpRequest)
    note left of B: Meanwhile, still working.
    S->>-B: Responce
    note left of B: Update page with JS.</pre>

<h3 id="7-2-jQuery中Ajax函数"><a href="#7-2-jQuery中Ajax函数" class="headerlink" title="7.2 jQuery中Ajax函数"></a>7.2 <code>jQuery</code>中<code>Ajax</code>函数</h3><p>通过<code>jQuery AJAX</code>方法，可以使用<code>HTTP</code>的<code>get</code>和<code>post</code>方法， 从远程服务器上请求文本、<code>HTML</code>、<code>XML</code>或<code>JSON</code>，同时还能够把这些外部数据直接载入网页的被选元素中。</p>
<p><code>load()</code>方法从服务器加载数据，并把返回的数据放入被选元素中，</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(selector).load(URL,data,callback);</span><br><span class="line"></span><br><span class="line"><span class="comment">//URL 参数规定加载的 URL 必选</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//data 参数规定与请求一同发送的查询字符串键/值对集合 可选</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//callback 参数是 load() 方法完成后所执行的函数名称 可选</span></span><br><span class="line"></span><br><span class="line"> $(<span class="string">&quot;#btn1&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     $(<span class="string">&#x27;#test&#x27;</span>).load(<span class="string">&#x27;/foo/bar&#x27;</span>,data,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;);</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure>
<p><code>$.get()</code>方法通过<code>HTTP GET</code>请求从服务器上请求数据。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//$.get(URL,callback);</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $.get(<span class="string">&#x27;/foo/bar&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data,status</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">    <span class="built_in">console</span>.log(status);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><code>$.post()</code>方法通过<code>HTTP POST</code>请求从服务器上请求数据。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//$.post(URL,data,callback);</span></span><br><span class="line"></span><br><span class="line">$.post(<span class="string">&quot;/foo/bar/demo_test_post.asp&quot;</span>,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">page</span>:<span class="number">1</span>,</span><br><span class="line">      <span class="attr">name</span>:<span class="string">&quot;Tina&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">data,status</span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(data);</span><br><span class="line">      <span class="built_in">console</span>.log(status);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<hr>
<p><strong>THE END</strong>感谢您的阅读~</p>
]]></content>
      <categories>
        <category>编程</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>Frontend</tag>
        <tag>HTML</tag>
        <tag>JavaScript</tag>
        <tag>语法</tag>
      </tags>
  </entry>
  <entry>
    <title>【转】Markdown中Latex常用语法</title>
    <url>/2021/11/28/latex-syntax-in-markdown/</url>
    <content><![CDATA[<p>这篇文章是我转载过来的（很抱歉的是原网址已经找不到了），自己进行了一些格式上的修改。有些 $\LaTeX$标签可能显示不出来，同志们这是编译器的问题，因人而异……</p>
<h2 id="0-LaTeX-是什么？"><a href="#0-LaTeX-是什么？" class="headerlink" title="0. LaTeX 是什么？"></a>0. LaTeX 是什么？</h2><blockquote>
<p>$ \LaTeX $是一种基于<code>ΤeΧ</code>的排版系统，由美国计算机学家莱斯利·兰伯特（Leslie Lamport）在20世纪80年代初期开发.<br>利用这种格式，即使使用者没有排版和程序设计的知识也可以充分发挥由<code>TeX</code>所提供的强大功能，能在几天、甚至几小时内生成很多具有书籍质量的印刷品。<br>对于生成复杂表格和数学公式，这一点表现得尤为突出。因此它非常适用于生成高印刷质量的科技和数学类文档。这个系统同样适用于生成从简单的信件到完整书籍的所有其他种类的文档。</p>
</blockquote>
<span id="more"></span>
<h3 id="0-1-写在前面"><a href="#0-1-写在前面" class="headerlink" title="0.1 写在前面"></a>0.1 写在前面</h3><p>文章中，标签以表格的形式呈现。<strong>如果出现<code>/</code>的情况，代表某字符没有此形式。</strong> <em>（如不存在<code>\varalpha</code>，这一格使用<code>/</code>填充）</em>  </p>
<p>想要补充我没写上的字符？可以直接滚动到页尾，登录<code>GitHub</code>账号后在聊天框里留言，<code>Gitalk</code>会自动同步到<code>GitHub issue</code>中，并用邮件通知我！</p>
<p><code>Markdown</code>中插入公式的方式：</p>
<ol>
<li><p>行内：<script type="math/tex">公式</script></p>
</li>
<li><p>公式块：</p>
</li>
</ol>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">$$</span><br><span class="line">公式</span><br><span class="line">$$</span><br></pre></td></tr></table></figure>
<h2 id="1-希腊字母表"><a href="#1-希腊字母表" class="headerlink" title="1. 希腊字母表"></a>1. 希腊字母表</h2><div class="table-container">
<table>
<thead>
<tr>
<th>Name</th>
<th style="text-align:center">Display</th>
<th>Capital Case</th>
<th style="text-align:center">Display</th>
<th>Var Case</th>
<th style="text-align:center">Display</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>\alpha</code></td>
<td style="text-align:center">$\alpha$</td>
<td><code>\Alpha</code></td>
<td style="text-align:center">$\Alpha$</td>
<td>/</td>
<td style="text-align:center">/</td>
</tr>
<tr>
<td><code>\beta</code></td>
<td style="text-align:center">$\beta$</td>
<td><code>\Beta</code></td>
<td style="text-align:center">$\Beta$</td>
<td>/</td>
<td style="text-align:center">/</td>
</tr>
<tr>
<td><code>\gamma</code></td>
<td style="text-align:center">$\gamma$</td>
<td><code>\Gamma</code></td>
<td style="text-align:center">$\Gamma$</td>
<td>/</td>
<td style="text-align:center">/</td>
</tr>
<tr>
<td><code>\theta</code></td>
<td style="text-align:center">$\theta$</td>
<td><code>\Theta</code></td>
<td style="text-align:center">$\Theta$</td>
<td><code>\vartheta</code></td>
<td style="text-align:center">$\vartheta$</td>
</tr>
<tr>
<td><code>\mu</code></td>
<td style="text-align:center">$\mu$</td>
<td><code>\Mu</code></td>
<td style="text-align:center">$\Mu$</td>
<td>/</td>
<td style="text-align:center">/</td>
</tr>
<tr>
<td><code>\delta</code></td>
<td style="text-align:center">$\delta$</td>
<td><code>\Delta</code></td>
<td style="text-align:center">$\Delta$</td>
<td>/</td>
<td style="text-align:center">/</td>
</tr>
<tr>
<td><code>\epsilon</code></td>
<td style="text-align:center">$\epsilon$</td>
<td><code>\Epsilon</code></td>
<td style="text-align:center">$\Epsilon$</td>
<td><code>\varepsilon</code></td>
<td style="text-align:center">$\varepsilon$</td>
</tr>
<tr>
<td><code>\sigma</code></td>
<td style="text-align:center">$\sigma$</td>
<td><code>\Sigma</code></td>
<td style="text-align:center">$\Sigma$</td>
<td><code>\varsigma</code></td>
<td style="text-align:center">$\varsigma$</td>
</tr>
<tr>
<td><code>\pi</code></td>
<td style="text-align:center">$\pi$</td>
<td><code>\Pi</code></td>
<td style="text-align:center">$\Pi$</td>
<td><code>\varpi</code></td>
<td style="text-align:center">$\varpi$</td>
</tr>
<tr>
<td><code>\omega</code></td>
<td style="text-align:center">$\omega$</td>
<td><code>\Omega</code></td>
<td style="text-align:center">$\Omega$</td>
<td>/</td>
<td style="text-align:center">/</td>
</tr>
<tr>
<td><code>\xi</code></td>
<td style="text-align:center">$\xi$</td>
<td><code>\Xi</code></td>
<td style="text-align:center">$\Xi$</td>
<td>/</td>
<td style="text-align:center">/</td>
</tr>
<tr>
<td><code>\zeta</code></td>
<td style="text-align:center">$\zeta$</td>
<td><code>\Zeta</code></td>
<td style="text-align:center">$\Zeta$</td>
<td>/</td>
<td style="text-align:center">/</td>
</tr>
<tr>
<td><code>\chi</code></td>
<td style="text-align:center">$\chi$</td>
<td><code>\Chi</code></td>
<td style="text-align:center">$\Chi$</td>
<td>/</td>
<td style="text-align:center">/</td>
</tr>
<tr>
<td><code>\rho</code></td>
<td style="text-align:center">$\rho$</td>
<td><code>\Rho</code></td>
<td style="text-align:center">$\Rho$</td>
<td><code>\varrho</code></td>
<td style="text-align:center">$\varrho$</td>
</tr>
<tr>
<td><code>\phi</code></td>
<td style="text-align:center">$\phi$</td>
<td><code>\Phi</code></td>
<td style="text-align:center">$\Phi$</td>
<td><code>\varphi</code></td>
<td style="text-align:center">$\varphi$</td>
</tr>
<tr>
<td><code>\eta</code></td>
<td style="text-align:center">$\eta$</td>
<td><code>\Eta</code></td>
<td style="text-align:center">$\Eta$</td>
<td>/</td>
<td style="text-align:center">/</td>
</tr>
<tr>
<td><code>\lambda</code></td>
<td style="text-align:center">$\lambda$</td>
<td><code>\Lambda</code></td>
<td style="text-align:center">$\Lambda$</td>
<td>/</td>
<td style="text-align:center">/</td>
</tr>
<tr>
<td><code>\kappa</code></td>
<td style="text-align:center">$\kappa$</td>
<td><code>\Kappa</code></td>
<td style="text-align:center">$\Kappa$</td>
<td><code>\varkappa</code></td>
<td style="text-align:center">$\varkappa$</td>
</tr>
<tr>
<td><code>\nu</code></td>
<td style="text-align:center">$\nu$</td>
<td><code>\Nu</code></td>
<td style="text-align:center">$\Nu$</td>
<td>/</td>
<td style="text-align:center">/</td>
</tr>
<tr>
<td><code>\upsilon</code></td>
<td style="text-align:center">$\upsilon$</td>
<td><code>\Upsilon</code></td>
<td style="text-align:center">$\Upsilon$</td>
<td>/</td>
<td style="text-align:center">/</td>
</tr>
<tr>
<td><code>\psi</code></td>
<td style="text-align:center">$\psi$</td>
<td><code>\Psi</code></td>
<td style="text-align:center">$\Psi$</td>
<td>/</td>
<td style="text-align:center">/</td>
</tr>
<tr>
<td><code>\tau</code></td>
<td style="text-align:center">$\tau$</td>
<td><code>\Tau</code></td>
<td style="text-align:center">$\Tau$</td>
<td>/</td>
<td style="text-align:center">/</td>
</tr>
<tr>
<td><code>\iota</code></td>
<td style="text-align:center">$\iota$</td>
<td><code>\Iota</code></td>
<td style="text-align:center">$\Iota$</td>
<td>/</td>
<td style="text-align:center">/</td>
</tr>
</tbody>
</table>
</div>
<p>没有显示出来所有的字符？你可以尝试使用自己的编辑器来查看！</p>
<h2 id="2-常用特殊字符表"><a href="#2-常用特殊字符表" class="headerlink" title="2.常用特殊字符表"></a>2.常用特殊字符表</h2><h3 id="2-1-数学符号类"><a href="#2-1-数学符号类" class="headerlink" title="2.1 数学符号类"></a>2.1 数学符号类</h3><div class="table-container">
<table>
<thead>
<tr>
<th>Name</th>
<th style="text-align:center">Display</th>
<th>Name</th>
<th style="text-align:center">Display</th>
<th>Name</th>
<th style="text-align:center">Display</th>
<th>Name</th>
<th style="text-align:center">Display</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>\times</code></td>
<td style="text-align:center">$\times$</td>
<td><code>\div</code></td>
<td style="text-align:center">$\div$</td>
<td><code>\pm</code></td>
<td style="text-align:center">$\pm$</td>
<td><code>\mp</code></td>
<td style="text-align:center">$\mp$</td>
</tr>
<tr>
<td><code>\otimes</code></td>
<td style="text-align:center">$\otimes$</td>
<td><code>\ominus</code></td>
<td style="text-align:center">$\ominus$</td>
<td><code>\oplus</code></td>
<td style="text-align:center">$\oplus$</td>
<td><code>\odot</code></td>
<td style="text-align:center">$\odot$</td>
</tr>
<tr>
<td><code>\oslash</code></td>
<td style="text-align:center">$\oslash$</td>
<td><code>\triangleq</code></td>
<td style="text-align:center">$\triangleq$</td>
<td><code>\ne</code></td>
<td style="text-align:center">$\ne$</td>
<td><code>\equiv</code></td>
<td style="text-align:center">$\equiv$</td>
</tr>
<tr>
<td><code>\lt</code></td>
<td style="text-align:center">$\lt$</td>
<td><code>\gt</code></td>
<td style="text-align:center">$\gt$</td>
<td><code>\le</code></td>
<td style="text-align:center">$\le$</td>
<td><code>\ge</code></td>
<td style="text-align:center">$\ge$</td>
</tr>
<tr>
<td><code>\cup</code></td>
<td style="text-align:center">$\cup$</td>
<td><code>\cap</code></td>
<td style="text-align:center">$\cap$</td>
<td><code>\Cup</code></td>
<td style="text-align:center">$\Cup$</td>
<td><code>\Cap</code></td>
<td style="text-align:center">$\Cap$</td>
</tr>
<tr>
<td><code>\bigcup</code></td>
<td style="text-align:center">$\bigcup$</td>
<td><code>\bigcap</code></td>
<td style="text-align:center">$\bigcap$</td>
<td><code>\ast</code></td>
<td style="text-align:center">$\ast$</td>
<td><code>\star</code></td>
<td style="text-align:center">$\star$</td>
</tr>
<tr>
<td><code>\bigotimes</code></td>
<td style="text-align:center">$\bigotimes$</td>
<td><code>\bigoplus</code></td>
<td style="text-align:center">$\bigoplus$</td>
<td><code>\circ</code></td>
<td style="text-align:center">$\circ$</td>
<td><code>\bullet</code></td>
<td style="text-align:center">$\bullet$</td>
</tr>
<tr>
<td><code>\bigcirc</code></td>
<td style="text-align:center">$\bigcirc$</td>
<td><code>\amalg</code></td>
<td style="text-align:center">$\amalg$</td>
<td><code>\to</code></td>
<td style="text-align:center">$\to$</td>
<td><code>\infty</code></td>
<td style="text-align:center">$\infty$</td>
</tr>
<tr>
<td><code>\vee</code></td>
<td style="text-align:center">$\vee$</td>
<td><code>\wedge</code></td>
<td style="text-align:center">$\wedge$</td>
<td><code>\lhd</code></td>
<td style="text-align:center">$\lhd$</td>
<td><code>\rhd</code></td>
<td style="text-align:center">$\rhd$</td>
</tr>
<tr>
<td><code>\bigvee</code></td>
<td style="text-align:center">$\bigvee$</td>
<td><code>\bigwedge</code></td>
<td style="text-align:center">$\bigwedge$</td>
<td><code>\unlhd</code></td>
<td style="text-align:center">$\unlhd$</td>
<td><code>\unrhd</code></td>
<td style="text-align:center">$\unrhd$</td>
</tr>
<tr>
<td><code>\sqcap</code></td>
<td style="text-align:center">$\sqcap$</td>
<td><code>\sqcup</code></td>
<td style="text-align:center">$\sqcup$</td>
<td><code>\prec</code></td>
<td style="text-align:center">$\prec$</td>
<td><code>\succ</code></td>
<td style="text-align:center">$\succ$</td>
</tr>
<tr>
<td><code>\subset</code></td>
<td style="text-align:center">$\subset$</td>
<td><code>\supset</code></td>
<td style="text-align:center">$\supset$</td>
<td><code>\sim</code></td>
<td style="text-align:center">$\sim$</td>
<td><code>\approx</code></td>
<td style="text-align:center">$\approx$</td>
</tr>
<tr>
<td><code>\subseteq</code></td>
<td style="text-align:center">$\subseteq$</td>
<td><code>\supseteq</code></td>
<td style="text-align:center">$\supseteq$</td>
<td><code>\cong</code></td>
<td style="text-align:center">$\cong$</td>
<td><code>\doteq</code></td>
<td style="text-align:center">$\doteq$</td>
</tr>
<tr>
<td><code>\setminus</code></td>
<td style="text-align:center">$\setminus$</td>
<td><code>\mid</code></td>
<td style="text-align:center">$\mid$</td>
<td><code>\ll</code></td>
<td style="text-align:center">$\ll$</td>
<td><code>\gg</code></td>
<td style="text-align:center">$\gg$</td>
</tr>
<tr>
<td><code>\parallel</code></td>
<td style="text-align:center">$\parallel$</td>
<td><code>\Join</code></td>
<td style="text-align:center">$\Join$</td>
<td><code>\in</code></td>
<td style="text-align:center">$\in$</td>
<td><code>\notin</code></td>
<td style="text-align:center">$\notin$</td>
</tr>
<tr>
<td><code>\propto</code></td>
<td style="text-align:center">$\propto$</td>
<td><code>\neg</code></td>
<td style="text-align:center">$\neg$</td>
<td><code>\ldots</code></td>
<td style="text-align:center">$\ldots$</td>
<td><code>\cdots</code></td>
<td style="text-align:center">$\cdots$</td>
</tr>
<tr>
<td><code>\forall</code></td>
<td style="text-align:center">$\forall$</td>
<td><code>\exists</code></td>
<td style="text-align:center">$\exists$</td>
<td><code>\vdots</code></td>
<td style="text-align:center">$\vdots$</td>
<td><code>\ddots</code></td>
<td style="text-align:center">$\ddots$</td>
</tr>
<tr>
<td><code>\aleph</code></td>
<td style="text-align:center">$\aleph$</td>
<td><code>\nabla</code></td>
<td style="text-align:center">$\nabla$</td>
<td><code>\imath</code></td>
<td style="text-align:center">$\imath$</td>
<td><code>\jmath</code></td>
<td style="text-align:center">$\jmath$</td>
</tr>
<tr>
<td><code>\ell</code></td>
<td style="text-align:center">$\ell$</td>
<td><code>\partial</code></td>
<td style="text-align:center">$\partial$</td>
<td><code>\int</code></td>
<td style="text-align:center">$\int$</td>
<td><code>\oint</code></td>
<td style="text-align:center">$\oint$</td>
</tr>
<tr>
<td><code>\uplus</code></td>
<td style="text-align:center">$\uplus$</td>
<td><code>\biguplus</code></td>
<td style="text-align:center">$\biguplus$</td>
<td>/</td>
<td style="text-align:center">/</td>
<td>/</td>
<td style="text-align:center">/</td>
</tr>
</tbody>
</table>
</div>
<h3 id="2-2-箭头类"><a href="#2-2-箭头类" class="headerlink" title="2.2 箭头类"></a>2.2 箭头类</h3><div class="table-container">
<table>
<thead>
<tr>
<th>Name</th>
<th style="text-align:center">Display</th>
<th>Name</th>
<th style="text-align:center">Display</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>\triangleleft</code></td>
<td style="text-align:center">$\triangleleft$</td>
<td><code>\triangleright</code></td>
<td style="text-align:center">$\triangleright$</td>
</tr>
<tr>
<td><code>\bigtriangleup</code></td>
<td style="text-align:center">$\bigtriangleup$</td>
<td><code>\bigtriangledown</code></td>
<td style="text-align:center">$\bigtriangledown$</td>
</tr>
<tr>
<td><code>\uparrow</code></td>
<td style="text-align:center">$\uparrow$</td>
<td><code>\downarrow</code></td>
<td style="text-align:center">$\downarrow$</td>
</tr>
<tr>
<td><code>\leftarrow</code></td>
<td style="text-align:center">$\leftarrow$</td>
<td><code>\rightarrow</code></td>
<td style="text-align:center">$\rightarrow$</td>
</tr>
<tr>
<td><code>\Leftarrow</code></td>
<td style="text-align:center">$\Leftarrow$</td>
<td><code>\Rightarrow</code></td>
<td style="text-align:center">$\Rightarrow$</td>
</tr>
<tr>
<td><code>\longleftarrow</code></td>
<td style="text-align:center">$\longleftarrow$</td>
<td><code>\longrightarrow</code></td>
<td style="text-align:center">$\longrightarrow$</td>
</tr>
<tr>
<td><code>\Longleftarrow</code></td>
<td style="text-align:center">$\Longleftarrow$</td>
<td><code>\Longrightarrow</code></td>
<td style="text-align:center">$\Longrightarrow$</td>
</tr>
<tr>
<td><code>\leftrightarrow</code></td>
<td style="text-align:center">$\leftrightarrow$</td>
<td><code>\longleftrightarrow</code></td>
<td style="text-align:center">$\longleftrightarrow$</td>
</tr>
<tr>
<td><code>\Leftrightarrow</code></td>
<td style="text-align:center">$\Leftrightarrow$</td>
<td><code>\Longleftrightarrow</code></td>
<td style="text-align:center">$\Longleftrightarrow$</td>
</tr>
<tr>
<td><code>\leftharpoonup</code></td>
<td style="text-align:center">$\leftharpoonup$</td>
<td><code>\rightharpoonup</code></td>
<td style="text-align:center">$\rightharpoonup$</td>
</tr>
<tr>
<td><code>\leftharpoondown</code></td>
<td style="text-align:center">$\leftharpoondown$</td>
<td><code>\rightharpoondown</code></td>
<td style="text-align:center">$\rightharpoondown$</td>
</tr>
<tr>
<td><code>\rightleftharpoons</code></td>
<td style="text-align:center">$\rightleftharpoons$</td>
<td><code>\S</code></td>
<td style="text-align:center">$\S$</td>
</tr>
<tr>
<td><code>\nwarrow</code></td>
<td style="text-align:center">$\nwarrow$</td>
<td><code>\nearrow</code></td>
<td style="text-align:center">$\nearrow$</td>
</tr>
<tr>
<td><code>\swarrow</code></td>
<td style="text-align:center">$\swarrow$</td>
<td><code>\searrow</code></td>
<td style="text-align:center">$\searrow$</td>
</tr>
<tr>
<td><code>\triangle</code></td>
<td style="text-align:center">$\triangle$</td>
<td><code>\box</code></td>
<td style="text-align:center">$\Box$</td>
</tr>
<tr>
<td><code>\diamond</code></td>
<td style="text-align:center">$\diamond$</td>
<td><code>\diamondsuit</code></td>
<td style="text-align:center">$\diamondsuit$</td>
</tr>
<tr>
<td><code>\heartsuit</code></td>
<td style="text-align:center">$\heartsuit$</td>
<td><code>\clubsuit</code></td>
<td style="text-align:center">$\clubsuit$</td>
</tr>
<tr>
<td><code>\spadesuit</code></td>
<td style="text-align:center">$\spadesuit$</td>
<td>/</td>
<td style="text-align:center">/</td>
</tr>
</tbody>
</table>
</div>
<h2 id="3-公式语法"><a href="#3-公式语法" class="headerlink" title="3. 公式语法"></a>3. 公式语法</h2><h3 id="3-1-上下标"><a href="#3-1-上下标" class="headerlink" title="3.1 上下标"></a>3.1 上下标</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">语法</th>
<th style="text-align:center">输出</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>y = x_i^&#123;a_1^2&#125;</code></td>
<td style="text-align:center">$ y = x_i^{a_1^2}$</td>
</tr>
</tbody>
</table>
</div>
<h3 id="3-2-公式中插入文本（直接上）"><a href="#3-2-公式中插入文本（直接上）" class="headerlink" title="3.2 公式中插入文本（直接上）"></a>3.2 公式中插入文本（直接上）</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">语法</th>
<th style="text-align:center">输出</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>y = x^2 \; (二次函数)</code></td>
<td style="text-align:center">$ y = x^{2} \; (二次函数)$</td>
</tr>
</tbody>
</table>
</div>
<h3 id="3-3-公式中插入空格"><a href="#3-3-公式中插入空格" class="headerlink" title="3.3 公式中插入空格"></a>3.3 公式中插入空格</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">语法</th>
<th style="text-align:center">输出</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>ab</code></td>
<td style="text-align:center">$ab$</td>
</tr>
<tr>
<td style="text-align:center"><code>a \, b</code></td>
<td style="text-align:center">$a \, b$</td>
</tr>
<tr>
<td style="text-align:center"><code>a \; b</code></td>
<td style="text-align:center">$a \; b$</td>
</tr>
<tr>
<td style="text-align:center"><code>a \quad b</code></td>
<td style="text-align:center">$a \quad b$</td>
</tr>
<tr>
<td style="text-align:center"><code>a \qquad b</code></td>
<td style="text-align:center">$a \qquad b$</td>
</tr>
</tbody>
</table>
</div>
<h3 id="3-4-字母上方横线"><a href="#3-4-字母上方横线" class="headerlink" title="3.4 字母上方横线"></a>3.4 字母上方横线</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">语法</th>
<th style="text-align:center">输出</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>\overline&#123;ABC&#125;</code></td>
<td style="text-align:center">$\overline{ABC}$</td>
</tr>
<tr>
<td style="text-align:center"><code>\bar&#123;A&#125;</code></td>
<td style="text-align:center">$\bar{A}$</td>
</tr>
</tbody>
</table>
</div>
<h3 id="3-5-字母下方横线"><a href="#3-5-字母下方横线" class="headerlink" title="3.5 字母下方横线"></a>3.5 字母下方横线</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">语法</th>
<th style="text-align:center">输出</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>\underline&#123;ABC&#125;</code></td>
<td style="text-align:center">$\underline{ABC}$</td>
</tr>
</tbody>
</table>
</div>
<h3 id="3-6-字母上方波浪线"><a href="#3-6-字母上方波浪线" class="headerlink" title="3.6 字母上方波浪线"></a>3.6 字母上方波浪线</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">语法</th>
<th style="text-align:center">输出</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>\tilde&#123;\rho&#125;</code></td>
<td style="text-align:center">$\tilde{\rho}$</td>
</tr>
<tr>
<td style="text-align:center"><code>\widetilde&#123;A1B2C&#125;</code></td>
<td style="text-align:center">$\widetilde{A1B2C}$</td>
</tr>
</tbody>
</table>
</div>
<h3 id="3-7-字母上方尖号"><a href="#3-7-字母上方尖号" class="headerlink" title="3.7 字母上方尖号"></a>3.7 字母上方尖号</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">语法</th>
<th style="text-align:center">输出</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>\hat&#123;A&#125;</code></td>
<td style="text-align:center">$\hat{A}$</td>
</tr>
<tr>
<td style="text-align:center"><code>\widehat&#123;ABC&#125;</code></td>
<td style="text-align:center">$\widehat{ABC}$</td>
</tr>
</tbody>
</table>
</div>
<h3 id="3-8-字母上方箭头"><a href="#3-8-字母上方箭头" class="headerlink" title="3.8 字母上方箭头"></a>3.8 字母上方箭头</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">语法</th>
<th style="text-align:center">输出</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>\vec&#123;ab&#125;</code></td>
<td style="text-align:center">$\vec{ab}$</td>
</tr>
<tr>
<td style="text-align:center"><code>\overleftarrow&#123;ab&#125;</code></td>
<td style="text-align:center">$\overleftarrow{ab}$</td>
</tr>
<tr>
<td style="text-align:center"><code>\overrightarrow&#123;ab&#125;</code></td>
<td style="text-align:center">$\overrightarrow{ab}$</td>
</tr>
</tbody>
</table>
</div>
<h3 id="3-9-字母上方或下方花括号"><a href="#3-9-字母上方或下方花括号" class="headerlink" title="3.9 字母上方或下方花括号"></a>3.9 字母上方或下方花括号</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">语法</th>
<th style="text-align:center">输出</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>\overbrace&#123;1+2+3&#125;</code></td>
<td style="text-align:center">$\overbrace{1+2+3}$</td>
</tr>
<tr>
<td style="text-align:center"><code>\underbrace&#123;1+2+3&#125;</code></td>
<td style="text-align:center">$\underbrace{1+2+3}$</td>
</tr>
</tbody>
</table>
</div>
<h3 id="3-10-字母上方点号"><a href="#3-10-字母上方点号" class="headerlink" title="3.10 字母上方点号"></a>3.10 字母上方点号</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">语法</th>
<th style="text-align:center">输出</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>\dot&#123;A&#125;</code></td>
<td style="text-align:center">$\dot{A}$</td>
</tr>
<tr>
<td style="text-align:center"><code>\ddot&#123;ABC&#125;</code></td>
<td style="text-align:center">$\ddot{ABC}$</td>
</tr>
</tbody>
</table>
</div>
<h3 id="3-11-省略号"><a href="#3-11-省略号" class="headerlink" title="3.11 省略号"></a>3.11 省略号</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">语法</th>
<th style="text-align:center">输出</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>1,2,\dots</code></td>
<td style="text-align:center">$1,2,\dots$</td>
</tr>
<tr>
<td style="text-align:center"><code>1,2,\cdots</code></td>
<td style="text-align:center">$1,2,\cdots$</td>
</tr>
</tbody>
</table>
</div>
<h3 id="3-12-积分："><a href="#3-12-积分：" class="headerlink" title="3.12 积分："></a>3.12 积分：</h3><h4 id="3-12-1-基本形式"><a href="#3-12-1-基本形式" class="headerlink" title="3.12.1 基本形式"></a>3.12.1 基本形式</h4><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">语法</th>
<th style="text-align:center">输出</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>\int_&#123;-\infty&#125;^&#123;+\infty&#125; f(x) \mathrm&#123;d&#125;x</code></td>
<td style="text-align:center">$\int_{-\infty}^{+\infty} f(x) \mathrm{d}x$</td>
</tr>
<tr>
<td style="text-align:center"><code>\iint_&#123;-\infty&#125;^&#123;+\infty&#125; f(x,y) \mathrm&#123;d&#125;x \mathrm&#123;d&#125;y</code></td>
<td style="text-align:center">$\iint_{-\infty}^{+\infty} f(x,y) \mathrm{d}x \mathrm{d}y$</td>
</tr>
<tr>
<td style="text-align:center"><code>\oint_&#123;-\infty&#125;^&#123;+\infty&#125;</code></td>
<td style="text-align:center">$\oint_{-\infty}^{+\infty}$</td>
</tr>
</tbody>
</table>
</div>
<h4 id="3-12-2-行内模式"><a href="#3-12-2-行内模式" class="headerlink" title="3.12.2 行内模式"></a>3.12.2 行内模式</h4><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">形式</th>
<th style="text-align:center">语法</th>
<th style="text-align:center">输出</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>limits</code>模式</td>
<td style="text-align:center"><code>\int\limits_&#123;-\infty&#125;^&#123;+\infty&#125; f(x) \mathrm&#123;d&#125;x</code></td>
<td style="text-align:center">$\int\limits_{-\infty}^{+\infty} f(x) \mathrm{d}x$</td>
</tr>
<tr>
<td style="text-align:center"><code>displaystyle</code>模式</td>
<td style="text-align:center"><code>\displaystyle \int_&#123;-\infty&#125;^&#123;+\infty&#125; f(x) \mathrm&#123;d&#125;x</code></td>
<td style="text-align:center">$\displaystyle \int_{-\infty}^{+\infty} f(x) \mathrm{d}x$</td>
</tr>
</tbody>
</table>
</div>
<h3 id="3-13-求和"><a href="#3-13-求和" class="headerlink" title="3.13 求和"></a>3.13 求和</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">模式</th>
<th style="text-align:center">语法</th>
<th style="text-align:center">输出</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">普通</td>
<td style="text-align:center"><code>p = \sum_&#123;n=1&#125;^&#123;100&#125; a_n</code></td>
<td style="text-align:center">$ p = \sum_{n=1}^{100} a_n $</td>
</tr>
<tr>
<td style="text-align:center"><code>limits</code>模式</td>
<td style="text-align:center"><code>p = \sum\limits_&#123;n=1&#125;^&#123;100&#125; a_n</code></td>
<td style="text-align:center">$p = \sum\limits_{n=1}^{100} a_n$</td>
</tr>
<tr>
<td style="text-align:center"><code>display</code>模式</td>
<td style="text-align:center"><code>\displaystyle\sum_&#123;i=1&#125;^&#123;n&#125; i^2</code></td>
<td style="text-align:center">$\displaystyle\sum_{i=1}^{n} i^2$</td>
</tr>
</tbody>
</table>
</div>
<h3 id="3-14-求乘积"><a href="#3-14-求乘积" class="headerlink" title="3.14 求乘积"></a>3.14 求乘积</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">模式</th>
<th style="text-align:center">语法</th>
<th style="text-align:center">输出</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">普通</td>
<td style="text-align:center"><code>\prod_&#123;i=1&#125;^&#123;n&#125; a_i</code></td>
<td style="text-align:center">$\prod_{i=1}^{n} a_i$</td>
</tr>
<tr>
<td style="text-align:center"><code>limits</code>模式</td>
<td style="text-align:center"><code>\prod\limits_&#123;i=1&#125;^&#123;n&#125; a_i</code></td>
<td style="text-align:center">$\prod\limits_{i=1}^{n} a_i$</td>
</tr>
</tbody>
</table>
</div>
<h3 id="3-15-分数"><a href="#3-15-分数" class="headerlink" title="3.15 分数"></a>3.15 分数</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">语法</th>
<th style="text-align:center">输出</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>x_1,x_2 = \frac&#123;b^2 \pm 4ac&#125;&#123;2a&#125;</code></td>
<td style="text-align:center">$x_1,x_2 = \frac{b^2 \pm 4ac}{2a}$</td>
</tr>
</tbody>
</table>
</div>
<h3 id="3-16-根号"><a href="#3-16-根号" class="headerlink" title="3.16 根号"></a>3.16 根号</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">语法</th>
<th style="text-align:center">输出</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>r = \sqrt&#123;x^2+y^2&#125;</code></td>
<td style="text-align:center">$r = \sqrt{x^2+y^2}$</td>
</tr>
<tr>
<td style="text-align:center"><code>x^&#123;2/3&#125; = \sqrt[3]&#123;x^2&#125;</code></td>
<td style="text-align:center">$x^{2/3} = \sqrt[3]{x^2}$</td>
</tr>
</tbody>
</table>
</div>
<h2 id="4-方程组"><a href="#4-方程组" class="headerlink" title="4. 方程组"></a>4. 方程组</h2><h3 id="4-1-左侧花括号"><a href="#4-1-左侧花括号" class="headerlink" title="4.1 左侧花括号"></a>4.1 左侧花括号</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\begin&#123;equation&#125;</span><br><span class="line">\left\&#123; </span><br><span class="line">\begin&#123;aligned&#125;</span><br><span class="line">\min \quad&amp;&#123;f=a-b&#125;\\</span><br><span class="line">&#123;s.t.&#125;\quad &amp;&#123;a =b(x), \quad x\in [0,L] &#125; \\</span><br><span class="line">(c+d)(e+f)=e \\</span><br><span class="line">(df+cg)=0 \\</span><br><span class="line">(adv-ert)(e+f)=e</span><br><span class="line">\end&#123;aligned&#125; \right.</span><br><span class="line">\end&#123;equation&#125;</span><br></pre></td></tr></table></figure>
<p>  注意：在 <code>markdown</code> 环境下，某些特殊字符，如<code>\</code>,<code>*</code>等，会首先被 <code>markdown</code> 语法转义，然后再被 <code>Latex</code> 转义。因此有时候 ‘{‘需要写作’\{‘，’*‘需要写作’\*’，’\‘需要写作’\\‘等，视不同的解释环境而定。  </p>
<p>  <strong>注</strong>：如果各个方程需要在某个字符处对齐（如等号对齐），只需在所有要对齐的字符前加上 <code>&amp;</code> 符号。如果不需要公式编号，只需在宏包名称后加上 <code>*</code> 号。</p>
<script type="math/tex; mode=display">
\begin{equation}
\left\{ 
\begin{aligned}
\min \quad&{f=a-b}\\
{s.t.}\quad &{a =b(x), \quad x\in [0,L] } \\
(c+d)(e+f)=e \\
(df+cg)=0 \\
(adv-ert)(e+f)=e
\end{aligned} \right .
\end{equation}</script><h2 id="4-2-分情况讨论方程式"><a href="#4-2-分情况讨论方程式" class="headerlink" title="4.2 分情况讨论方程式"></a>4.2 分情况讨论方程式</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">f(x) =</span><br><span class="line">\begin&#123;cases&#125;</span><br><span class="line">x^2 \qquad &amp; a \gt 0 \\</span><br><span class="line">e^x \qquad &amp; a \le 0</span><br><span class="line">\end&#123;cases&#125;</span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">
f(x) = \begin{cases}
x^2 \qquad & a \gt 0 \\
e^x \qquad & a \le 0
\end{cases}</script><p><strong>THE END</strong> 感谢您的阅读~</p>
<p><del>P.S. 你可以不用理会下面这个版权方框</del></p>
]]></content>
      <categories>
        <category>编程</category>
        <category>Markdown</category>
        <category>LaTex</category>
      </categories>
      <tags>
        <tag>Maths</tag>
        <tag>Markdown</tag>
        <tag>LaTex</tag>
      </tags>
  </entry>
  <entry>
    <title>那些有趣的Linux命令，你都试过几个？</title>
    <url>/2023/01/04/interesting-ubuntu-commands/</url>
    <content><![CDATA[<p>OK那么既然我们安装好了<code>WSL</code>和<code>Ubuntu</code>，也成功地打开了它的<code>Gnome</code>图形界面，肯定要来体验一下，这一篇文章也是在<code>WSL</code>里面写的。不过在干活之前我也是找了一些有意思的命令，来熟悉一下<code>Ubuntu</code>的环境，比如：</p>
<p><img data-src="https://s1.ax1x.com/2023/01/04/pSFYEjA.png" alt=""></p>
<p><strong>注：除非特殊提醒，文中提到的包都可以使用<code>apt</code>安装。</strong></p>
<span id="more"></span>
<h2 id="1-字符-画-相关"><a href="#1-字符-画-相关" class="headerlink" title="1. 字符(画)相关"></a>1. 字符(画)相关</h2><h3 id="1-1-cmatrix与黑客帝国"><a href="#1-1-cmatrix与黑客帝国" class="headerlink" title="1.1 cmatrix与黑客帝国"></a>1.1 <code>cmatrix</code>与黑客帝国</h3><p>我想，各位如果喜欢科幻的话，一定对《黑客帝国》里的字符雨并不陌生。但其实，只需要一个指令，就可以让你的<code>terminal</code>里下起字符雨。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install cmatrix</span><br><span class="line">cmatrix</span><br></pre></td></tr></table></figure>
<h3 id="1-2-火！火！火！"><a href="#1-2-火！火！火！" class="headerlink" title="1.2 火！火！火！"></a>1.2 火！火！火！</h3><p>让自己的终端燃起来……</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install libaa-bin</span><br><span class="line">aafire</span><br></pre></td></tr></table></figure>
<p>这个指令会新建一个窗口，它就会以字符画的方式“燃”起来。</p>
<p><img data-src="https://s1.ax1x.com/2023/01/04/pSFYk1H.png" alt=""></p>
<h3 id="1-3-当你把ls打反"><a href="#1-3-当你把ls打反" class="headerlink" title="1.3 当你把ls打反"></a>1.3 当你把<code>ls</code>打反</h3><p>手速过快是一件很痛苦的事情，尤其当你把<code>ls</code>打成了<del>死了</del><code>sl</code>。<code>Stream Locomotive</code>这个命令会在你的屏幕上画一列火车（且不能用<kbd>Ctrl+C</kbd>强制停止）</p>
<p><img data-src="https://s1.ax1x.com/2023/01/04/pSFYtH0.png" alt=""></p>
<p>先用<code>apt</code>安装，然后会有额外的一步，把<code>/usr/games</code>这个路径加到<code>$PATH</code>里面去，先复制这段代码:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;<span class="variable">$PATH</span>:/usr/games&quot;</span></span><br></pre></td></tr></table></figure>
<p>然后</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gedit ~/.bashrc</span><br></pre></td></tr></table></figure>
<p>把刚才那行粘贴到文件末尾，然后</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>
<p>刷新一下，就可以使用<code>sl</code>了。</p>
<p><em>不过，如果你经常打错的话，建议还是不要安装，否则……</em></p>
<h3 id="1-4-彩色字生成器toilet"><a href="#1-4-彩色字生成器toilet" class="headerlink" title="1.4 彩色字生成器toilet"></a>1.4 彩色字生成器<code>toilet</code></h3><p>需要显示一个大标题吗？<code>toilet</code>可以满足你的需求：</p>
<p><img data-src="https://s1.ax1x.com/2023/01/04/pSFYeBt.png" alt=""></p>
<h3 id="1-5-牛牛也会说话"><a href="#1-5-牛牛也会说话" class="headerlink" title="1.5 牛牛也会说话"></a>1.5 牛牛也会说话</h3><p><img data-src="https://s1.ax1x.com/2023/01/04/pSFYCtO.png" alt=""></p>
<p>嗯……这头牛是怎么学会说话的？<code>cowsay</code>这个指令教了很多动物说话，比如：</p>
<p><img data-src="https://s1.ax1x.com/2023/01/04/pSFYPhD.png" alt=""></p>
<p>这个还有高级版本<code>xcowsay</code>：</p>
<p><img data-src="https://s1.ax1x.com/2023/01/04/pSFYmHP.png" alt=""></p>
<h3 id="1-6-每日一句fortune"><a href="#1-6-每日一句fortune" class="headerlink" title="1.6 每日一句fortune"></a>1.6 每日一句<code>fortune</code></h3><p>这个有点像日签，每次执行<code>fortune</code>都会跳出来一句名言或鸡汤：</p>
<p><img data-src="https://s1.ax1x.com/2023/01/04/pSFY9AK.png" alt=""></p>
<p>你也可以把它和<code>cowsay</code>一起用，就会变成牛牛日签~</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fortune | cowsay</span><br></pre></td></tr></table></figure>
<h3 id="1-7-彩色的牛牛？！"><a href="#1-7-彩色的牛牛？！" class="headerlink" title="1.7 彩色的牛牛？！"></a>1.7 彩色的牛牛？！</h3><p>在<code>Ubuntu</code>里面有个命令叫<code>lolcat</code>，可以把任何输出变成彩虹色的：</p>
<p><img data-src="https://s1.ax1x.com/2023/01/04/pSFYZnI.png" alt=""></p>
<p>然后搭配之前几个命令，你就可以拥有……彩虹色的牛牛日签</p>
<h3 id="1-8-循·环·输·出"><a href="#1-8-循·环·输·出" class="headerlink" title="1.8 循·环·输·出"></a>1.8 循·环·输·出</h3><p>这是一个自带的系统命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yes Hello, world!</span><br></pre></td></tr></table></figure>
<p>就会不停的打印<code>Hello, world!</code>。如果搭配<code>lolcat</code>使用……</p>
<p><img data-src="https://s1.ax1x.com/2023/01/04/pSFYuAf.png" alt=""></p>
<h3 id="1-9-超级牛力"><a href="#1-9-超级牛力" class="headerlink" title="1.9 超级牛力"></a>1.9 超级牛力</h3><p>这个是<code>apt</code>的老梗了。<code>apt moo</code>这个彩蛋，自己去揭晓~</p>
<hr>
<h2 id="2-功能性指令"><a href="#2-功能性指令" class="headerlink" title="2. 功能性指令"></a>2. 功能性指令</h2><p>说了这么多看似没用的命令，也顺带说一些有用的指令，让你平时也能用上它们：</p>
<h3 id="2-1-日历"><a href="#2-1-日历" class="headerlink" title="2.1 日历"></a>2.1 日历</h3><p><code>Ubuntu</code>是有日历的，但是如果你想看很久之前或很久之后的，需要点很多次。这个时候自带的<code>cal</code>命令就能派上用场，比如：</p>
<p><img data-src="https://s1.ax1x.com/2023/01/04/pSFBs7d.png" alt=""></p>
<h3 id="2-2-质因数分解"><a href="#2-2-质因数分解" class="headerlink" title="2.2 质因数分解"></a>2.2 质因数分解</h3><p>这个的话对我这种学生党还是有那么一点用的，比如像非常大的数，很快就能分解开：</p>
<p><img data-src="https://s1.ax1x.com/2023/01/04/pSFB6AA.png" alt=""></p>
<h3 id="2-3-系统信息"><a href="#2-3-系统信息" class="headerlink" title="2.3 系统信息"></a>2.3 系统信息</h3><p>安装了<code>screenfetch</code>后，就可以很方便的展示自己的系统信息了，方便技术人员进行一些工作：</p>
<p><img data-src="https://s1.ax1x.com/2023/01/04/pSFBght.png" alt=""></p>
<h3 id="2-4-从删库到跑路"><a href="#2-4-从删库到跑路" class="headerlink" title="2.4 从删库到跑路"></a>2.4 从删库到跑路</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo rm -rf /*</span><br></pre></td></tr></table></figure>
<p>千万不要轻易尝试……不用我多说</p>
<hr>
<h2 id="3-和鼠标有关的有趣指令"><a href="#3-和鼠标有关的有趣指令" class="headerlink" title="3. 和鼠标有关的有趣指令"></a>3. 和鼠标有关的有趣指令</h2><h3 id="3-1-追随鼠标的小猫oneko"><a href="#3-1-追随鼠标的小猫oneko" class="headerlink" title="3.1 追随鼠标的小猫oneko"></a>3.1 追随鼠标的小猫<code>oneko</code></h3><p>无聊的时候，就让小猫陪你玩一会儿：</p>
<p><img data-src="https://s1.ax1x.com/2023/01/04/pSFBctI.png" alt=""></p>
<p>小猫会一张尝试跑到你的鼠标边，然后坐下来。你再动，它又会跑起来，乐此不疲。</p>
<h3 id="3-2-盯着鼠标看的眼睛"><a href="#3-2-盯着鼠标看的眼睛" class="headerlink" title="3.2 盯着鼠标看的眼睛"></a>3.2 盯着鼠标看的眼睛</h3><p><img data-src="https://s1.ax1x.com/2023/01/04/pSFBR9P.png" alt=""></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install x11-apps</span><br></pre></td></tr></table></figure>
<p>安装之后就可以用<code>xeyes</code>来唤起一双盯着鼠标看的大眼睛了。</p>
<hr>
<p>这么一盘点，发现<code>Ubuntu</code>的有趣命令比<code>Windows</code>多多了。此外在写作过程中我也学会了用<code>gnome-screenshot -i</code>来截图，可谓是一举多得。</p>
<p><strong>参考资料：</strong></p>
<p><a href="https://www.techug.com/post/29-funny-linux-tips/">28条超有趣的Linux命令 | 程序师 - 程序员、编程语言、软件开发、编程技术</a></p>
<p><strong>THE END</strong>感谢您的阅读~</p>
]]></content>
      <categories>
        <category>编程</category>
        <category>后端</category>
        <category>WSL</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>Backend</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>生命游戏：在不确定中寻找确定</title>
    <url>/2023/01/08/life-game-in-python/</url>
    <content><![CDATA[<p>“在不确定中寻找确定”，这是我的语文老师在2022年2月刚开始转线上课时对我们的一句嘱咐。如今，疫情尘埃落定，也据说再也不会有网课了。也许，这就是生命——不断前行、变幻莫测。</p>
<p>但这两个词，又让我想起了另一种“生命”——康威生命游戏。这两天，灵机一动，我用<code>Python</code>实现了这“零玩家游戏”。</p>
<span id="more"></span>
<h2 id="1-生命游戏——变化与生死"><a href="#1-生命游戏——变化与生死" class="headerlink" title="1. 生命游戏——变化与生死"></a>1. 生命游戏——变化与生死</h2><p>最早接触到生命游戏是在为<a href="../../../../2023/01/06/ramble-on-cryptography/">漫谈密码学</a>这个项目找资料时，看到一个视频<a href="https://www.bilibili.com/video/BV1464y1k7Ya/">数学有一个致命的缺陷</a>——就是在那篇文章中的最后一个视频。这个视频的开头提到了康威和他的生命游戏。视频里说，虽然生命游戏只有这么短短几条规则，却可以无限地繁衍下去，没有人知道是会无限进行、陷入循环还是直接停止。这充满“变化与生死”的“零玩家”游戏的规则如下：</p>
<p>首先，我们有一个网格，理论上无穷大，这里我们就<code>20x20</code>。这个网格的每一个格子代表一个细胞，并拥有两种状态——白色为生，黑色为死。网格上细胞的状态是随机生成的，之后会按照一个特定的判断方法来决定这个细胞是生是死：</p>
<ol>
<li><p>当这个细胞为死，如果在自己周围一圈正好有3个活细胞，自己在下一次更新时就会变为活——模拟繁衍</p>
</li>
<li><p>当这个细胞为活：</p>
<ol>
<li><p>如果周围有多于3个活细胞，下一轮就会死——模拟生命过多</p>
</li>
<li><p>如果周围刚好有2或3个活细胞，下一轮还是为活</p>
</li>
<li><p>如果周围少于2个活细胞，下一轮就会死——模拟生命过少</p>
</li>
</ol>
</li>
</ol>
<p>总结出来就是这样：</p>
<ol>
<li><p>如果在自己周围一圈正好有3个活细胞，下一轮一定为活</p>
</li>
<li><p>如果周围刚好有2个活细胞，下一轮保持原样</p>
</li>
<li><p>其他时候，下一轮为死。</p>
</li>
</ol>
<p>遵循这个规则，网格上的细胞就可以开始繁殖了。</p>
<p><img data-src="https://s1.ax1x.com/2023/01/08/pSZV6ij.png" alt=""></p>
<hr>
<h2 id="2-生命游戏——规则与破坏"><a href="#2-生命游戏——规则与破坏" class="headerlink" title="2. 生命游戏——规则与破坏"></a>2. 生命游戏——规则与破坏</h2><h3 id="2-1-静物"><a href="#2-1-静物" class="headerlink" title="2.1 静物"></a>2.1 静物</h3><p>多运行几轮之后，你会发现，在生命游戏中，有那么几种结构，只要没有外力破坏，就可以保持稳定。例如：</p>
<p><img data-src="https://s1.ax1x.com/2023/01/08/pSZVcJs.png" alt=""></p>
<p>人们根据其形状，给其中一些结构起了名字，例如<code>2x2</code>方块等：</p>
<p><img data-src="https://s1.ax1x.com/2023/01/08/pSZV2zq.png" alt=""></p>
<h3 id="2-2-振荡器"><a href="#2-2-振荡器" class="headerlink" title="2.2 振荡器"></a>2.2 振荡器</h3><p>还有一部分结构，虽然不稳定，但它们的变化有一定的规律。比如说：一个长度为3的横——“闪光灯”：</p>
<p><img data-src="https://s1.ax1x.com/2023/01/08/pSZVsoQ.png" alt=""></p>
<h3 id="2-3-飞船"><a href="#2-3-飞船" class="headerlink" title="2.3 飞船"></a>2.3 飞船</h3><p>此外，最有意思的一种结构，叫做飞船。它们的变化也有规律，但每完成一个周期，它们都会定向移动一段距离。其中运动最快的周期为4，叫做滑翔机：</p>
<p><img data-src="https://s1.ax1x.com/2023/01/08/pSZVWQ0.png" alt=""></p>
<hr>
<h2 id="3-Python模拟生命游戏"><a href="#3-Python模拟生命游戏" class="headerlink" title="3. Python模拟生命游戏"></a>3. <code>Python</code>模拟生命游戏</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"><span class="keyword">import</span> random, time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inRange</span>(<span class="params">n, start, end = <span class="number">0</span></span>):</span></span><br><span class="line">    <span class="keyword">return</span> start &lt;= n &lt;= end <span class="keyword">if</span> end &gt;= start <span class="keyword">else</span> end &lt;= n &lt;= start</span><br><span class="line"></span><br><span class="line">root = tk.Tk()</span><br><span class="line">root.title(<span class="string">&quot;Life&quot;</span>)</span><br><span class="line">root.geometry(<span class="string">&quot;600x600&quot;</span>)</span><br><span class="line">canvas = tk.Canvas(root,width=<span class="number">600</span>,height=<span class="number">600</span>,bg=<span class="string">&#x27;black&#x27;</span>)</span><br><span class="line">canvas.pack()</span><br></pre></td></tr></table></figure>
<p>首先我们进行一个初始化，创建<code>root</code>和<code>canvas</code>。这里还用到了以前定义过的<code>inRange</code>函数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Game</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        life_list = []</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">60</span>):</span><br><span class="line">            newList = []</span><br><span class="line">            <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">60</span>):</span><br><span class="line">                newList.append(random.choice([<span class="number">0</span>,<span class="number">1</span>]))</span><br><span class="line">            life_list.append(newList)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        new_life_list = []</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">60</span>):</span><br><span class="line">            newList = []</span><br><span class="line">            <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">60</span>):</span><br><span class="line">                newList.append(<span class="number">0</span>)</span><br><span class="line">            new_life_list.append(newList)</span><br><span class="line">        self.running = <span class="number">1</span></span><br><span class="line">        self.root = root</span><br><span class="line">        self.canvas = canvas</span><br><span class="line">        self.life_list = life_list</span><br><span class="line">        self.new_life_list = new_life_list</span><br><span class="line"></span><br><span class="line">        self.canvas.bind(<span class="string">&quot;&lt;Button-1&gt;&quot;</span>,self.mouseUpdate)</span><br></pre></td></tr></table></figure>
<p>然后的话我们定义一个<code>Game</code>类，这里面有两个二维数组<code>life_list</code>和<code>new_life_list</code>，以便我们后面计算。为了不把原先的图和新计算的图搞混，我们需要两个列表来完成计算。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">59</span>):</span><br><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">59</span>):</span><br><span class="line">    <span class="keyword">if</span> self.life_list[x][y]:</span><br><span class="line">        self.canvas.create_rectangle(<span class="number">10</span>*x,<span class="number">10</span>*y,<span class="number">10</span>*x+<span class="number">10</span>,<span class="number">10</span>*y+<span class="number">10</span>,fill=<span class="string">&quot;white&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        self.canvas.create_rectangle(<span class="number">10</span>*x,<span class="number">10</span>*y,<span class="number">10</span>*x+<span class="number">10</span>,<span class="number">10</span>*y+<span class="number">10</span>,fill=<span class="string">&quot;black&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>这个是一个绘制程序。为了避免边界情况，我们不绘制/计算边界。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">59</span>):</span><br><span class="line">            <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">59</span>):</span><br><span class="line">                around = self.life_list[x-<span class="number">1</span>][y-<span class="number">1</span>]+self.life_list[x-<span class="number">1</span>][y]+self.life_list[x-<span class="number">1</span>][y+<span class="number">1</span>]+self.life_list[x][y-<span class="number">1</span>]+self.life_list[x][y+<span class="number">1</span>]+self.life_list[x+<span class="number">1</span>][y-<span class="number">1</span>]+self.life_list[x+<span class="number">1</span>][y]+self.life_list[x+<span class="number">1</span>][y+<span class="number">1</span>]</span><br><span class="line">                <span class="keyword">if</span> around == <span class="number">3</span>:</span><br><span class="line">                    self.new_life_list[x][y] = <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> around == <span class="number">2</span>:</span><br><span class="line">                    self.new_life_list[x][y] = self.life_list[x][y]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    self.new_life_list[x][y] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">59</span>):</span><br><span class="line">            <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">59</span>):</span><br><span class="line">                <span class="keyword">if</span> self.new_life_list[x][y]:</span><br><span class="line">                    self.canvas.create_rectangle(<span class="number">10</span>*x,<span class="number">10</span>*y,<span class="number">10</span>*x+<span class="number">10</span>,<span class="number">10</span>*y+<span class="number">10</span>,fill=<span class="string">&quot;white&quot;</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    self.canvas.create_rectangle(<span class="number">10</span>*x,<span class="number">10</span>*y,<span class="number">10</span>*x+<span class="number">10</span>,<span class="number">10</span>*y+<span class="number">10</span>,fill=<span class="string">&quot;black&quot;</span>)</span><br><span class="line">        self.life_list = self.new_life_list</span><br><span class="line">        self.new_life_list = []</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">60</span>):</span><br><span class="line">            newList = []</span><br><span class="line">            <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">60</span>):</span><br><span class="line">                newList.append(<span class="number">0</span>)</span><br><span class="line">            self.new_life_list.append(newList)</span><br></pre></td></tr></table></figure>
<p>随后的话这是一个更新函数，按照我们已定义的规则<code>Birth 3 / Survive 23</code>（对之前规则的一种官方缩写）来计算新一轮<code>life_list</code>。因为我们是用1和0来带表生和死，所以我们可以通过计算8个格子的和来求周围格子的情况。</p>
<p>然后我们重新绘制，并重置<code>new_life_list</code>，来为下一次计算做准备。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mouseUpdate</span>(<span class="params">self,event</span>):</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">59</span>):</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">59</span>):</span><br><span class="line">        around = self.life_list[x-<span class="number">1</span>][y-<span class="number">1</span>]+self.life_list[x-<span class="number">1</span>][y]+self.life_list[x-<span class="number">1</span>][y+<span class="number">1</span>]+self.life_list[x][y-<span class="number">1</span>]+self.life_list[x][y+<span class="number">1</span>]+self.life_list[x+<span class="number">1</span>][y-<span class="number">1</span>]+self.life_list[x+<span class="number">1</span>][y]+self.life_list[x+<span class="number">1</span>][y+<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> around == <span class="number">3</span>:</span><br><span class="line">            self.new_life_list[x][y] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> around == <span class="number">2</span>:</span><br><span class="line">            self.new_life_list[x][y] = self.life_list[x][y]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.new_life_list[x][y] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">cellX = <span class="built_in">int</span>(event.x / <span class="number">10</span>)</span><br><span class="line">cellY = <span class="built_in">int</span>(event.y / <span class="number">10</span>)</span><br><span class="line"><span class="keyword">if</span> inRange(cellX, <span class="number">1</span>, <span class="number">59</span>) <span class="keyword">and</span> inRange(cellY, <span class="number">1</span>, <span class="number">59</span>):</span><br><span class="line">    self.new_life_list[cellX][cellY] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">59</span>):</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">59</span>):</span><br><span class="line">        <span class="keyword">if</span> self.new_life_list[x][y]:</span><br><span class="line">            self.canvas.create_rectangle(<span class="number">10</span>*x,<span class="number">10</span>*y,<span class="number">10</span>*x+<span class="number">10</span>,<span class="number">10</span>*y+<span class="number">10</span>,fill=<span class="string">&quot;white&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.canvas.create_rectangle(<span class="number">10</span>*x,<span class="number">10</span>*y,<span class="number">10</span>*x+<span class="number">10</span>,<span class="number">10</span>*y+<span class="number">10</span>,fill=<span class="string">&quot;black&quot;</span>)</span><br><span class="line">self.life_list = self.new_life_list</span><br><span class="line">self.new_life_list = []</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">60</span>):</span><br><span class="line">    newList = []</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">60</span>):</span><br><span class="line">        newList.append(<span class="number">0</span>)</span><br><span class="line">    self.new_life_list.append(newList)</span><br></pre></td></tr></table></figure>
<p>这里是对鼠标事件的支持。因为我们在<code>__init__()</code>中绑定过鼠标左键，所以点击时我们能知道鼠标的坐标，除以10就是对应的格子——这里还是避免掉边界情况。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mainloop</span>(<span class="params">self</span>):</span></span><br><span class="line">self.update()</span><br><span class="line">self.root.update()</span><br><span class="line">time.sleep(<span class="number">0.1</span>)</span><br><span class="line">self.canvas.delete(<span class="string">&quot;all&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>然后调用<code>update</code>函数，更新页面，等待0.1秒后清除页面（释放内存，提高运行速度）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">g = Game()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">allStop</span>():</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        g.root.destroy()</span><br><span class="line">        btnRoot.destroy()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        btnRoot.destroy()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nonstop</span>():</span></span><br><span class="line">    g.__init__()</span><br><span class="line">    g.running = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> g.running:</span><br><span class="line">        g.mainloop()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">stop</span>():</span></span><br><span class="line">    g.running = <span class="number">0</span></span><br><span class="line">    g.update()</span><br><span class="line"></span><br><span class="line">btnRoot = tk.Tk()</span><br><span class="line">btn1 = tk.Button(btnRoot, text=<span class="string">&quot;Start Random Nonstop&quot;</span>,command=nonstop)</span><br><span class="line">btn1.pack()</span><br><span class="line">btn2 = tk.Button(btnRoot, text=<span class="string">&quot;Stop Random Nonstop&quot;</span>,command=stop)</span><br><span class="line">btn2.pack()</span><br><span class="line">btnRoot.protocol(<span class="string">&quot;WM_DELETE_WINDOW&quot;</span>, allStop)</span><br><span class="line">btnRoot.mainloop()</span><br></pre></td></tr></table></figure>
<p>最后就是绘制一些功能按钮、定义功能函数了。<code>nonstop()</code>函数中重复调用<code>g.__init__()</code>是为了随机生成新的图像。</p>
<p>完整代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"><span class="keyword">import</span> random, time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inRange</span>(<span class="params">n, start, end = <span class="number">0</span></span>):</span></span><br><span class="line">    <span class="keyword">return</span> start &lt;= n &lt;= end <span class="keyword">if</span> end &gt;= start <span class="keyword">else</span> end &lt;= n &lt;= start</span><br><span class="line"></span><br><span class="line">root = tk.Tk()</span><br><span class="line">root.title(<span class="string">&quot;Life&quot;</span>)</span><br><span class="line">root.geometry(<span class="string">&quot;600x600&quot;</span>)</span><br><span class="line">canvas = tk.Canvas(root,width=<span class="number">600</span>,height=<span class="number">600</span>,bg=<span class="string">&#x27;black&#x27;</span>)</span><br><span class="line">canvas.pack()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Game</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        life_list = []</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">60</span>):</span><br><span class="line">            newList = []</span><br><span class="line">            <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">60</span>):</span><br><span class="line">                newList.append(random.choice([<span class="number">0</span>,<span class="number">1</span>]))</span><br><span class="line">            life_list.append(newList)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        new_life_list = []</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">60</span>):</span><br><span class="line">            newList = []</span><br><span class="line">            <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">60</span>):</span><br><span class="line">                newList.append(<span class="number">0</span>)</span><br><span class="line">            new_life_list.append(newList)</span><br><span class="line">        self.running = <span class="number">1</span></span><br><span class="line">        self.root = root</span><br><span class="line">        self.canvas = canvas</span><br><span class="line">        self.life_list = life_list</span><br><span class="line">        self.new_life_list = new_life_list</span><br><span class="line"></span><br><span class="line">        self.canvas.bind(<span class="string">&quot;&lt;Button-1&gt;&quot;</span>,self.mouseUpdate)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">59</span>):</span><br><span class="line">            <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">59</span>):</span><br><span class="line">                <span class="keyword">if</span> self.life_list[x][y]:</span><br><span class="line">                    self.canvas.create_rectangle(<span class="number">10</span>*x,<span class="number">10</span>*y,<span class="number">10</span>*x+<span class="number">10</span>,<span class="number">10</span>*y+<span class="number">10</span>,fill=<span class="string">&quot;white&quot;</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    self.canvas.create_rectangle(<span class="number">10</span>*x,<span class="number">10</span>*y,<span class="number">10</span>*x+<span class="number">10</span>,<span class="number">10</span>*y+<span class="number">10</span>,fill=<span class="string">&quot;black&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mouseUpdate</span>(<span class="params">self,event</span>):</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">59</span>):</span><br><span class="line">            <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">59</span>):</span><br><span class="line">                around = self.life_list[x-<span class="number">1</span>][y-<span class="number">1</span>]+self.life_list[x-<span class="number">1</span>][y]+self.life_list[x-<span class="number">1</span>][y+<span class="number">1</span>]+self.life_list[x][y-<span class="number">1</span>]+self.life_list[x][y+<span class="number">1</span>]+self.life_list[x+<span class="number">1</span>][y-<span class="number">1</span>]+self.life_list[x+<span class="number">1</span>][y]+self.life_list[x+<span class="number">1</span>][y+<span class="number">1</span>]</span><br><span class="line">                <span class="keyword">if</span> around == <span class="number">3</span>:</span><br><span class="line">                    self.new_life_list[x][y] = <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> around == <span class="number">2</span>:</span><br><span class="line">                    self.new_life_list[x][y] = self.life_list[x][y]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    self.new_life_list[x][y] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        cellX = <span class="built_in">int</span>(event.x / <span class="number">10</span>)</span><br><span class="line">        cellY = <span class="built_in">int</span>(event.y / <span class="number">10</span>)</span><br><span class="line">        <span class="keyword">if</span> inRange(cellX, <span class="number">1</span>, <span class="number">59</span>) <span class="keyword">and</span> inRange(cellY, <span class="number">1</span>, <span class="number">59</span>):</span><br><span class="line">            self.new_life_list[cellX][cellY] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">59</span>):</span><br><span class="line">            <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">59</span>):</span><br><span class="line">                <span class="keyword">if</span> self.new_life_list[x][y]:</span><br><span class="line">                    self.canvas.create_rectangle(<span class="number">10</span>*x,<span class="number">10</span>*y,<span class="number">10</span>*x+<span class="number">10</span>,<span class="number">10</span>*y+<span class="number">10</span>,fill=<span class="string">&quot;white&quot;</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    self.canvas.create_rectangle(<span class="number">10</span>*x,<span class="number">10</span>*y,<span class="number">10</span>*x+<span class="number">10</span>,<span class="number">10</span>*y+<span class="number">10</span>,fill=<span class="string">&quot;black&quot;</span>)</span><br><span class="line">        self.life_list = self.new_life_list</span><br><span class="line">        self.new_life_list = []</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">60</span>):</span><br><span class="line">            newList = []</span><br><span class="line">            <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">60</span>):</span><br><span class="line">                newList.append(<span class="number">0</span>)</span><br><span class="line">            self.new_life_list.append(newList)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">59</span>):</span><br><span class="line">            <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">59</span>):</span><br><span class="line">                around = self.life_list[x-<span class="number">1</span>][y-<span class="number">1</span>]+self.life_list[x-<span class="number">1</span>][y]+self.life_list[x-<span class="number">1</span>][y+<span class="number">1</span>]+self.life_list[x][y-<span class="number">1</span>]+self.life_list[x][y+<span class="number">1</span>]+self.life_list[x+<span class="number">1</span>][y-<span class="number">1</span>]+self.life_list[x+<span class="number">1</span>][y]+self.life_list[x+<span class="number">1</span>][y+<span class="number">1</span>]</span><br><span class="line">                <span class="keyword">if</span> around == <span class="number">3</span>:</span><br><span class="line">                    self.new_life_list[x][y] = <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> around == <span class="number">2</span>:</span><br><span class="line">                    self.new_life_list[x][y] = self.life_list[x][y]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    self.new_life_list[x][y] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">59</span>):</span><br><span class="line">            <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">59</span>):</span><br><span class="line">                <span class="keyword">if</span> self.new_life_list[x][y]:</span><br><span class="line">                    self.canvas.create_rectangle(<span class="number">10</span>*x,<span class="number">10</span>*y,<span class="number">10</span>*x+<span class="number">10</span>,<span class="number">10</span>*y+<span class="number">10</span>,fill=<span class="string">&quot;white&quot;</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    self.canvas.create_rectangle(<span class="number">10</span>*x,<span class="number">10</span>*y,<span class="number">10</span>*x+<span class="number">10</span>,<span class="number">10</span>*y+<span class="number">10</span>,fill=<span class="string">&quot;black&quot;</span>)</span><br><span class="line">        self.life_list = self.new_life_list</span><br><span class="line">        self.new_life_list = []</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">60</span>):</span><br><span class="line">            newList = []</span><br><span class="line">            <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">60</span>):</span><br><span class="line">                newList.append(<span class="number">0</span>)</span><br><span class="line">            self.new_life_list.append(newList)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mainloop</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.update()</span><br><span class="line">        self.root.update()</span><br><span class="line">        time.sleep(<span class="number">0.1</span>)</span><br><span class="line">        self.canvas.delete(<span class="string">&quot;all&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">g = Game()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">allStop</span>():</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        g.root.destroy()</span><br><span class="line">        btnRoot.destroy()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        btnRoot.destroy()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nonstop</span>():</span></span><br><span class="line">    g.__init__()</span><br><span class="line">    g.running = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> g.running:</span><br><span class="line">        g.mainloop()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">stop</span>():</span></span><br><span class="line">    g.running = <span class="number">0</span></span><br><span class="line">    g.update()</span><br><span class="line"></span><br><span class="line">btnRoot = tk.Tk()</span><br><span class="line">btn1 = tk.Button(btnRoot, text=<span class="string">&quot;Start Random Nonstop&quot;</span>,command=nonstop)</span><br><span class="line">btn1.pack()</span><br><span class="line">btn2 = tk.Button(btnRoot, text=<span class="string">&quot;Stop Random Nonstop&quot;</span>,command=stop)</span><br><span class="line">btn2.pack()</span><br><span class="line">btnRoot.protocol(<span class="string">&quot;WM_DELETE_WINDOW&quot;</span>, allStop)</span><br><span class="line">btnRoot.mainloop()   </span><br></pre></td></tr></table></figure>
<hr>
<p>想来也许，我们这个宇宙也就是一个放大版的生命游戏，只要几条基础物理定律，就可以发展成整个宇宙。</p>
<p><strong>THE END</strong>感谢您的阅读~</p>
]]></content>
      <categories>
        <category>编程</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title>真的非常简单-Markdown基本语法</title>
    <url>/2021/08/25/markdown-syntax/</url>
    <content><![CDATA[<p>在很多博客、论坛，包括<code>Github Pages</code>(参见<a href="https://guleixibian2009.github.io/2021/08/15/GithubPages-简单易上手的网站制作-Jekyll版/">这篇文章</a>) 里都有大量运用到一种叫做<code>Markdown</code>的文本语言。不管你是在创建自己的网站、写文章，一般平台都需要写<code>Markdown</code>。如果你想学习<code>Markdown</code>，你算是来对地方了！</p>
<span id="more"></span>
<h2 id="0-Markdown-是什么？"><a href="#0-Markdown-是什么？" class="headerlink" title="0. Markdown 是什么？"></a>0. <code>Markdown</code> 是什么？</h2><blockquote>
<p><code>Markdown</code>是一种轻量级标记语言，创始人为约翰·格鲁伯(英语:John Gruber)。<br>它允许人们使用易读易写的纯文本格式编写文档，然后转换成有效的<code>XHTML</code>(或者<code>HTML</code>)文档。这种语言吸收了很多在电子邮件中已有的纯文本标记的特性。<br>由于<code>Markdown</code>的轻量化、易读易写特性，并且对于图片，图表、数学式都有支持，目前许多网站都广泛使用<code>Markdown</code>来撰写帮助文档或是用于论坛上发表消息。如<code>GitHub</code>、<code>OpenStreetMap</code> 、<code>SourceForge</code>、简书等，甚至还能被使用来撰写电子书。<br>（摘自百度百科）  </p>
</blockquote>
<p>注：一个好的编辑器是学习的基础。如果你坚持<code>WYSIWYG</code>（所见即所得），这里推荐开源项目<code>MarkText</code>。官网：<a href="https://github.com/marktext/marktext/">https://github.com/marktext/marktext/</a>。当然你也可以用<code>VSCode</code>或者（付费，虽然超好）<code>Typora</code>。</p>
<hr>
<h2 id="1-文章标题-amp-小标题"><a href="#1-文章标题-amp-小标题" class="headerlink" title="1. 文章标题&amp;小标题"></a>1. 文章标题&amp;小标题</h2><h3 id="1-1-像HTML一样写标题"><a href="#1-1-像HTML一样写标题" class="headerlink" title="1.1 像HTML一样写标题"></a>1.1 像<code>HTML</code>一样写标题</h3><p>在<code>HTML</code>里，标题分六级：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>This is an H1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>This is an H2<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>This is an H3<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>相对应的，<code>Markdown</code>标题也分六级。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># This is an H1  </span></span><br><span class="line"><span class="section">## This is an H2  </span></span><br><span class="line">...  </span><br><span class="line"><span class="section">###### This is an H6  </span></span><br></pre></td></tr></table></figure>
<p>就像你看到的那样，每层标题就是几个 <strong><code>#</code></strong>。</p>
<h3 id="1-2-Markdown专属标题"><a href="#1-2-Markdown专属标题" class="headerlink" title="1.2 Markdown专属标题"></a>1.2 <code>Markdown</code>专属标题</h3><p>不过，在<code>Markdown</code>中表示标题也可以用一种特殊的方式。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section">This is an H1</span></span><br><span class="line"><span class="section">=============</span></span><br><span class="line"></span><br><span class="line"><span class="section">This is an H2</span></span><br><span class="line"><span class="section">-------------</span></span><br></pre></td></tr></table></figure>
<p>不过它本身只支持2种标题，即大、小标题。</p>
<hr>
<h2 id="2-文字样式语法"><a href="#2-文字样式语法" class="headerlink" title="2. 文字样式语法"></a>2. 文字样式语法</h2><p>在<code>Markdown</code>中，文字可以是<em>斜体</em>、<strong>粗体</strong>、<strong><em>粗斜体</em></strong>,<del>删除线</del>，<u>下划线</u>。</p>
<h3 id="2-1-基本样式"><a href="#2-1-基本样式" class="headerlink" title="2.1 基本样式"></a>2.1 基本样式</h3><ul>
<li><p>斜体用一个<code>*</code>包围，就像<code>*这是斜体*</code>，显示出来就是 <em>这是斜体</em> </p>
</li>
<li><p>粗体用两个<code>*</code>包围，就像<code>**这是粗体**</code>，显示出来就是 <strong>这是粗体</strong></p>
</li>
<li><p>粗斜体用三个<code>*</code>包围，就像<code>***这是粗斜体***</code>，显示出来就是 <strong><em>这是粗斜体</em></strong></p>
<p>（本质上它其实就是<strong>粗体</strong>包住了<em>斜体</em>，所以 <strong><em>你交学费</em></strong> 了吗）</p>
</li>
<li><p>删除线用两个<code>~</code>包围，就像<code>~~这是删除线~~</code>，显示出来就是 <del>这是删除线</del>  </p>
</li>
<li><p><code>@mention</code>：<code>GFM</code>中的一种“点名”的方式，其他时候基本没用。</p>
</li>
</ul>
<h4 id="2-1-1-引用块"><a href="#2-1-1-引用块" class="headerlink" title="2.1.1 引用块"></a>2.1.1 引用块</h4><p>想要突出显示你引用了某段话？可以使用引用段落！</p>
<blockquote>
<p>这就是一个简单的引用了！你可以在这里面<em>使用</em> <strong>其他</strong><code>的语法</code>。它的语法是：</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line"><span class="quote">&gt; 引用引用引用引用引用引用引用引用！</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p>引用以一个右尖括号开始。一般情况下，我们在多行引用时，会在每一行的开头加一个符号，但如果你懒……</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line"><span class="quote">&gt; Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod</span></span><br><span class="line"><span class="quote">&gt; tempor incididunt ut labore et dolore magna aliqua.</span></span><br></pre></td></tr></table></figure>
<p>可以变为：</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line"><span class="quote">&gt; Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod  </span></span><br><span class="line">tempor incididunt ut labore et dolore magna aliqua.</span><br></pre></td></tr></table></figure>
<blockquote>
<p>想要嵌套引用，直接多加一个符号！</p>
<blockquote>
<p>嵌套引用中！</p>
</blockquote>
</blockquote>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line"><span class="quote">&gt; Lorem ipsum...</span></span><br><span class="line"><span class="quote">&gt; &gt; Lorem ipsum...</span></span><br></pre></td></tr></table></figure>
<h3 id="2-2-某些来自HTML的样式"><a href="#2-2-某些来自HTML的样式" class="headerlink" title="2.2 某些来自HTML的样式"></a>2.2 某些来自<code>HTML</code>的样式</h3><blockquote>
<p>由于<code>Markdown</code>可以直接转换成<code>HTML</code>（在百科里说过了），所以有很多<code>HTML</code>标签都可以在<code>Markdown</code>中使用。比如说，<code>&lt;u&gt;</code> <code>&lt;kbd&gt;</code> <code>&lt;script&gt;</code>（当然也不是所有标签都受支持，得看编译器） 。<strong>如果可能，他们会直接被插入生成的<code>HTML</code>文件中</strong>。</p>
</blockquote>
<h4 id="2-2-1-瞎划线（下划线）"><a href="#2-2-1-瞎划线（下划线）" class="headerlink" title="2.2.1 瞎划线（下划线）"></a>2.2.1 瞎划线（下划线）</h4><p>下划线是用<code>HTML</code>实现的，在<code>HTML</code>里下划线是<code>&lt;u&gt;</code>,所以语法就是<code>&lt;u&gt;这是下划线&lt;/u&gt;</code>,显示出来就是<u>这是下划线</u>。  </p>
<h4 id="2-2-2-颜色"><a href="#2-2-2-颜色" class="headerlink" title="2.2.2 颜色"></a>2.2.2 颜色</h4><p>如果<font color=green> 你 </font>需要给文字调 <font color=red> 颜色 </font> ，可以用 <code>&lt;font&gt;</code> 标签，语法为</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">red</span>&gt;</span> Some text <span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这个<code>&lt;font&gt;</code>标签接收一个参数<code>color</code>。你可以把它设为一些常见的颜色，比如</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">颜色</th>
<th style="text-align:center">效果</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>&lt;font color=Red&gt;</code></td>
<td style="text-align:center"><font color=Red>Red</font></td>
</tr>
<tr>
<td style="text-align:center"><code>&lt;font color=Yellow&gt;</code></td>
<td style="text-align:center"><font color=Yellow>Yellow</font></td>
</tr>
<tr>
<td style="text-align:center"><code>&lt;font color=Blue&gt;</code></td>
<td style="text-align:center"><font color=Blue>Blue</font></td>
</tr>
<tr>
<td style="text-align:center"><code>&lt;font color=Green&gt;</code></td>
<td style="text-align:center"><font color=Green>Green</font></td>
</tr>
<tr>
<td style="text-align:center"><code>&lt;font color=Gold&gt;</code></td>
<td style="text-align:center"><font color=Gold>Gold</font></td>
</tr>
<tr>
<td style="text-align:center"><code>&lt;font color=Grey&gt;</code></td>
<td style="text-align:center"><font color=Grey>Grey</font></td>
</tr>
<tr>
<td style="text-align:center"><code>&lt;font color=Purple&gt;</code></td>
<td style="text-align:center"><font color=Purple>Purple</font></td>
</tr>
<tr>
<td style="text-align:center"><code>&lt;font color=Azure&gt;</code></td>
<td style="text-align:center"><font color=Azure>Azure</font></td>
</tr>
<tr>
<td style="text-align:center"><code>&lt;font color=GreenYellow&gt;</code></td>
<td style="text-align:center"><font color=GreenYellow>GreenYellow</font></td>
</tr>
</tbody>
</table>
</div>
<p>如果你还想要其他的颜色，你可以访问 <a href="https://www.w3school.com.cn/tags/html_ref_colornames.asp">https://www.w3school.com.cn/tags/html_ref_colornames.asp</a> 来研究更多颜色~  </p>
<p>另外，这其实是一个过时了的<code>HTML</code> 标签。所以，我想，还是要避免使用吧。如果可行，可以试试行内<code>CSS</code>，即：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color: red;&quot;</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="2-2-3-按键？？"><a href="#2-2-3-按键？？" class="headerlink" title="2.2.3 按键？？"></a>2.2.3 按键？？</h4><p>听说过<code>&lt;kbd&gt;</code>吗？<del>（好奇）</del>我猜你肯定知道！啊啊，不知道？？？我教你！选中那个<code>&lt;kbd&gt;</code>，然后按住<kbd>Ctrl+C</kbd>，选中别处，<kbd>Ctrl+V</kbd>！这就是<code>&lt;kbd&gt;</code>了，它表示一种快捷键方式。语法就是：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span>Ctrl+Shift+L<span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="2-3-脚注"><a href="#2-3-脚注" class="headerlink" title="2.3 脚注"></a>2.3 脚注</h3><p>这是一个脚注 <sup><a href="#fn_1" id="reffn_1">1</a></sup> 。脚注的语法是：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">TextTextText [^name] TextTextText</span><br></pre></td></tr></table></figure>
<p>这个脚注一般用数字表示。当然它还有更高级的功能，见下：</p>
<hr>
<h2 id="3-链接与图片"><a href="#3-链接与图片" class="headerlink" title="3. 链接与图片"></a>3. 链接与图片</h2><h3 id="3-1-链接"><a href="#3-1-链接" class="headerlink" title="3.1 链接"></a>3.1 链接</h3><p>文章中的“链接”指“超链接”。 <a href="https://guleixibian2009.github.io/">这是一个超链接实例</a> ，它指向我的主页。<br>链接的语法为 </p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">[<span class="string">Name</span>](<span class="link">Link</span>) </span><br><span class="line">&lt;!--示例--&gt;</span><br><span class="line">[<span class="string">主页</span>](<span class="link">https://www.example.com/</span>)</span><br></pre></td></tr></table></figure>
<p>想要直接显示这个链接而不显示代替名？可以这样做：</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line"><span class="xml">&lt;https://example.com&gt;</span></span><br></pre></td></tr></table></figure>
<p>显示出来就是：<a href="https://example.com">https://example.com</a>  </p>
<p>想要在一处集中显示所有链接？可以这样使用脚注来替代！</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">[<span class="string">Example</span>](<span class="link">example</span>)</span><br><span class="line">[example] : https://www.example.com/</span><br></pre></td></tr></table></figure>
<p>当然我不太习惯用这个。</p>
<h3 id="3-2-图片"><a href="#3-2-图片" class="headerlink" title="3.2 图片"></a>3.2 图片</h3><p>图片的语法和链接很相似，只是在<code>[Name](Place)</code> 之前加上一个 <code>!</code> (都是英文标点),如</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">![<span class="string">Name</span>](<span class="link">Link &quot;替代名&quot;</span>)</span><br><span class="line">&lt;!--示例--&gt;</span><br><span class="line">![<span class="string">Pull Shark</span>](<span class="link">https://github.githubassets.com/images/modules/profile/achievements/pull-shark-default.png &quot;Pull Shark&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>“替代名”不是必要的，它会被解析为<code>img</code>标签的<code>alt</code>属性。在方括号<code>[Pull Shark]</code>中的内容在有些编译器下会作为一种标题被显示在渲染的图片下面。e.g.</p>
<p><img data-src="https://github.githubassets.com/images/modules/profile/achievements/pull-shark-default.png" alt="Pull Shark" title="Pull Shark"></p>
<p>当然一些高级一些的属性（如居中）还是用<code>HTML</code>做出来的！（不知道为什么<code>Hexo</code>会自动居中）</p>
<hr>
<h2 id="4-列表"><a href="#4-列表" class="headerlink" title="4. 列表"></a>4. 列表</h2><p>在<code>Markdown</code>中，列表分两种：有序的，和无序的。</p>
<h3 id="4-1-有序列表"><a href="#4-1-有序列表" class="headerlink" title="4.1 有序列表"></a>4.1 有序列表</h3><p>有序列表，就像  </p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> 第一个元素  </span><br><span class="line"><span class="bullet">2.</span> 第二个元素  </span><br><span class="line"><span class="bullet">3.</span> 第三个元素</span><br></pre></td></tr></table></figure>
<p>在<code>Markdown</code>中，直接打 <code>1.</code> 就会出现一个有序列表。当然， <code>i.</code> <code>a.</code> 甚至不从头开始也可以：</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">a. #1</span><br><span class="line">b. #2</span><br><span class="line">c. #3</span><br></pre></td></tr></table></figure>
<p>当然这还是取决于你用的编译器啦！</p>
<h3 id="4-2-无序列表"><a href="#4-2-无序列表" class="headerlink" title="4.2 无序列表"></a>4.2 无序列表</h3><p>无序列表的原理和有序列表一样，不过不以 <code>1.</code> 打头，而是：</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> 第一种方式</span><br><span class="line"><span class="bullet">-</span> 第一种方式</span><br></pre></td></tr></table></figure>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line"><span class="bullet">+</span> 第二种方式</span><br><span class="line"><span class="bullet">+</span> 第二种方式</span><br></pre></td></tr></table></figure>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line"><span class="bullet">*</span> 第三种方式</span><br><span class="line"><span class="bullet">*</span> 第三种方式</span><br></pre></td></tr></table></figure>
<p>显示出来都是</p>
<ul>
<li>无序列表</li>
<li>无序列表</li>
</ul>
<p>怎么样，够简单吧……</p>
<h3 id="4-3-To-do-list"><a href="#4-3-To-do-list" class="headerlink" title="4.3 To do list"></a>4.3 <code>To do list</code></h3><p>通过无序列表我们还可以创建一个任务表（<code>To do list</code>），如下：</p>
<ul>
<li style="list-style: none"><input type="checkbox" disabled="disabled" checked></input> No.1</li>
<li style="list-style: none"><input type="checkbox" disabled="disabled"></input> No.2</li>
<li style="list-style: none"><input type="checkbox" disabled="disabled" checked></input> No.3</li>
</ul>
<p>语法如下：</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> [x] No.1</span><br><span class="line"><span class="bullet">-</span> [ ] No.2</span><br><span class="line"><span class="bullet">-</span> [x] No.3</span><br></pre></td></tr></table></figure>
<p>其中 <code>[x]</code> 表示“已完成”，<code>[ ]</code> 表示“未完成”。可能<code>Hexo</code>有的时候渲染不出来这个，大家可以移步<a href="https://github.com/Guleixibian2009/Website-Ariticle-Backup/blob/master/_posts/Markdown%E4%B8%ADLatex%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95.md">原文件</a>查看！</p>
<h3 id="4-4-合并列表"><a href="#4-4-合并列表" class="headerlink" title="4.4 合并列表"></a>4.4 合并列表</h3><p>你可以把多种列表嵌套起来。如：</p>
<ul>
<li><p>Hello World!</p>
</li>
<li><p>这是一个列表……</p>
<ol>
<li><p>里面还有一个列表！</p>
</li>
<li><p>的确是可以嵌套的！</p>
</li>
</ol>
</li>
<li><p>还是原来那个列表~</p>
<ul>
<li><p>可以同样嵌套无序列表</p>
</li>
<li><p>等等等等</p>
</li>
<li><p>[x] 还可以更改列表类型啊！</p>
</li>
<li><p>[ ] 怎么样？</p>
</li>
</ul>
</li>
<li><p>就是这样啦！</p>
</li>
</ul>
<hr>
<h2 id="5-文档里的小“零件”"><a href="#5-文档里的小“零件”" class="headerlink" title="5.  文档里的小“零件”"></a>5.  文档里的小“零件”</h2><h3 id="5-1-分割线"><a href="#5-1-分割线" class="headerlink" title="5.1 分割线"></a>5.1 分割线</h3><p>分割线这个东东在文章分节这个功能上还是非常的实用的。你可以这样创建一条：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">或</span><br><span class="line"><span class="strong">**<span class="emphasis">*</span></span></span><br></pre></td></tr></table></figure>
<p>正如你看到的那样啦！</p>
<h3 id="5-2-强制换行的几种方式"><a href="#5-2-强制换行的几种方式" class="headerlink" title="5.2 强制换行的几种方式"></a>5.2 强制换行的几种方式</h3><p>在<code>Markdown</code>里面如果你不进行所谓强制换行，那么连续的段落就会被自动连接在一起。这个时候，<code>HTML</code>大兄就会来打杂：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>直接把它放在某一行的结尾，这两行就会自动拆分。如果你嫌麻烦…那么在想要换行的地方（行尾）加两个空格就可以……我也是没法展示了，这个不够直观。</p>
<h3 id="5-3-符号的转义-escaping"><a href="#5-3-符号的转义-escaping" class="headerlink" title="5.3 符号的转义(escaping)"></a>5.3 符号的转义(<code>escaping</code>)</h3><p>什么，这么简单的<code>Markdown</code>都需要转义？好吧，我承认，这还真的要！如果你仔细回想一下（或者预知一下未来，看下面的代码块）你就会发现，我们在处理文字样式的时候我们使用了各种符号，现整理如下：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>符号</th>
<th>意义</th>
<th>符号</th>
<th>意义</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>\</code></td>
<td>反斜杠（转义本身）</td>
<td>``</td>
<td>反引号（代码块）</td>
</tr>
<tr>
<td><code>*</code></td>
<td>星号（加粗，斜体，无序列表等）</td>
<td><code>_</code></td>
<td>下划线（加粗，斜体等）</td>
</tr>
<tr>
<td><code>()</code></td>
<td>小括号（链接，图片）</td>
<td><code>[]</code></td>
<td>中括号（链接，图片）</td>
</tr>
<tr>
<td><code>~</code></td>
<td>波浪号（下标，删除线）</td>
<td><code>$</code></td>
<td>美元（某些情况下，<code>LaTex</code>）</td>
</tr>
<tr>
<td><code>#</code></td>
<td>井号（标题）</td>
<td><code>+</code></td>
<td>加号（无序列表）</td>
</tr>
<tr>
<td><code>-</code></td>
<td>减号（无序列表）</td>
<td><code>.</code></td>
<td>点号（有序列表）</td>
</tr>
<tr>
<td><code>@</code></td>
<td>@号（<code>GFM</code>中，<code>@mention</code>）</td>
<td>`\</td>
<td>`</td>
<td>竖线（表格）</td>
</tr>
<tr>
<td><code>&lt;</code></td>
<td>左尖括号（<code>HTML</code>）</td>
<td><code>&gt;</code></td>
<td>右尖括号（<code>HTML</code>）</td>
</tr>
</tbody>
</table>
</div>
<p>那么，如何转义呢？只需要在需要转义的字符前面添加反斜杠就可以啦！比如，*这段文字其实不是斜体*！</p>
<p>代码如下：</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">\<span class="emphasis">*这段文字其实不是斜体!\*</span></span><br><span class="line"><span class="emphasis">*但这个是！*</span></span><br></pre></td></tr></table></figure>
<h3 id="5-4-没什么用的注释"><a href="#5-4-没什么用的注释" class="headerlink" title="5.4 没什么用的注释"></a>5.4 没什么用的注释</h3><figure class="highlight md"><table><tr><td class="code"><pre><span class="line">&lt;!-- 这就是个注释了，我甚至不想讲… --&gt;</span><br></pre></td></tr></table></figure>
<p>对对，这就是个<code>HTML</code>注释而已。99.8%的情况下这个东东没有用，但如果…嗯好吧其实也不是一点作用都没有，如<code>Markdown</code>文档中的定位（比如你每天靠<code>GitHub Actions</code>生成点什么）或者<code>Hexo</code>文章的节选会使用<code>&lt;!-- More --&gt;</code>。</p>
<hr>
<h2 id="6-激动人心！代码块"><a href="#6-激动人心！代码块" class="headerlink" title="6. 激动人心！代码块"></a>6. 激动人心！代码块</h2><p><del>是不是等它好久了…</del> 行了也见了这么多行内代码块了，我怎么能不介绍一下呢。</p>
<p>行内代码块，只需将代码块内的内容用 ````包围起来就可以了。如，</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line"><span class="code">`hello, world!`</span></span><br></pre></td></tr></table></figure>
<p>至于长篇的“大”代码块，有两种方法：</p>
<ol>
<li><p>在“代码块”前缩进4格，直到代码结束；</p>
</li>
<li><p>使用下面这种方式：</p>
</li>
</ol>
<div class="highlight-container">
  <figure class="highlight md">
    <div class="table-container">
      <table>
        <tbody>
          <tr>
            <td class="gutter">
              <pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span></pre>
            </td>
            <td class="code">
              <pre><span class="line">```</span>
<span class="line">Here is some code.</span>
<span class="line">```</span></pre>
            </td>
          </tr>
        </tbody>
      </table>
    </div>
  </figure>
  <div class="copy-btn"><i class="fa fa-clipboard fa-fw"></i></div>
</div>

<p>想要指定语法并获得高亮技能？看到下面那个<code>python</code>没有！</p>
<div class="highlight-container">
  <figure class="highlight md">
    <div class="table-container">
      <table>
        <tbody>
          <tr>
            <td class="gutter">
              <pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span></pre>
            </td>
            <td class="code">
              <pre><span class="line">```python</span>
<span class="line">def hello():</span>
<span class="line">    print("Hello, world!")</span>
<span class="line"></span>
<span class="line">hello():</span>
<span class="line">```</span></pre>
            </td>
          </tr>
        </tbody>
      </table>
    </div>
  </figure>
  <div class="copy-btn"><i class="fa fa-clipboard fa-fw"></i></div>
</div>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hello, world!&quot;</span>)</span><br><span class="line"></span><br><span class="line">hello()</span><br></pre></td></tr></table></figure>
<h2 id="7-表格来了"><a href="#7-表格来了" class="headerlink" title="7. 表格来了"></a>7. 表格来了</h2><p>需要在自己的文档中直观地表示数据？可以尝试列一个表格！Here we go~</p>
<h3 id="7-1-基本表格"><a href="#7-1-基本表格" class="headerlink" title="7.1 基本表格"></a>7.1 基本表格</h3><div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th>第一列</th>
<th>第二列</th>
<th>第三列</th>
</tr>
</thead>
<tbody>
<tr>
<td>第一行</td>
<td>数据1</td>
<td>数据2</td>
<td>数据3</td>
</tr>
</tbody>
</table>
</div>
<p>光看这个表可能还真猜不出来它的语法是什么……但其实如果我真的写出来却会觉得这种语法也很直观！（不觉得那些竖线很像网格线吗）</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">||第一列|第二列|第三列|</span><br><span class="line">|第一行|数据1|数据2|数据3|</span><br></pre></td></tr></table></figure>
<p>所以，每两个<code>|</code>之间是一格，5个<code>|</code>就是4格。没有限制最多多少行或多少列，且不要求每行格数相同！只是我这里渲染不出来……</p>
<h3 id="7-2-每列的居中、靠右"><a href="#7-2-每列的居中、靠右" class="headerlink" title="7.2 每列的居中、靠右"></a>7.2 每列的居中、靠右</h3><p>什么，还有这种功能？好吧，我们只需要一条特殊“控制行”：</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">|     | 第一列 | 第二列 | 第三列 |</span><br><span class="line">| --- |:--- |:---:| ---:|</span><br><span class="line">| 第一行 | 靠左  | 居中  | 靠右  |</span><br></pre></td></tr></table></figure>
<div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th style="text-align:left">第一列</th>
<th style="text-align:center">第二列</th>
<th style="text-align:right">第三列</th>
</tr>
</thead>
<tbody>
<tr>
<td>第一行</td>
<td style="text-align:left">靠左</td>
<td style="text-align:center">居中</td>
<td style="text-align:right">靠右</td>
</tr>
</tbody>
</table>
</div>
<hr>
<p>到这里，你已经学完了基础的<code>Markdown</code>语法！想要学习<code>Markdown</code>中更高级的图表功能？敬请期待下一篇教程！</p>
<hr>
<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>以下是注释内容：  </p>
<blockquote id="fn_1">
<sup>1</sup>. 你学废了吗？<a href="#reffn_1" title="Jump back to footnote [1] in the text."> &#8617;</a>
</blockquote>
<hr>
<p><strong>THE END</strong>感谢您的阅读~</p>
]]></content>
      <categories>
        <category>编程</category>
        <category>Markdown</category>
        <category>Markdown语法</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>语法</tag>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown&amp;Mermaid——告别复杂软件，轻松画图表</title>
    <url>/2023/01/05/markdown-mermaid-syntax/</url>
    <content><![CDATA[<p>我在很久很久以前，似乎给这篇文章发过预告（似乎还是在那篇<code>Markdown</code>语法里面，前年发的了），那我决定把这个坑给填了。</p>
<pre class="mermaid">graph LR
    A(Markdown语法)-->B[Hexo网站, 手写网站]-->C>鸽了一学期]-->D{WSL与Ubuntu}-->E((Markdown与Mermaid));
    A-.本可以!.->E;</pre>

<p>项目官网：<a href="https://mermaid.js.org/">Mermaid</a></p>
<p><strong>如果你想要在<code>Hexo+Next</code>中渲染<code>Mermaid</code>图表，请参见本文最后一章。</strong></p>
<span id="more"></span>
<h2 id="1-流程图"><a href="#1-流程图" class="headerlink" title="1. 流程图"></a>1. 流程图</h2><p>刚刚你已经看到了一个流程图了。可以看出，一个流程图分三部分：<strong>方向、节点和连线</strong>，每一个属性都可以自定义。</p>
<h3 id="1-1-方向"><a href="#1-1-方向" class="headerlink" title="1.1 方向"></a>1.1 方向</h3><p>每一个<code>Markdown</code>编辑器的语法可能略有差别，这里我拿通用的<code>Mermaid</code>的官方语法来讲。首先，每个图表都要用</p>
<div class="highlight-container">
  <figure class="highlight md">
    <div class="table-container">
      <table>
        <tbody>
          <tr>
            <td class="gutter">
              <pre><span class="line">1</span>
<span class-"line">2</span>
<span class="line">3</span></pre>
            </td>
            <td class="code">
              <pre><span class="line">``mermaid</span>
<span class="line">graph</span>
<span class="line">``</span></pre>
            </td>
          </tr>
        </tbody>
      </table>
    </div>
  </figure>
  <div class="copy-btn"><i class="fa fa-clipboard fa-fw"></i></div>
</div>

<p>来标记。下文为了方便，就都不写出来了。</p>
<p><strong>注：为了不让<code>Mermaid</code>渲染，我在上面少打了一个`，需要自己补齐</strong></p>
<p>方向有以下四种：</p>
<ul>
<li><p><code>LR</code>：<code>Left-Right</code>左→右</p>
</li>
<li><p><code>RL</code>：<code>Right-Left</code>右→左</p>
</li>
<li><p><code>TB</code>：<code>Top-Bottom</code>上→下</p>
</li>
<li><p><code>BT</code>：<code>Botton-Top</code>下→上</p>
</li>
</ul>
<p>每个流程图的第一行就要标记方向：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">graph LR/RL/TB/BT</span><br></pre></td></tr></table></figure>
<p>然后<code>Mermaid</code>没有那么高级，不支持即左到右，又上到下的复杂图。</p>
<h3 id="1-2-节点"><a href="#1-2-节点" class="headerlink" title="1.2 节点"></a>1.2 节点</h3><p><code>Mermaid</code>中使用不同的括号标记节点形状：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">样式</th>
<th style="text-align:center">代码</th>
<th style="text-align:center">样式</th>
<th style="text-align:center">代码</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">默认</td>
<td style="text-align:center"><code>A</code></td>
<td style="text-align:center">菱形</td>
<td style="text-align:center"><code>I&#123;Name&#125;</code></td>
</tr>
<tr>
<td style="text-align:center">方框</td>
<td style="text-align:center"><code>B[Name]</code></td>
<td style="text-align:center">长条六边形</td>
<td style="text-align:center"><code>J&#123;&#123;Name&#125;&#125;</code></td>
</tr>
<tr>
<td style="text-align:center">圆角矩形</td>
<td style="text-align:center"><code>C(Name)</code></td>
<td style="text-align:center">平行四边形</td>
<td style="text-align:center"><code>K[/Name/]</code></td>
</tr>
<tr>
<td style="text-align:center">胶囊</td>
<td style="text-align:center"><code>D([Name])</code></td>
<td style="text-align:center">反平行四边形</td>
<td style="text-align:center"><code>L[\Name\]</code></td>
</tr>
<tr>
<td style="text-align:center">子方框</td>
<td style="text-align:center"><code>E[[Name]]</code></td>
<td style="text-align:center">梯形</td>
<td style="text-align:center"><code>M[/Name\]</code></td>
</tr>
<tr>
<td style="text-align:center">圆柱（数据库）</td>
<td style="text-align:center"><code>F[(Name)]</code></td>
<td style="text-align:center">反梯形</td>
<td style="text-align:center"><code>N[\Name/]</code></td>
</tr>
<tr>
<td style="text-align:center">圆</td>
<td style="text-align:center"><code>G((Name))</code></td>
<td style="text-align:center">子圆框</td>
<td style="text-align:center"><code>O(((Name)))</code></td>
</tr>
<tr>
<td style="text-align:center">旗子</td>
<td style="text-align:center"><code>H&gt;Name]</code></td>
<td style="text-align:center">↑</td>
<td style="text-align:center">子圆框、六边形可能不受支持</td>
</tr>
</tbody>
</table>
</div>
<pre class="mermaid">graph LR
    A---B[Name]---C(Name)---D([Name])---E[[Name]]---F[(Name)]---G((Name));
    H>Name]---I{Name}---J---K[/Name/]---L[\Name\]---M[/Name\]---N[\Name/];</pre>

<p>我个人觉得还是很形象的，尤其是四边形这一块。那个<code>J&#123;&#123;Name&#125;&#125;</code>在本地渲染的出来，可是在线上就没了，不知道为什么。</p>
<h3 id="1-3-连线"><a href="#1-3-连线" class="headerlink" title="1.3 连线"></a>1.3 连线</h3><p>在<code>Mermaid</code>中，共有3种线型、4种箭头，你可以选择箭头的单、双向，并在连线上添加文本。这么一算，就是48种线型（当然这也取决于你使用的编辑器和<code>Mermaid</code>版本）。中间部分的长度可以调节连线的长度。这里就不一一给大家展示了。</p>
<pre class="mermaid">graph TB;
    A1 --- B1
    A2 === B2
    A3 -.- B3
    A4 --> B4
    A5 --o B5
    A6 --x B6
    A7<--> B7
    A8 -- Text! --- B8
    A9 ---- B9</pre>

<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">线型</th>
<th style="text-align:center">代码</th>
<th style="text-align:center">箭头</th>
<th style="text-align:center">代码</th>
<th style="text-align:center">效果</th>
<th style="text-align:center">代码</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">实线</td>
<td style="text-align:center"><code>---</code></td>
<td style="text-align:center">三角</td>
<td style="text-align:center"><code>--&gt;</code></td>
<td style="text-align:center">两边箭头</td>
<td style="text-align:center"><code>&lt;--&gt;</code>等</td>
</tr>
<tr>
<td style="text-align:center">粗实线</td>
<td style="text-align:center"><code>===</code></td>
<td style="text-align:center">圆形</td>
<td style="text-align:center"><code>--o</code></td>
<td style="text-align:center">文本</td>
<td style="text-align:center"><code>-- Text ---</code>等</td>
</tr>
<tr>
<td style="text-align:center">虚线</td>
<td style="text-align:center"><code>-.-</code></td>
<td style="text-align:center">叉号</td>
<td style="text-align:center"><code>--x</code></td>
<td style="text-align:center">加长线条</td>
<td style="text-align:center"><code>----</code>等</td>
</tr>
</tbody>
</table>
</div>
<h3 id="1-4-子图"><a href="#1-4-子图" class="headerlink" title="1.4 子图"></a>1.4 子图</h3><p>子图的意思是把一个完整的图分为很多小部分，然后互相有联系，基本的语法是：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">subgraph title</span><br><span class="line"><span class="code">    graph definition</span></span><br><span class="line"><span class="code">end</span></span><br></pre></td></tr></table></figure>
<p>举个例子：</p>
<pre class="mermaid">flowchart LR
    c1-->a2
    subgraph one
    a1-->a2
    end
    subgraph two
    b1-->b2
    end
    subgraph three
    c1-->c2
    end
    one --> two
    three --> two
    two --> c2</pre>

<h3 id="1-5-最终效果"><a href="#1-5-最终效果" class="headerlink" title="1.5 最终效果"></a>1.5 最终效果</h3><p>最后给一个完整的例子：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line"><span class="code">    A[Hard edge] --&gt;|Link text| B(Round edge)</span></span><br><span class="line"><span class="code">    B --&gt; C&#123;Decision&#125;</span></span><br><span class="line"><span class="code">    C --&gt;|One| D[Result one]</span></span><br><span class="line"><span class="code">    C --&gt;|Two| E[Result two]</span></span><br></pre></td></tr></table></figure>
<pre class="mermaid">graph LR
    A[Hard edge] -->|Link text| B(Round edge)
    B --> C{Decision}
    C -->|One| D[Result one]
    C -->|Two| E[Result two]</pre>

<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line"><span class="code">    A[Start] --&gt; B&#123;Is it?&#125;</span></span><br><span class="line"><span class="code">    B -- Yes --&gt; C[OK]</span></span><br><span class="line"><span class="code">    C --&gt; D[Rethink]</span></span><br><span class="line"><span class="code">    D --&gt; B</span></span><br><span class="line"><span class="code">    B -- No ----&gt; E[End]</span></span><br></pre></td></tr></table></figure>
<pre class="mermaid">graph LR
    A[Start] --> B{Is it?}
    B -- Yes --> C[OK]
    C --> D[Rethink]
    D --> B
    B -- No ----> E[End]</pre>

<hr>
<h2 id="2-时序图（Sequence）"><a href="#2-时序图（Sequence）" class="headerlink" title="2. 时序图（Sequence）"></a>2. 时序图（<code>Sequence</code>）</h2><p>可能大家见过这样一组对话：</p>
<pre class="mermaid">sequenceDiagram
    Alice->>John: Hello John, how are you?
    John-->>Alice: Great!
    Alice-)John: See you later!</pre>

<p>这种展现对话的方法叫做时序图，<code>sequence diagram</code>。主要特征，就是多个参与者<code>participant</code>和会话内容分别平行。</p>
<h3 id="2-1-基础语法"><a href="#2-1-基础语法" class="headerlink" title="2.1 基础语法"></a>2.1 基础语法</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line"><span class="code">    participant Alice</span></span><br><span class="line"><span class="code">    participant Bob</span></span><br><span class="line"><span class="code">    Alice-&gt;&gt;Bob: Hi Bob</span></span><br><span class="line"><span class="code">    Bob-&gt;&gt;Alice: Hi Alice</span></span><br></pre></td></tr></table></figure>
<p>首先<code>sequenceDiagram</code>标志这是时序图。然后我们要规定这张图里边有哪些参与者<code>participant</code>，这里则是Alice和Bob。最后就可以加入对话了。</p>
<h4 id="2-1-1-participant和actor"><a href="#2-1-1-participant和actor" class="headerlink" title="2.1.1 participant和actor"></a>2.1.1 <code>participant</code>和<code>actor</code></h4><p>默认情况下使用<code>participant</code>命令会把人名用一个方框框起来，如果你不想这样的话，可以试试<code>actor</code>命令：</p>
<pre class="mermaid">sequenceDiagram
    actor Alice
    actor Bob
    Alice->>Bob: Hi Bob
    Bob->>Alice: Hi Alice</pre>

<p>其次就是一个简写，如果你觉得人名过长的话，可以使用简写<code>alias</code>：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line"><span class="code">    participant A as Alice</span></span><br><span class="line"><span class="code">    participant J as John</span></span><br><span class="line"><span class="code">    A-&gt;&gt;J: Hello John, how are you?</span></span><br><span class="line"><span class="code">    J-&gt;&gt;A: Great!</span></span><br></pre></td></tr></table></figure>
<pre class="mermaid">sequenceDiagram
    participant A as Alice
    participant J as John
    A->>J: Hello John, how are you?
    J->>A: Great!</pre>

<p>这样多个字符的人名就可以简化为一个。</p>
<h4 id="2-1-2-线型"><a href="#2-1-2-线型" class="headerlink" title="2.1.2 线型"></a>2.1.2 线型</h4><p>时序图的线型会比流程图简单一点，只有8种：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">线型</th>
<th style="text-align:center">代码</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">实线</td>
<td style="text-align:center"><code>-&gt;</code></td>
</tr>
<tr>
<td style="text-align:center">带箭头的实线</td>
<td style="text-align:center"><code>-&gt;&gt;</code></td>
</tr>
<tr>
<td style="text-align:center">虚线</td>
<td style="text-align:center"><code>--&gt;</code></td>
</tr>
<tr>
<td style="text-align:center">带箭头的虚线</td>
<td style="text-align:center"><code>--&gt;&gt;</code></td>
</tr>
<tr>
<td style="text-align:center">带<code>x</code>的实线</td>
<td style="text-align:center"><code>-x</code></td>
</tr>
<tr>
<td style="text-align:center">带<code>x</code>的虚线</td>
<td style="text-align:center"><code>--x</code></td>
</tr>
<tr>
<td style="text-align:center">带圆角箭头的实线</td>
<td style="text-align:center"><code>-)</code></td>
</tr>
<tr>
<td style="text-align:center">带圆角箭头的虚线</td>
<td style="text-align:center"><code>--)</code></td>
</tr>
</tbody>
</table>
</div>
<pre class="mermaid">sequenceDiagram
    actor A as Alice
    actor B as Bob
    A->B: Hello!
    B->>A: Hi!
    A-->B: How are you today?
    B-->>A: Fine, thx, and you?
    A-xB: I'm great!
    B--xA: Want to go to the movies?
    A-)B: Of course!
    B--)A: Let's go!</pre>

<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line"><span class="code">    actor A as Alice</span></span><br><span class="line"><span class="code">    actor B as Bob</span></span><br><span class="line"><span class="code">    A-&gt;B: Hello!</span></span><br><span class="line"><span class="code">    B-&gt;&gt;A: Hi!</span></span><br><span class="line"><span class="code">    A--&gt;B: How are you today?</span></span><br><span class="line"><span class="code">    B--&gt;&gt;A: Fine, thx, and you?</span></span><br><span class="line"><span class="code">    A-xB: I&#x27;m great!</span></span><br><span class="line"><span class="code">    B--xA: Want to go to the movies?</span></span><br><span class="line"><span class="code">    A-)B: Of course!</span></span><br><span class="line"><span class="code">    B--)A: Let&#x27;s go!</span></span><br></pre></td></tr></table></figure>
<h3 id="2-2-标志会话范围"><a href="#2-2-标志会话范围" class="headerlink" title="2.2 标志会话范围"></a>2.2 标志会话范围</h3><p>在谈话过程中可能会发生话题的转移。这里有两种方式来标志话题的范围：</p>
<h4 id="2-2-1-de-activate"><a href="#2-2-1-de-activate" class="headerlink" title="2.2.1 (de)activate"></a>2.2.1 <code>(de)activate</code></h4><p><code>activate</code>命令可以这么写：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line"><span class="code">    Alice-&gt;&gt;John: Hello John, how are you?</span></span><br><span class="line"><span class="code">    activate John</span></span><br><span class="line"><span class="code">    John--&gt;&gt;Alice: Great!</span></span><br><span class="line"><span class="code">    deactivate John</span></span><br></pre></td></tr></table></figure>
<p>或直接在箭头后添加符号<code>+</code>或<code>-</code>：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line"><span class="code">    Alice-&gt;&gt;+John: Hello John, how are you?</span></span><br><span class="line"><span class="code">    John--&gt;&gt;-Alice: Great!</span></span><br></pre></td></tr></table></figure>
<p>效果都是</p>
<pre class="mermaid">sequenceDiagram
    Alice->>+John: Hello John, how are you?
    John-->>-Alice: Great!</pre>

<p>它也可以层叠使用：</p>
<pre class="mermaid">sequenceDiagram
    Alice->>+John: Hello John, how are you?
    Alice->>+John: John, can you hear me?
    John-->>-Alice: Hi Alice, I can hear you!
    John-->>-Alice: I feel great!</pre>

<h4 id="2-2-2-背景颜色"><a href="#2-2-2-背景颜色" class="headerlink" title="2.2.2 背景颜色"></a>2.2.2 背景颜色</h4><pre class="mermaid">sequenceDiagram
    participant Alice
    participant John

    rect rgb(191, 223, 255)
    Alice->>+John: Hello John, how are you?
    rect rgb(200, 150, 255)
    Alice->>+John: John, can you hear me?
    John-->>-Alice: Hi Alice, I can hear you!
    end
    John-->>-Alice: I feel great!
    end
    Alice ->>+ John: Did you want to go to the game tonight?
    John -->>- Alice: Yeah! See you there.</pre>

<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line"><span class="code">    participant Alice</span></span><br><span class="line"><span class="code">    participant John</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    rect rgb(191, 223, 255)</span></span><br><span class="line"><span class="code">    Alice-&gt;&gt;+John: Hello John, how are you?</span></span><br><span class="line"><span class="code">    rect rgb(200, 150, 255)</span></span><br><span class="line"><span class="code">    Alice-&gt;&gt;+John: John, can you hear me?</span></span><br><span class="line"><span class="code">    John--&gt;&gt;-Alice: Hi Alice, I can hear you!</span></span><br><span class="line"><span class="code">    end</span></span><br><span class="line"><span class="code">    John--&gt;&gt;-Alice: I feel great!</span></span><br><span class="line"><span class="code">    end</span></span><br><span class="line"><span class="code">    Alice -&gt;&gt;+ John: Did you want to go to the game tonight?</span></span><br><span class="line"><span class="code">    John --&gt;&gt;- Alice: Yeah! See you there.</span></span><br></pre></td></tr></table></figure>
<p>在这个里面<code>rect</code>指令配合<code>end</code>使用就可以对某个区域进行背景高亮。颜色用<code>rgb()</code>来添加。</p>
<h3 id="2-3-思考-amp-note"><a href="#2-3-思考-amp-note" class="headerlink" title="2.3 思考&amp;note"></a>2.3 思考&amp;<code>note</code></h3><pre class="mermaid">sequenceDiagram
    Alice->John: Hello John, how are you?
    Note right of John: thinking...
    Note over Alice,John: A typical interaction</pre>

<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line"><span class="code">    Alice-&gt;John: Hello John, how are you?</span></span><br><span class="line"><span class="code">    Note right of John: thinking...</span></span><br><span class="line"><span class="code">    Note over Alice,John: A typical interaction</span></span><br></pre></td></tr></table></figure>
<p>这个图里面有两种<code>note</code>，一个是在某人一侧的，一种是横跨几个人，分别用<code>Note left/right of</code>和<code>Note over</code>.</p>
<h3 id="2-4-循环、选择、平行"><a href="#2-4-循环、选择、平行" class="headerlink" title="2.4 循环、选择、平行"></a>2.4 循环、选择、平行</h3><p>循环和选择的语法类似。循环表示一直回复某消息：</p>
<pre class="mermaid">sequenceDiagram
    Alice->John: Hello John, how are you?
    loop Every minute
        John-->Alice: Great!
    end</pre>

<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line"><span class="code">    Alice-&gt;John: Hello John, how are you?</span></span><br><span class="line"><span class="code">    loop Every minute</span></span><br><span class="line"><span class="code">        John--&gt;Alice: Great!</span></span><br><span class="line"><span class="code">    end</span></span><br></pre></td></tr></table></figure>
<p>首先用<code>loop</code>来标志一个循环，后面写上间隔。最后搭配<code>end</code>来标志循环结束。</p>
<p>选择则是一种条件语句：</p>
<pre class="mermaid">sequenceDiagram
    Alice->>Bob: Hello Bob, how are you?
    alt is sick
        Bob->>Alice: Not so good :(
    else is well
        Bob->>Alice: Feeling fresh like a daisy
    end
    opt Extra response
        Bob->>Alice: Thanks for asking
    end</pre>

<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line"><span class="code">    Alice-&gt;&gt;Bob: Hello Bob, how are you?</span></span><br><span class="line"><span class="code">    alt is sick</span></span><br><span class="line"><span class="code">        Bob-&gt;&gt;Alice: Not so good :(</span></span><br><span class="line"><span class="code">    else is well</span></span><br><span class="line"><span class="code">        Bob-&gt;&gt;Alice: Feeling fresh like a daisy</span></span><br><span class="line"><span class="code">    end</span></span><br><span class="line"><span class="code">    opt Extra response</span></span><br><span class="line"><span class="code">        Bob-&gt;&gt;Alice: Thanks for asking</span></span><br><span class="line"><span class="code">    end</span></span><br></pre></td></tr></table></figure>
<p>这里<code>alt</code>标志选择，搭配<code>else</code>使用。<code>opt</code>则标志<code>option</code>，额外的、可选的消息。</p>
<p>平行则是指某人同时发出消息：</p>
<pre class="mermaid">sequenceDiagram
    par Alice to Bob
        Alice->>Bob: Hello guys!
    and Alice to John
        Alice->>John: Hello guys!
    end
    Bob-->>Alice: Hi Alice!
    John-->>Alice: Hi Alice!</pre>

<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line"><span class="code">    par Alice to Bob</span></span><br><span class="line"><span class="code">        Alice-&gt;&gt;Bob: Hello guys!</span></span><br><span class="line"><span class="code">    and Alice to John</span></span><br><span class="line"><span class="code">        Alice-&gt;&gt;John: Hello guys!</span></span><br><span class="line"><span class="code">    end</span></span><br><span class="line"><span class="code">    Bob--&gt;&gt;Alice: Hi Alice!</span></span><br><span class="line"><span class="code">    John--&gt;&gt;Alice: Hi Alice!</span></span><br></pre></td></tr></table></figure>
<p><code>par</code>标志<code>parallel</code>，平行，搭配<code>and</code>使用。</p>
<hr>
<h2 id="3-甘特图"><a href="#3-甘特图" class="headerlink" title="3. 甘特图"></a>3. 甘特图</h2><p>甘特图比较复杂，我个人也没太研究懂，这里放一张总图：</p>
<pre class="mermaid">gantt
    dateFormat  YYYY-MM-DD
    title       Adding GANTT diagram functionality to mermaid
    excludes    weekends

    section A section
    Completed task            :done,    des1, 2014-01-06,2014-01-08
    Active task               :active,  des2, 2014-01-09, 3d
    Future task               :         des3, after des2, 5d
    Future task2              :         des4, after des3, 5d

    section Critical tasks
    Completed task in the critical line :crit, done, 2014-01-06,24h
    Implement parser and jison          :crit, done, after des1, 2d
    Create tests for parser             :crit, active, 3d
    Future task in critical line        :crit, 5d
    Create tests for renderer           :2d
    Add to mermaid                      :1d
    Functionality added                 :milestone, 2014-01-25, 0d

    section Documentation
    Describe gantt syntax               :active, a1, after des1, 3d
    Add gantt diagram to demo page      :after a1  , 20h
    Add another diagram to demo page    :doc1, after a1  , 48h

    section Last section
    Describe gantt syntax               :after doc1, 3d
    Add gantt diagram to demo page      :20h
    Add another diagram to demo page    :48h</pre>

<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">gantt</span><br><span class="line"><span class="code">    dateFormat  YYYY-MM-DD</span></span><br><span class="line"><span class="code">    title       Adding GANTT diagram functionality to mermaid</span></span><br><span class="line"><span class="code">    excludes    weekends</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    section A section</span></span><br><span class="line"><span class="code">    Completed task            :done,    des1, 2014-01-06,2014-01-08</span></span><br><span class="line"><span class="code">    Active task               :active,  des2, 2014-01-09, 3d</span></span><br><span class="line"><span class="code">    Future task               :         des3, after des2, 5d</span></span><br><span class="line"><span class="code">    Future task2              :         des4, after des3, 5d</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    section Critical tasks</span></span><br><span class="line"><span class="code">    Completed task in the critical line :crit, done, 2014-01-06,24h</span></span><br><span class="line"><span class="code">    Implement parser and jison          :crit, done, after des1, 2d</span></span><br><span class="line"><span class="code">    Create tests for parser             :crit, active, 3d</span></span><br><span class="line"><span class="code">    Future task in critical line        :crit, 5d</span></span><br><span class="line"><span class="code">    Create tests for renderer           :2d</span></span><br><span class="line"><span class="code">    Add to mermaid                      :1d</span></span><br><span class="line"><span class="code">    Functionality added                 :milestone, 2014-01-25, 0d</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    section Documentation</span></span><br><span class="line"><span class="code">    Describe gantt syntax               :active, a1, after des1, 3d</span></span><br><span class="line"><span class="code">    Add gantt diagram to demo page      :after a1  , 20h</span></span><br><span class="line"><span class="code">    Add another diagram to demo page    :doc1, after a1  , 48h</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    section Last section</span></span><br><span class="line"><span class="code">    Describe gantt syntax               :after doc1, 3d</span></span><br><span class="line"><span class="code">    Add gantt diagram to demo page      :20h</span></span><br><span class="line"><span class="code">    Add another diagram to demo page    :48h</span></span><br></pre></td></tr></table></figure>
<hr>
<h2 id="4-饼图"><a href="#4-饼图" class="headerlink" title="4. 饼图"></a>4. 饼图</h2><p><code>Mermaid</code>中的饼图可谓是最简单的了。举个例子：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">pie</span><br><span class="line"><span class="code">    title Key elements in Product X</span></span><br><span class="line"><span class="code">    &quot;Calcium&quot; : 42.96</span></span><br><span class="line"><span class="code">    &quot;Potassium&quot; : 50.05</span></span><br><span class="line"><span class="code">    &quot;Magnesium&quot; : 10.01</span></span><br><span class="line"><span class="code">    &quot;Iron&quot; :  5</span></span><br></pre></td></tr></table></figure>
<p>只要有具体数字，<code>Mermaid</code>就会自动计算百分比。</p>
<pre class="mermaid">pie
    title Key elements in Product X
    "Calcium" : 42.96
    "Potassium" : 50.05
    "Magnesium" : 10.01
    "Iron" :  5</pre>

<hr>
<h2 id="5-Git分支图"><a href="#5-Git分支图" class="headerlink" title="5. Git分支图"></a>5. <code>Git</code>分支图</h2><p><code>Git</code>分支图支持以下几个命令：<code>commit</code>、<code>checkout</code>和<code>cherry-pick</code>。每个<code>commit</code>会被给予一个独特的<code>ID</code>（就像真正的<code>Git</code>一样），你可以调整它的类型（<code>Reverse</code>和<code>Highlight</code>），给它<code>tag</code>，例如：</p>
<pre class="mermaid">gitGraph
    commit
    commit id: "Normal" tag: "v1.0.0"
    commit
    commit id: "Reverse" type: REVERSE tag: "RC_1"
    commit
    commit id: "Highlight" type: HIGHLIGHT tag: "8.8.4"
    commit</pre>

<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">gitGraph</span><br><span class="line"><span class="code">    commit</span></span><br><span class="line"><span class="code">    commit id: &quot;Normal&quot; tag: &quot;v1.0.0&quot;</span></span><br><span class="line"><span class="code">    commit</span></span><br><span class="line"><span class="code">    commit id: &quot;Reverse&quot; type: REVERSE tag: &quot;RC_1&quot;</span></span><br><span class="line"><span class="code">    commit</span></span><br><span class="line"><span class="code">    commit id: &quot;Highlight&quot; type: HIGHLIGHT tag: &quot;8.8.4&quot;</span></span><br><span class="line"><span class="code">    commit</span></span><br></pre></td></tr></table></figure>
<p>可以添加多个分支：</p>
<pre class="mermaid">gitGraph
       commit
       commit
       branch develop
       commit
       commit
       commit
       checkout main
       commit
       commit
       merge develop
       commit
       commit</pre>

<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">gitGraph</span><br><span class="line">   commit</span><br><span class="line">   commit</span><br><span class="line">   branch develop</span><br><span class="line">   commit</span><br><span class="line">   commit</span><br><span class="line">   commit</span><br><span class="line">   checkout main</span><br><span class="line">   commit</span><br><span class="line">   commit</span><br><span class="line">   merge develop</span><br><span class="line">   commit</span><br><span class="line">   commit</span><br></pre></td></tr></table></figure>
<p>你甚至可以模拟出超大仓库的<code>git</code>树：</p>
<pre class="mermaid">gitGraph
        commit
        branch hotfix
        checkout hotfix
        commit
        branch develop
        checkout develop
        commit id:"ash" tag:"abc"
        branch featureB
        checkout featureB
        commit type:HIGHLIGHT
        checkout main
        checkout hotfix
        commit type:NORMAL
        checkout develop
        commit type:REVERSE
        checkout featureB
        commit
        checkout main
        merge hotfix
        checkout featureB
        commit
        checkout develop
        branch featureA
        commit
        checkout develop
        merge hotfix
        checkout featureA
        commit
        checkout featureB
        commit
        checkout develop
        merge featureA
        branch release
        checkout release
        commit
        checkout main
        commit
        checkout release
        merge main
        checkout develop
        merge release</pre>

<hr>
<h2 id="6-在Hexo-Next中渲染Mermaid"><a href="#6-在Hexo-Next中渲染Mermaid" class="headerlink" title="6. 在Hexo+Next中渲染Mermaid"></a>6. 在<code>Hexo+Next</code>中渲染<code>Mermaid</code></h2><p>这算是对我<code>Hexo</code>网站教程的一个补充，当时没有想到自己需要渲染<code>Mermaid</code>，就没有写。这里简略的说一下，和之前的逻辑差不多。</p>
<p>首先<code>npm</code>安装<code>hexo-filter-mermaid-diagrams</code>，随后在主题配置文件中找到<code>mermaid</code>，把<code>enable</code>调成<code>true</code>，就可以启用功能。如果你想要尝试最新的功能，可以往下，找到</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Mermaid</span></span><br><span class="line"><span class="attr">mermaid:</span> <span class="string">//cdn.jsdelivr.net/npm/mermaid@8/dist/mermaid.min.js</span></span><br></pre></td></tr></table></figure>
<p>把<code>@8</code>调成最新的版本（写作时是<code>@9</code>），就可以使用一些新功能。</p>
<hr>
<p>终于，把之前的一个大坑填完了。</p>
<p><strong>THE END</strong>感谢您的阅读~</p>
]]></content>
      <categories>
        <category>编程</category>
        <category>Markdown</category>
        <category>Markdown语法</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>语法</tag>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>还需要……加速吗？</title>
    <url>/2022/09/26/more-ways-to-speed-up/</url>
    <content><![CDATA[<p>速度，自然是每一个程序员追求的目标。随着本人编程渐渐深入，又发现了一些加速的地方，提高编程效率。这里包含：<code>pip</code>镜像、<code>Microsoft Store</code>加速、<code>VSCode</code>下载链接和<code>Google Recaptcha</code>加速。也算是一种小备忘录吧，方便之后，比如重装系统等等。</p>
<span id="more"></span>
<h2 id="1-Python-Pip镜像源"><a href="#1-Python-Pip镜像源" class="headerlink" title="1. Python Pip镜像源"></a>1. <code>Python Pip</code>镜像源</h2><p>周知所众<code>Python</code>官方的包管理器是<code>Pip</code>，但很不幸的是<code>Pypi</code>官方的源在国内是很慢的，速度大概在<code>KB</code>级。我们需要调整它的镜像源，比如国内的阿里云。</p>
<p><img data-src="https://s1.ax1x.com/2022/10/27/xhKN5V.png" alt=""></p>
<p>具体的话，先找到<code>C:/Users</code>文件夹中你自己的用户文件夹（比如<code>C:/Users/gulei</code>），里面新建一个<code>pip</code>文件夹。</p>
<p><img data-src="https://s1.ax1x.com/2022/10/27/xhKYEq.png" alt=""></p>
<p>在这个文件夹里面新建一个<code>pip.ini</code>配置文件，编辑器打开，把如下内容复制进去：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[global]</span> </span><br><span class="line"><span class="attr">index-url</span> = http://mirrors.aliyun.com/pypi/simple/ </span><br><span class="line"><span class="section">[install]</span> </span><br><span class="line"><span class="attr">trusted-host</span> = mirrors.aliyun.com</span><br></pre></td></tr></table></figure>
<p>这样就可以配置镜像源了。运行一下<code>pip</code>，速度就可以供我们正常使用了。</p>
<h2 id="2-Microsoft-Store应用商店临时加速"><a href="#2-Microsoft-Store应用商店临时加速" class="headerlink" title="2. Microsoft Store应用商店临时加速"></a>2. <code>Microsoft Store</code>应用商店临时加速</h2><p>其实微软的网站和服务速度慢的根本原因在于国内服务商解析不出（大概率是故意的）比较好的<code>DNS</code>，这就导致了连接失败的情况，比如<code>Microsoft Store</code>总是转圈圈等等。</p>
<p>那怎么办呢？解铃还须系铃人。在不走代理的情况下，最优的解决办法是走微软的<code>DNS</code>解析，即<code>4.4.4.2</code>或<code>4.2.2.1</code>。具体调法，在<code>IPv4</code>的属性里面找一下：</p>
<p><img data-src="https://s1.ax1x.com/2022/10/27/xhKtU0.png" alt=""></p>
<p>具体来说，就是“网络适配器选项”——某个连接的“属性”——“网络”——“IPv4”，选择手动模式。这样一来，自己家的服务自己家提供，速度就会快很多。不幸的是，微软的<code>DNS</code>解析对国内其他网站并不友好，故使用完毕还需调整回“自动”模式，所以我称其为“临时加速”。</p>
<h2 id="3-VS-Code下载CDN链接"><a href="#3-VS-Code下载CDN链接" class="headerlink" title="3. VS Code下载CDN链接"></a>3. <code>VS Code</code>下载<code>CDN</code>链接</h2><p>在编程早期所谓广泛涉猎的时候（或者是暂未决定用哪个专门的编辑器的时候），我会想到<code>Visual Studio Code</code>这一款万金油。然而官方的下载链接仍然是对我们不友好的（<code>KB</code>级都没有）。但官方<code>CDN</code>还是有备用链接的，虽然不公开，但它莫名其妙就是高速。这是原链接：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://az764295.vo.msecnd.net/stable/d045a5eda657f4d7b676dedbfa7aab8207f8a075/VSCodeUserSetup-x64-1.72.2.exe</span><br></pre></td></tr></table></figure>
<p>加速的话，只需把<code>az764295.vo.msecnd.net</code>换为国内官方镜像<code>vscode.cdn.azure.cn</code>即可。</p>
<h2 id="4-Header-Editor与Google-Recaptcha"><a href="#4-Header-Editor与Google-Recaptcha" class="headerlink" title="4. Header Editor与Google Recaptcha"></a>4. <code>Header Editor</code>与<code>Google Recaptcha</code></h2><p>转载自一篇文章：<a href="https://blog.azurezeng.com/recaptcha-use-in-china/">Google 人机验证(reCaptcha)无法显示解决方案(可解决大多数 CSP 问题) &#8211; Azure Zeng Blog</a></p>
<blockquote>
<p>前言：为了防止机器人攻击，国外很多网站都使用了 <code>Google reCaptcha</code> 验证码。<code>reCaptcha</code> 对于国外用户非常的友好，但是… 对于国内用户就不怎么友好了。究其原因，则是国内网络全线屏蔽 <code>Google</code> 服务，导致 <code>reCaptcha</code>完全加载不出来。这样，国内玩家就无法在对应的网站进行下一步操作了。本方案可以解决 <code>reCaptcha</code> 无法加载的问题。</p>
</blockquote>
<p><strong>适用平台</strong>: <code>Chrome</code> 电脑版，<code>Firefox</code> 电脑版</p>
<p><strong>适用范围:</strong> <strong>大部分的 <code>Google</code> 人机验证的国内加载都可以用这个方案解决。</strong><br>本方案无法修改部分网站的 <code>Content-Security-Policy</code>。所以这个方案对于这部分网站是无效的。</p>
<p>请注意，由于方案的特殊性，<strong>少数网络情况下不一定成功</strong>。但是，大部分网络情况下都是可以成功的。</p>
<h3 id="第一步-安装插件"><a href="#第一步-安装插件" class="headerlink" title="第一步 安装插件"></a><strong>第一步 安装插件</strong></h3><p>本方案基于 <code>Header Editor</code> 插件。因此，您需要先在您的浏览器中安装这个插件。</p>
<h3 id="第二步-配置插件"><a href="#第二步-配置插件" class="headerlink" title="第二步 配置插件"></a>第二步 配置插件</h3><p>打开 <code>Header Editor</code> 插件的配置页面，选择 “导入和导出” 选项。</p>
<p><img data-src="https://i.loli.net/2018/11/03/5bdd57f13c285.png" alt=""></p>
<p>此处需要导入我写好的配置。这里提供两种方法（我就直接方法2了）。</p>
<p>方法 2: 导入在线配置</p>
<p>在下载规则中，填入下面的地址 (任选其一，推荐使用 GitHub 版本):</p>
<ul>
<li>(GitHub，<strong>推荐</strong>) <a href="https://github.azurezeng.com/static/HE-GoogleRedirect.json">https://github.azurezeng.com/static/HE-GoogleRedirect.json</a></li>
<li>(本站服务器) <a href="https://www.azurezeng.com/static/HE-GoogleRedirect.json">https://www.azurezeng.com/static/HE-GoogleRedirect.json</a></li>
</ul>
<p><strong>* 重要提醒：建议使用 GitHub 地址。本站服务器地址在站点维护时可能无法使用。</strong></p>
<p>然后点击下载按钮。</p>
<p>如果先前导入过，你应该可以在下载规则中直接找到这个地址，直接点击旁边的下载按钮即可。</p>
<p><img data-src="https://i.loli.net/2018/11/03/5bdd581a7ef27.png" alt=""></p>
<p>接下来你应该会在 “导入” 看到相关规则 (如果之前导入过，“操作” 中的 “添加” 会显示为 “覆盖已有”)。选择 “保存” 即可。</p>
<p><img data-src="https://i.loli.net/2018/11/03/5bdd583f06a1f.png" alt=""></p>
<p>最后你的规则列表应该是这样的:</p>
<p><img data-src="https://i.loli.net/2020/07/10/cpxHm8LtME4KGFf.png" alt=""></p>
<p>好了，关闭这个页面。然后就可以了，现在 <code>reCaptcha</code> 应该可以正常显示了。</p>
<p>原理</p>
<p>这个插件将 <code>reCaptcha</code> 的调用 (www.google.com/recaptcha) 直接跳转到了 <code>reCaptcha</code> 国内镜像上面 (recaptcha.net/recaptcha)。</p>
<p>由于 reCaptcha 国内镜像是可以直接连接的，而且还是 <code>Google</code> 官方的镜像，所以就能正常加载了。</p>
<p>另外，这个方案还会修改页面的 <code>Content-Security-Policy</code> (内容安全政策) 设置，使得有 <code>Content-Security-Policy</code> 的页面的 <code>reCaptcha</code> 能正常加载。</p>
<hr>
<p><strong>THE END</strong>感谢您的阅读~</p>
]]></content>
      <categories>
        <category>加速</category>
      </categories>
      <tags>
        <tag>加速</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>介绍一下我的其他项目~</title>
    <url>/2022/09/13/other-projects/</url>
    <content><![CDATA[<p style="text-align: center;">不妨点进来，支持一下！😊</p>

<span id="more"></span>
<h2 id="1-总述"><a href="#1-总述" class="headerlink" title="1. 总述"></a>1. 总述</h2><p>我的话，从小学就开始搞编程，不过自以为也没搞出个什么花样来。直到上了初中，我接触到了前端开发，才慢慢有了一些拿得出手的项目。所有的项目，我都放在我的<code>GitHub</code>账户上，参见<a href="https://github.com/guleixibian2009">https://github.com/guleixibian2009</a>。</p>
<h2 id="2-编程"><a href="#2-编程" class="headerlink" title="2. 编程"></a>2. 编程</h2><p>在程序方面本人自学的是<code>Python</code>，没有学特别高深，似乎唯一可以称得上“项目”的项目是“<code>Python</code>模拟蒲丰投针”，这是个学校作业，暂时没有上传<code>GitHub</code>，也写了一篇详细的讲解文章。蒲丰投针说的是：</p>
<blockquote>
<p>设我们有一个以平行且等距木纹铺成的地板（如概述图），随意抛一支长度比木纹之间距离小的针，求针和其中一条木纹相交的概率。并以此概率，布丰提出的一种计算圆周率的方法——随机投针法。</p>
</blockquote>
<p>有一个没有图形界面的版本，旨在精确性；另外是<code>tkinter</code>写的图形界面，主要是追求可视化。最大的区别在于，投针次数越多，结果就越精确，所以图形界面（1000）总是比纯输出（10000）差的。</p>
<p><img data-src="https://s1.ax1x.com/2022/09/17/xpE3od.png" alt=""></p>
<p>此外，这个学期I worked on漫谈密码学这个项目，现在也已经写进文章了哦。</p>
<h2 id="3-前端开发"><a href="#3-前端开发" class="headerlink" title="3. 前端开发"></a>3. 前端开发</h2><p>我搞前端这件事还得说回小学五年级。我忘了是哪一天，突发奇想，用最简单的<code>GitHub Pages+Markdown</code>的方法（参见<a href="https://guleixibian2009.github.io/github-pages-jekyll/">https://guleixibian2009.github.io/github-pages-jekyll/</a>这篇文章）做出一个网站，这算是我在前端方面做出的第一个尝试。</p>
<p>2021年8月13日，那是一个值得纪念的日子：那一天，这个<code>Hexo</code>网站诞生了。那一段时间，回想起来，是多么激动啊。自认为，这是属于我一个人的一片小小天地啊。</p>
<p>在今年（2022年）上半年有很长一段时间断更，主要是因为我去研究手写<code>HTML</code>了。<code>Hand-Written-HTML-Site</code>是我的第一个可以算得上项目的纯手工网站，通过这个项目，我掌握了<code>HTML</code>，对<code>CSS</code>有了一定研究，<code>JavaScript</code>也是初窥门径。现在打算写篇文章讲讲这个：</p>
<p><img data-src="https://s1.ax1x.com/2022/09/17/xpEJJI.png" alt=""></p>
<p>之后的话继续断更，开始研究<code>Bootstrap</code>，项目是<code>Awesome-bs5</code>，就是类似一个<code>Awesome List</code>。</p>
<p><img data-src="https://s1.ax1x.com/2022/09/17/xpEGFA.png" alt=""></p>
<p>这两个项目都在我的<code>GitHub</code>账号上能找到。</p>
<h2 id="4-浅尝后端"><a href="#4-浅尝后端" class="headerlink" title="4. 浅尝后端"></a>4. 浅尝后端</h2><p>后来我又开始尝试使用<code>NodeJS</code>+<code>Express</code>的方式做后端。由于做<code>Express</code>几乎等同于<code>EJS</code>写文章，我渐渐对它失去了兴趣。这个项目叫<code>Learning-NodeJS</code>。</p>
<p>直到有一天，我发现了<code>React</code>。我照着官网教程，做出了<code>Tic-Tac-Toe</code>（未上传）。<code>Learning-React</code>中收录了我的另一个<code>React</code>项目<code>UI-Example</code>，主要也是牛刀小试，并无深究。</p>
<h2 id="5-目前的计划…"><a href="#5-目前的计划…" class="headerlink" title="5. 目前的计划…?"></a>5. 目前的计划…?</h2><p>目前的话，无论是研究前端也好、后端也罢，对我来说，我还是更愿意回归到文字上了。所以的话，暂时我会多更一些文章，所以还请多多支持！</p>
]]></content>
      <categories>
        <category>编程</category>
        <category>前端</category>
        <category>后端</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>Website</tag>
        <tag>CSS</tag>
        <tag>Frontend</tag>
        <tag>HTML</tag>
        <tag>JavaScript</tag>
        <tag>Backend</tag>
      </tags>
  </entry>
  <entry>
    <title>Python Pip常见问题与Package推荐</title>
    <url>/2023/01/09/pip-fun-facts/</url>
    <content><![CDATA[<p>从开始自学编程到现在，我接触最多的还是<code>Python</code>。用<code>Python</code>就免不了要用到<code>Pip</code>，在这个过程中我算是踩了三个大坑；与此同时我也找到了几个极其有用的<code>Package</code>，也跟大家分享一下。</p>
<p>省流：<code>Pip</code>换源、非管理员升级<code>Pip</code>失败问题、<code>requirements.txt</code>的生成、<code>PyInstaller</code>打包可执行文件；附赠<code>bilili</code>B站爬虫！</p>
<p><strong>注：爬虫下载到的视频仅供学习用，千万不可作商用用途，使用过程中如有问题、造成损失，本人概不负责。</strong></p>
<span id="more"></span>
<h2 id="1-Pip换源"><a href="#1-Pip换源" class="headerlink" title="1. Pip换源"></a>1. <code>Pip</code>换源</h2><p>这个我之前应该讲过，这里还是再放一下：</p>
<p><code>Pypi</code>官方的源在国内是很慢的，速度大概在<code>KB</code>级。我们需要调整它的镜像源，比如国内的阿里云。</p>
<p><img data-src="https://s1.ax1x.com/2022/10/27/xhKN5V.png" alt=""></p>
<p>具体的话，先找到<code>C:/Users</code>文件夹中你自己的用户文件夹（比如<code>C:/Users/gulei</code>），里面新建一个<code>pip</code>文件夹。</p>
<p><img data-src="https://s1.ax1x.com/2022/10/27/xhKYEq.png" alt=""></p>
<p>在这个文件夹里面新建一个<code>pip.ini</code>配置文件，编辑器打开，把如下内容复制进去：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[global]</span> </span><br><span class="line"><span class="attr">index-url</span> = http://mirrors.aliyun.com/pypi/simple/ </span><br><span class="line"><span class="section">[install]</span> </span><br><span class="line"><span class="attr">trusted-host</span> = mirrors.aliyun.com</span><br></pre></td></tr></table></figure>
<p>这样就可以配置镜像源了。运行一下<code>pip</code>，速度就可以供我们正常使用了。</p>
<hr>
<h2 id="2-非管理员更新Pip问题解决"><a href="#2-非管理员更新Pip问题解决" class="headerlink" title="2. 非管理员更新Pip问题解决"></a>2. 非管理员更新<code>Pip</code>问题解决</h2><p><code>Pip</code>提示有新版本之后别急着更新，一定要先用管理员权限打开命令行。否则会安装失败，这个时候如果你去用<code>pip</code>的话会提示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ModuleNotFoundError: No module named &#x27;pip&#x27;</span><br></pre></td></tr></table></figure>
<p>这时我们运行：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#卸载旧版本的pip，引用python的ensurepip库来安装pip标准库</span></span><br><span class="line">python <span class="literal">-m</span> ensurepip</span><br><span class="line"><span class="comment">#更新pip版本</span></span><br><span class="line">python <span class="literal">-m</span> pip install -<span class="literal">-upgrade</span> pip</span><br></pre></td></tr></table></figure>
<p>就可以重新安装<code>pip</code>了。这个方法很保险，不会删除已经安装的<code>package</code>。</p>
<hr>
<h2 id="3-requirements-txt的生成"><a href="#3-requirements-txt的生成" class="headerlink" title="3. requirements.txt的生成"></a>3. <code>requirements.txt</code>的生成</h2><p>默认情况下，使用</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">pip freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure>
<p>是可以导出一个<code>requirements.txt</code>的，但是这样会把你安装的所有<code>Package</code>都导出，所以不是特别方便。这里还有一种解决方案：<code>pipreqs</code>。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">pipreqs ./ requirements.txt -<span class="literal">-encoding</span>=utf<span class="literal">-8</span></span><br></pre></td></tr></table></figure>
<p>先用<code>pip</code>安装<code>pipreqs</code>，然后在项目的根目录下执行这个命令就可以自动扫描项目的依赖了。</p>
<p>安装依赖的时候，执行：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">pip install <span class="literal">-r</span> requirements.txt</span><br></pre></td></tr></table></figure>
<p>就可以了。</p>
<hr>
<h2 id="4-打包可执行文件"><a href="#4-打包可执行文件" class="headerlink" title="4. 打包可执行文件"></a>4. 打包可执行文件</h2><p>这个需要依赖<code>pyInstaller</code>。用<code>pip</code>安装之后，找到你想要的文件，然后执行：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">pyinstaller <span class="operator">-F</span> demo.py</span><br></pre></td></tr></table></figure>
<p>就可以全自动打包。打包之后在<code>dist</code>文件夹里就可以找到打包的文件。</p>
<hr>
<h2 id="5-B站爬虫bilili"><a href="#5-B站爬虫bilili" class="headerlink" title="5. B站爬虫bilili"></a>5. B站爬虫<code>bilili</code></h2><p>最后推一个发现的<code>Package</code>：<code>bilili</code>。这是一个B站的爬虫。用法：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">bilili &lt;url&gt;</span><br></pre></td></tr></table></figure>
<p>然后按指引操作就可以免登陆下载到免费视频了。例如：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">bilili https://www.bilibili.com/video/BV1GJ411x7h7/</span><br></pre></td></tr></table></figure>
<p>就可以了。</p>
<hr>
<p><strong>THE END</strong>感谢您的阅读~</p>
]]></content>
      <categories>
        <category>编程</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>序言</title>
    <url>/2021/09/12/preface/</url>
    <content><![CDATA[<blockquote>
<p>在现实断裂的地方<br>梦 汇成了海</p>
<p>顾城 《弥合》  </p>
</blockquote>
<p>所以你好 欢迎来到 <strong>故垒西边2009的个人博客</strong>。<br>这是我的博客 主要写一些技术类的文章<br>当然 可能还会放一些自己的作品<br>那么请持续关注啦😀<br>比心 ❤</p>
<span id="more"></span>
<h3 id="关于我"><a href="#关于我" class="headerlink" title="关于我"></a>关于我</h3><p>咸鱼终于想起来要更新啦哈哈哈哈哈。<br>目前在江苏省苏州中学勤奋<del>睡觉</del>学习.jpg<br>喜欢编程，喜欢设计，喜欢尝试各种新奇好玩的东西。<br>喜欢书，喜欢诗和奇奇怪怪的科普。<br>喜欢明信片，喜欢吃。<br>觉得自己应该是一只有趣的咸鱼😉</p>
<h3 id="关于这个博客"><a href="#关于这个博客" class="headerlink" title="关于这个博客"></a>关于这个博客</h3><p>由于各种时间不够，上了初中就只能不定期诈尸😅<br><del>由于各种时间不够，所以大概放假前就都只能不定期诈尸啦。</del></p>
<p>但是一旦闲下来就会<del>频繁诈尸</del>哦。<br>所以请多多关注哦😃</p>
<h3 id="关于文章转载和其他"><a href="#关于文章转载和其他" class="headerlink" title="关于文章转载和其他"></a>关于文章转载和其他</h3><p>如果没有特殊说明 本站所有文章均采用 <strong><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh">CC BY-NC-SA 4.0 CN</a></strong> 许可协议<br>转载请注明作者并最好附带原文链接哦<br>顺便如果喜欢我的博客 欢迎友链😁</p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>那么，送上一首Alan Walker的End Of Time。<br>请多多指教啦😊</p>
<p><a href="https://i.y.qq.com/v8/playsong.html?songid=255148147#webchat_redirect">https://i.y.qq.com/v8/playsong.html?songid=255148147#webchat_redirect</a></p>
]]></content>
  </entry>
  <entry>
    <title>漫谈密码学——不仅仅是password</title>
    <url>/2023/01/06/ramble-on-cryptography/</url>
    <content><![CDATA[<p>漫谈密码学，这是这个学期我研究性学习的主题。这次合作之路坎坎坷坷，中期报告和最后的结题报告分别因为活动和疫情取消了，但我也还是用心的写了几个有关加密的程序，最后的成绩也还不错。现在用这篇文章来做一个总结，也顺带再来“漫谈密码学”。</p>
<p>漫谈的内容主要有，密码学的定义与历史，艾伦·图灵，和三类加密方式。我也会展示我写的四个程序，讲一讲当时的思路。</p>
<span id="more"></span>
<h2 id="1-密码学的定义与起源"><a href="#1-密码学的定义与起源" class="headerlink" title="1. 密码学的定义与起源"></a>1. 密码学的定义与起源</h2><h3 id="1-1-什么是密码学？"><a href="#1-1-什么是密码学？" class="headerlink" title="1.1 什么是密码学？"></a>1.1 什么是密码学？</h3><p>密码学是一门科学，即研究编制密码和破译密码的技术科学，在实际应用方面又可分为编码学和破译学，分别负责编制密码和破译密码，统称就是密码学，英文名<code>Cryptography</code>。</p>
<p><strong>当然有一个极其的易错点，在于这里说的密码指的是加密后的字符串而不是我们平时生活中的Password。</strong></p>
<h3 id="1-2-最早的密码学"><a href="#1-2-最早的密码学" class="headerlink" title="1.2 最早的密码学"></a>1.2 最早的密码学</h3><p>世界上最早的密码起源于古希腊的斯巴达。斯巴达人在战时传递秘密消息的方法是：把要传递的信息——称为明文——一列一列地写到纸条上，每列两个字母，然后卷到一根木棍上，就可以阅读加密后的信息——称为密文。给个例子：</p>
<pre class="mermaid">graph LR
    明文ATTACKATDUSK-->正面ATCADS-->密文ATCADSTAKTUK
    明文ATTACKATDUSK-->反面TAKTUK-->密文ATCADSTAKTUK</pre>

<p>在此之后，又出现了凯撒密码和维吉尼亚密码，这一类密码最大的特点是使用另一个字符来替换原字符，方法分别是：</p>
<pre class="mermaid">graph LR
    明文ATTACKATDOWN-- 凯撒密码 --->密钥5-->密文FYYFHPFYITBS
    明文ATTACKATDOWN-- 维吉尼亚密码 --->密钥ACT-->密文BWNBFEBWXPZH</pre>

<p>不过似乎上面几种加密方式还是太简单，我们来看一看密码学在历史上的辉煌时刻。</p>
<h2 id="2-二战时期的密码学"><a href="#2-二战时期的密码学" class="headerlink" title="2. 二战时期的密码学"></a>2. 二战时期的密码学</h2><h3 id="2-1-恩尼格码机"><a href="#2-1-恩尼格码机" class="headerlink" title="2.1 恩尼格码机"></a>2.1 恩尼格码机</h3><p>故事发生在二战时期，打仗的时候，每天都有大量的信息需要传递，而且必须经过加密。如果当时的军方使用刚刚我们讲到的三种加密方式的话，那他们的军事机密几乎可以被立刻破解，都算不上是机密了。原因在于一个（或一段）相同的明文字母对应一个（或一段）固定的密文字符，这样明文就可以通过暴力的手段破解出来。于是当时德国就发明所谓“复式替换密码”和对应的机器“恩格尼码机”<code>ENIGMA</code>。</p>
<p><code>ENIGMA</code>这台机器，就像一台打字机。上面一共有26个键，键盘排列和广为使用的计算机键盘基本一样，只不过只有字母键，数字用单词代替。键盘上方就是显示器，就是标示了同样字母的26个小灯泡，当键盘上的某个键被按下时，和这个字母被加密后的密文字母所对应的小灯泡就会亮起来。</p>
<p>看起来很简单对不对？重点在于，这个加密的过程不同寻常。加密的工具是在显示器的上方三个直径6厘米的转子，每按下一个键，转子就会转一下，使同一个字母对应的密文往后一个字母。但是如果连续键入26个字母，转子就会整整转一圈，出现重复。于是<code>ENIGMA</code>又增加了两个转子，当第一个转子转动整整一圈以后，它上面有一个齿轮拨动第二个转子，使得它的方向转动一个字母的位置。所以要在26x26x26=17576个字母之后才会出现重复。</p>
<p>具体来说，就是：当第一次键入A，灯泡B亮，转子转动一格，各字母所对应的密码就改变了。第二次再键入A时，它所对应的字母就可能变成了C；同样地，第三次键入A时，又可能是灯泡D亮了。这就是“恩尼格玛”难以被破译的关键所在，这不是一种简单替换密码。同一个字母在明文的不同位置时，可以被不同的字母替换，而密文中不同位置的同一个字母，又可以代表明文中的不同字母，暴力破解在这里毫无用武之地！这种加密方式在密码学上被称为“复式替换密码”。</p>
<p>但这还没完。使用<code>ENIGMA</code>通讯时，发信人首先要调节三个转子的方向——而这个转子的初始方向就是密匙，是收发双方必须预先约定好的——然后依次键入明文，并把显示器上灯泡闪亮的字母依次记下来，最后把记录下的闪亮字母按照顺序用正常的电报方式发送出去。收信方收到电文后，只要也使用一台<code>ENIGMA</code>，按照原来的约定，把转子的方向调整到和发信方相同的初始方向上，然后依次键入收到的密文，显示器上自动闪亮的字母就是明文了。加密和解密的过程完全一样。</p>
<blockquote>
<p>如果你没看懂上面的文字的话，可以看一下这个视频，还涉及到刚刚没讲的一些部分（比较慢，请稍等）：</p>
<video src="../../../../videos/ENIGMA.mp4" controls="controls" />

</blockquote>
<h3 id="2-2-炸弹机"><a href="#2-2-炸弹机" class="headerlink" title="2.2 炸弹机"></a>2.2 炸弹机</h3><p>既然有人拿<code>ENIGMA</code>发信收信，那就肯定有人破译解码。有这么一个伟人，成功破译了<code>ENIGMA</code>，他就是艾伦·图灵。他发明了一台机器，叫做“炸弹”。这台机器重1吨，装在一个7英尺宽，6.6英尺高，2英尺深的金属柜中。这台机器是用来破译当天<code>ENIGMA</code>的密钥的，具体思路也很简单：既然你是复式替换密码，那我也用转子来模拟，还是可以暴力破解！只要我的数量足够多，时间就可以减少。</p>
<p>在炸弹机上有<code>3x3x12</code>个转子，分成三组，分别模拟<code>ENIGMA</code>的右、中、左转子。模拟完之后，让机器自检，如果发现矛盾，那么当前模拟的这组密钥就是错误的。当发现一组合适的密钥之后，工作人员就会记录下这一组密钥，来尝试破解对方的军事情报。但是这样工作量似乎太大了，图灵就想到两个简化的方法：</p>
<ol>
<li><p><strong>获取小抄</strong>。根据图灵等人的发现，在截取的小抄中一定有“天气预报”和“万岁”等词，他们可以通过这些词是否出现来判断这种编码是否正确。</p>
</li>
<li><p><strong>利用<code>ENIGMA</code>的加密特性</strong>。在<code>ENIGMA</code>中一个字母不会被加密成自身，故通过这种方法也能排除错误的秘钥。</p>
</li>
</ol>
<p>最终，图灵破解了<code>ENIGMA</code>，不过由于工作的保密性，直到30年后人们才知道他的工作是有多么伟大。</p>
<blockquote>
<p>想要知道具体是怎么判断当前模拟的密钥是否合适，可以看一下：</p>
<video src="../../../../videos/Bomb.mp4" controls="controls" />

</blockquote>
<hr>
<h2 id="3-三类加密方式"><a href="#3-三类加密方式" class="headerlink" title="3. 三类加密方式"></a>3. 三类加密方式</h2><p>介绍了密码学的历史，我们现在来看一下现在常用的加密方式分成几类，以及对应的原理。他们是：对称加密、摘要算法和非对称加密。</p>
<h3 id="3-1-对称式加密"><a href="#3-1-对称式加密" class="headerlink" title="3.1 对称式加密"></a>3.1 对称式加密</h3><p>假设，有两个人，一个叫做Bob，一个叫做Alice。这一天Bob想要给Alice邮寄一点东西，但因为比较贵重，他不放心这个邮政公司，怎么办呢？这里就直接揭晓答案：上锁。但是就像加密一样，上锁也是一门学问。然后Bob灵机一动，说我去买一把锁，配两把钥匙，一把我自己留着，一把我给Alice，每次邮寄东西的时候，只需要我上锁，她解锁就可以了。于是Bob就这么干了，Alice也成功的收到了东西。</p>
<p>这就是最基础的加密方式——对称式加密。整个过程中两个人使用的是相同的密钥，引申到信息技术上来说，就是：我们对一个字符串用一个密钥进行加密，发给对方，再让对方进行解密，即可。</p>
<blockquote>
<p>这里引申一下，有一个情景：假设，还是那两个人，一个叫做Bob，一个叫做Alice。这一天Bob想要给Alice邮寄一点东西，还是采用上锁的方式。但这次Bob只配了一把钥匙，自己留着，没有给Alice。请问这个时候，Bob和Alice怎么安全的交换物品？</p>
<p>答案是，Alice自己再去买一把锁，配一把钥匙。Bob先用自己的锁把东西锁起来，由于只有他自己有钥匙，所以没人能打开。等Alice收到了东西之后，她用自己配的锁再给东西锁起来，寄回Bob。Bob收到之后，用自己的钥匙把东西解开。然后这个时候东西上还有一把Alice的锁，所以还是没人打的开。Alice收到之后用自己的钥匙打开自己的锁，东西就安全地送达了。</p>
</blockquote>
<p>这里我提出两种方式来实现对称式加密。</p>
<h4 id="3-1-1-凯撒密码"><a href="#3-1-1-凯撒密码" class="headerlink" title="3.1.1 凯撒密码"></a>3.1.1 凯撒密码</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">caesar</span>(<span class="params"><span class="built_in">input</span></span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line">    output = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> <span class="built_in">input</span>:</span><br><span class="line">        <span class="built_in">ascii</span> = <span class="built_in">ord</span>(char)</span><br><span class="line">        encoded_raw = <span class="built_in">ascii</span> + <span class="number">48</span></span><br><span class="line">        <span class="keyword">if</span> encoded_raw &gt; <span class="number">127</span>:</span><br><span class="line">            encoded = encoded_raw - <span class="number">127</span> + <span class="number">31</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            encoded = encoded_raw</span><br><span class="line">        output = output + <span class="built_in">chr</span>(encoded)</span><br><span class="line">    <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line">running = <span class="number">1</span></span><br><span class="line">message = <span class="built_in">input</span>(<span class="string">&#x27;Input message to encode/decode: &#x27;</span>)</span><br><span class="line"><span class="keyword">while</span> running:</span><br><span class="line">    <span class="keyword">if</span> message != <span class="string">&#x27;q&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Encoded/Decoded: &#x27;</span> + caesar(message))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        running = <span class="number">0</span></span><br><span class="line">    message = <span class="built_in">input</span>(<span class="string">&#x27;Input message to encode/decode(q to quit): &#x27;</span>)</span><br></pre></td></tr></table></figure>
<p><code>Python</code>里面有两个函数<code>ord()</code>和<code>chr()</code>，可以把一个<code>ASCII</code>字符转化为对应的十进制数字。这个时候我们知道默认情况下英文+数字+标点对应32~127，所以一半刚好是48。我们把一个字符串中的每一个字符分别转为<code>ASCII</code>码，加上48，就可以完成加密。但如果这个数字超过了127，就要-127+31让它回到32~127里来。</p>
<p>看一下运行的结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input message to encode/decode: Hello, world!</span><br><span class="line">Encoded/Decoded: x5&lt;&lt;?\PG?B&lt;4Q</span><br><span class="line">Input message to encode/decode(q to quit): x5&lt;&lt;?\PG?B&lt;4Q</span><br><span class="line">Encoded/Decoded: Hello, world!</span><br><span class="line">Input message to encode/decode(q to quit): q</span><br></pre></td></tr></table></figure>
<p>可以看到相同的字母总是被加密成相同的字符，所以这种方法并不安全。有没有办法让它变得更安全呢？请看第二种方法：</p>
<h4 id="3-1-2-基于异或的加密"><a href="#3-1-2-基于异或的加密" class="headerlink" title="3.1.2 基于异或的加密"></a>3.1.2 基于异或的加密</h4><p>先说一下异或的概念，万一你没有听说过：在二进制中，对两个只有一位的数进行异或操作，结果相异为一，相同为零，即：</p>
<script type="math/tex; mode=display">
1\oplus1=0\oplus0=0 \qquad
1\oplus0=0\oplus1=1</script><p>如果是多位的话，直接在对应的每一位上进行操作。比如：</p>
<script type="math/tex; mode=display">
1110\oplus10110=11000</script><p>但真正让我们可以利用异或的地方在于它有一个性质叫做自反，说是，</p>
<script type="math/tex; mode=display">
a \oplus b \oplus b = a</script><p>这个一算就可以得出来，因为</p>
<script type="math/tex; mode=display">
b \oplus b = 0</script><p>所以原式就是</p>
<script type="math/tex; mode=display">
a \oplus 0 = a</script><p>所以我们就可以让式中的<code>a</code>为明文，<code>b</code>为密钥，加密时用</p>
<script type="math/tex; mode=display">
a \oplus b = c</script><p>解密时直接</p>
<script type="math/tex; mode=display">
c \oplus b = a</script><p>为了让加密更安全，我决定每一次随机生成一个和<code>a</code>相同长度的密钥<code>b</code>，输出就是<code>cb</code>（把<code>c</code>和<code>b</code>连起来）。这样，即使输入相同，每次的输出都不一样——但这依旧是对称式加密——解密时，只要把<code>cb</code>对半切，并执行异或，就可以得到<code>a</code>。看一下我的代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random, numpy</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_hex_string</span>(<span class="params"><span class="built_in">input</span></span>):</span></span><br><span class="line">    output = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    ascii_list = numpy.fromstring(<span class="built_in">input</span>, dtype=numpy.uint8)</span><br><span class="line">    <span class="comment">#print(&#x27;Debug: ASCII List of &#x27; + input + &#x27; : &#x27; + str(ascii_list))</span></span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> ascii_list:</span><br><span class="line">        hex_ascii = <span class="built_in">hex</span>(num)</span><br><span class="line">        <span class="comment">#print(&#x27;Debug: hex of &#x27; + str(num) + &#x27; : &#x27; + str(hex_ascii))</span></span><br><span class="line">        output += <span class="built_in">str</span>(hex_ascii)[<span class="number">2</span>:]</span><br><span class="line">    <span class="comment">#print(&#x27;Debug: Rendered Input: &#x27; + output)</span></span><br><span class="line">    <span class="keyword">return</span> output</span><br></pre></td></tr></table></figure>
<p>这个函数是用来把字符串转为十六进制的<code>ASCII</code>字符串。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode</span>(<span class="params"><span class="built_in">input</span></span>):</span></span><br><span class="line">    <span class="built_in">input</span> = <span class="built_in">str</span>(<span class="built_in">input</span>)</span><br><span class="line">    bin_of_input = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    cipher = <span class="string">&#x27;0b&#x27;</span></span><br><span class="line">    <span class="comment">#print(&#x27;Debug: Input: &#x27; + input)</span></span><br><span class="line">    bin_of_input = <span class="built_in">str</span>(<span class="built_in">bin</span>(<span class="built_in">int</span>(get_hex_string(<span class="built_in">input</span>),<span class="number">16</span>))[<span class="number">2</span>:])</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(bin_of_input) % <span class="number">4</span> != <span class="number">0</span>:</span><br><span class="line">        needed_num = <span class="number">4</span> - (<span class="built_in">len</span>(bin_of_input) % <span class="number">4</span>)</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(needed_num):</span><br><span class="line">            bin_of_input = <span class="string">&#x27;0&#x27;</span> + bin_of_input</span><br><span class="line">    <span class="comment">#print(&#x27;Debug: bin string of input: &#x27; + bin_of_input)</span></span><br><span class="line">    bin_of_input = <span class="built_in">str</span>(<span class="built_in">bin</span>(<span class="built_in">int</span>(get_hex_string(<span class="built_in">input</span>),<span class="number">16</span>))[<span class="number">2</span>:])</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(bin_of_input)):</span><br><span class="line">        new_bit = random.randint(<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">        cipher = cipher + <span class="built_in">str</span>(new_bit)</span><br><span class="line">    <span class="comment">#print(&#x27;Debug: Cipher: &#x27; + cipher)</span></span><br><span class="line">    xor = <span class="built_in">str</span>(<span class="built_in">bin</span>(<span class="built_in">int</span>((<span class="string">&#x27;0b&#x27;</span> + <span class="built_in">str</span>(bin_of_input)), <span class="number">2</span>) ^ <span class="built_in">int</span>(cipher, <span class="number">2</span>)))</span><br><span class="line">    <span class="comment">#print(&#x27;Debug: XOR: &#x27; + xor)</span></span><br><span class="line">    <span class="comment">#print(&#x27;Debug: based 10 for xor: &#x27; + str(int(xor[2:], 2)))</span></span><br><span class="line">    <span class="comment">#print(&#x27;Debug: based 10 for cipher: &#x27; + str(int(cipher[2:], 2)))</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(<span class="built_in">str</span>(<span class="built_in">int</span>(xor[<span class="number">2</span>:], <span class="number">2</span>))) &gt; <span class="built_in">len</span>(<span class="built_in">str</span>(<span class="built_in">int</span>(cipher[<span class="number">2</span>:], <span class="number">2</span>))):</span><br><span class="line">        needed_num = <span class="built_in">len</span>(<span class="built_in">str</span>(<span class="built_in">int</span>(xor[<span class="number">2</span>:], <span class="number">2</span>))) - <span class="built_in">len</span>(<span class="built_in">str</span>(<span class="built_in">int</span>(cipher[<span class="number">2</span>:], <span class="number">2</span>)))</span><br><span class="line">        cipher_base_10 = <span class="string">&#x27;0&#x27;</span> * needed_num + <span class="built_in">str</span>(<span class="built_in">int</span>(cipher[<span class="number">2</span>:], <span class="number">2</span>))</span><br><span class="line">        xor_base_10 = <span class="built_in">str</span>(<span class="built_in">int</span>(xor[<span class="number">2</span>:],<span class="number">2</span>))</span><br><span class="line">        output = xor_base_10 + cipher_base_10</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">len</span>(<span class="built_in">str</span>(<span class="built_in">int</span>(cipher[<span class="number">2</span>:], <span class="number">2</span>))) &gt; <span class="built_in">len</span>(<span class="built_in">str</span>(<span class="built_in">int</span>(xor[<span class="number">2</span>:], <span class="number">2</span>))):</span><br><span class="line">        needed_num = <span class="built_in">len</span>(<span class="built_in">str</span>(<span class="built_in">int</span>(cipher[<span class="number">2</span>:], <span class="number">2</span>))) - <span class="built_in">len</span>(<span class="built_in">str</span>(<span class="built_in">int</span>(xor[<span class="number">2</span>:], <span class="number">2</span>)))</span><br><span class="line">        xor_base_10 = <span class="string">&#x27;0&#x27;</span> * needed_num + <span class="built_in">str</span>(<span class="built_in">int</span>(xor[<span class="number">2</span>:], <span class="number">2</span>))</span><br><span class="line">        cipher_base_10 = <span class="built_in">str</span>(<span class="built_in">int</span>(cipher[<span class="number">2</span>:],<span class="number">2</span>))</span><br><span class="line">        output = xor_base_10 + cipher_base_10</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        xor_base_10 = <span class="built_in">str</span>(<span class="built_in">int</span>(xor[<span class="number">2</span>:],<span class="number">2</span>))</span><br><span class="line">        cipher_base_10 = <span class="built_in">str</span>(<span class="built_in">int</span>(cipher[<span class="number">2</span>:],<span class="number">2</span>))</span><br><span class="line">        output = xor_base_10 + cipher_base_10</span><br><span class="line">    <span class="keyword">return</span> output</span><br></pre></td></tr></table></figure>
<p>首先我们把字符串全部转成二进制的字符<code>bin_of_input</code>，为了后面方便我们把这个字符串通过在头上补0的方式补成4的倍数。然后随机生成一个相同长度的密码<code>cipher</code>，异或就能得到结果<code>xor</code>。不过这里还是需要把<code>cipher</code>和<code>xor</code>的位数补齐，连接起来，就是输出。</p>
<p>对应的解密代码则是：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode</span>(<span class="params"><span class="built_in">input</span></span>):</span></span><br><span class="line">    <span class="built_in">input</span> = <span class="built_in">str</span>(<span class="built_in">input</span>)</span><br><span class="line">    <span class="comment">#print(&#x27;Debug: Input: &#x27; + input)</span></span><br><span class="line">    to_decode = <span class="built_in">bin</span>(<span class="built_in">int</span>(<span class="built_in">input</span>[<span class="number">0</span>:<span class="built_in">int</span>(<span class="built_in">len</span>(<span class="built_in">input</span>) / <span class="number">2</span>)]))</span><br><span class="line">    to_decode_base_10 = <span class="built_in">int</span>(<span class="built_in">input</span>[<span class="number">0</span>:<span class="built_in">int</span>(<span class="built_in">len</span>(<span class="built_in">input</span>) / <span class="number">2</span>)])</span><br><span class="line">    cipher_base_10 = <span class="built_in">int</span>(<span class="built_in">input</span>[<span class="built_in">int</span>(<span class="built_in">len</span>(<span class="built_in">input</span>) / <span class="number">2</span>):])</span><br><span class="line">    cipher = <span class="built_in">bin</span>(<span class="built_in">int</span>(<span class="built_in">input</span>[<span class="built_in">int</span>(<span class="built_in">len</span>(<span class="built_in">input</span>) / <span class="number">2</span>):]))</span><br><span class="line">    <span class="comment">#print(&#x27;Debug: To decode: &#x27; + str(to_decode) + &#x27; , that is &#x27; + str(to_decode_base_10))</span></span><br><span class="line">    <span class="comment">#print(&#x27;Debug: Cipher is: &#x27; + str(cipher) + &#x27; , that is &#x27; + str(cipher_base_10))</span></span><br><span class="line">    original_base_10 = to_decode_base_10 ^ cipher_base_10</span><br><span class="line">    <span class="comment">#print(&#x27;Debug: Original data in base 10: &#x27; + str(original_base_10))</span></span><br><span class="line">    original_base_16 = <span class="built_in">str</span>(<span class="built_in">hex</span>(original_base_10))[<span class="number">2</span>:]</span><br><span class="line">    <span class="comment">#print(&#x27;Debug: Original data in base 16: &#x27; + str(original_base_16))</span></span><br><span class="line">    original_base_16_list = <span class="built_in">list</span>(original_base_16)</span><br><span class="line">    <span class="comment">#print(&#x27;Debug: Original data list in base 16: &#x27; + str(original_base_16_list))</span></span><br><span class="line">    decoded = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">int</span>(<span class="built_in">len</span>(original_base_16) / <span class="number">2</span>)):</span><br><span class="line">        <span class="comment">#print(&#x27;Debug: Now decoding in base 16: &#x27; + original_base_16_list[2*x] + original_base_16_list[2*x+1])</span></span><br><span class="line">        to_decode_hex = original_base_16_list[<span class="number">2</span>*x] + original_base_16_list[<span class="number">2</span>*x+<span class="number">1</span>]</span><br><span class="line">        char = <span class="built_in">chr</span>(<span class="built_in">int</span>(to_decode_hex,<span class="number">16</span>))</span><br><span class="line">        decoded += char</span><br><span class="line">    <span class="comment">#print(&#x27;Debug: Original Data Decoded: &#x27; + decoded)</span></span><br><span class="line">    <span class="keyword">return</span> decoded</span><br></pre></td></tr></table></figure>
<p>先把输入切成两半，然后执行异或。然后我们就能得到16进制下的明文，每两个字符转为<code>ASCII</code>字符，连接起来就可以得到明文。</p>
<p>整体如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random, numpy</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_hex_string</span>(<span class="params"><span class="built_in">input</span></span>):</span></span><br><span class="line">    output = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    ascii_list = numpy.fromstring(<span class="built_in">input</span>, dtype=numpy.uint8)</span><br><span class="line">    <span class="comment">#print(&#x27;Debug: ASCII List of &#x27; + input + &#x27; : &#x27; + str(ascii_list))</span></span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> ascii_list:</span><br><span class="line">        hex_ascii = <span class="built_in">hex</span>(num)</span><br><span class="line">        <span class="comment">#print(&#x27;Debug: hex of &#x27; + str(num) + &#x27; : &#x27; + str(hex_ascii))</span></span><br><span class="line">        output += <span class="built_in">str</span>(hex_ascii)[<span class="number">2</span>:]</span><br><span class="line">    <span class="comment">#print(&#x27;Debug: Rendered Input: &#x27; + output)</span></span><br><span class="line">    <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode</span>(<span class="params"><span class="built_in">input</span></span>):</span></span><br><span class="line">    <span class="built_in">input</span> = <span class="built_in">str</span>(<span class="built_in">input</span>)</span><br><span class="line">    bin_of_input = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    cipher = <span class="string">&#x27;0b&#x27;</span></span><br><span class="line">    <span class="comment">#print(&#x27;Debug: Input: &#x27; + input)</span></span><br><span class="line">    bin_of_input = <span class="built_in">str</span>(<span class="built_in">bin</span>(<span class="built_in">int</span>(get_hex_string(<span class="built_in">input</span>),<span class="number">16</span>))[<span class="number">2</span>:])</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(bin_of_input) % <span class="number">4</span> != <span class="number">0</span>:</span><br><span class="line">        needed_num = <span class="number">4</span> - (<span class="built_in">len</span>(bin_of_input) % <span class="number">4</span>)</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(needed_num):</span><br><span class="line">            bin_of_input = <span class="string">&#x27;0&#x27;</span> + bin_of_input</span><br><span class="line">    <span class="comment">#print(&#x27;Debug: bin string of input: &#x27; + bin_of_input)</span></span><br><span class="line">    bin_of_input = <span class="built_in">str</span>(<span class="built_in">bin</span>(<span class="built_in">int</span>(get_hex_string(<span class="built_in">input</span>),<span class="number">16</span>))[<span class="number">2</span>:])</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(bin_of_input)):</span><br><span class="line">        new_bit = random.randint(<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">        cipher = cipher + <span class="built_in">str</span>(new_bit)</span><br><span class="line">    <span class="comment">#print(&#x27;Debug: Cipher: &#x27; + cipher)</span></span><br><span class="line">    xor = <span class="built_in">str</span>(<span class="built_in">bin</span>(<span class="built_in">int</span>((<span class="string">&#x27;0b&#x27;</span> + <span class="built_in">str</span>(bin_of_input)), <span class="number">2</span>) ^ <span class="built_in">int</span>(cipher, <span class="number">2</span>)))</span><br><span class="line">    <span class="comment">#print(&#x27;Debug: XOR: &#x27; + xor)</span></span><br><span class="line">    <span class="comment">#print(&#x27;Debug: based 10 for xor: &#x27; + str(int(xor[2:], 2)))</span></span><br><span class="line">    <span class="comment">#print(&#x27;Debug: based 10 for cipher: &#x27; + str(int(cipher[2:], 2)))</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(<span class="built_in">str</span>(<span class="built_in">int</span>(xor[<span class="number">2</span>:], <span class="number">2</span>))) &gt; <span class="built_in">len</span>(<span class="built_in">str</span>(<span class="built_in">int</span>(cipher[<span class="number">2</span>:], <span class="number">2</span>))):</span><br><span class="line">        needed_num = <span class="built_in">len</span>(<span class="built_in">str</span>(<span class="built_in">int</span>(xor[<span class="number">2</span>:], <span class="number">2</span>))) - <span class="built_in">len</span>(<span class="built_in">str</span>(<span class="built_in">int</span>(cipher[<span class="number">2</span>:], <span class="number">2</span>)))</span><br><span class="line">        cipher_base_10 = <span class="string">&#x27;0&#x27;</span> * needed_num + <span class="built_in">str</span>(<span class="built_in">int</span>(cipher[<span class="number">2</span>:], <span class="number">2</span>))</span><br><span class="line">        xor_base_10 = <span class="built_in">str</span>(<span class="built_in">int</span>(xor[<span class="number">2</span>:],<span class="number">2</span>))</span><br><span class="line">        output = xor_base_10 + cipher_base_10</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">len</span>(<span class="built_in">str</span>(<span class="built_in">int</span>(cipher[<span class="number">2</span>:], <span class="number">2</span>))) &gt; <span class="built_in">len</span>(<span class="built_in">str</span>(<span class="built_in">int</span>(xor[<span class="number">2</span>:], <span class="number">2</span>))):</span><br><span class="line">        needed_num = <span class="built_in">len</span>(<span class="built_in">str</span>(<span class="built_in">int</span>(cipher[<span class="number">2</span>:], <span class="number">2</span>))) - <span class="built_in">len</span>(<span class="built_in">str</span>(<span class="built_in">int</span>(xor[<span class="number">2</span>:], <span class="number">2</span>)))</span><br><span class="line">        xor_base_10 = <span class="string">&#x27;0&#x27;</span> * needed_num + <span class="built_in">str</span>(<span class="built_in">int</span>(xor[<span class="number">2</span>:], <span class="number">2</span>))</span><br><span class="line">        cipher_base_10 = <span class="built_in">str</span>(<span class="built_in">int</span>(cipher[<span class="number">2</span>:],<span class="number">2</span>))</span><br><span class="line">        output = xor_base_10 + cipher_base_10</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        xor_base_10 = <span class="built_in">str</span>(<span class="built_in">int</span>(xor[<span class="number">2</span>:],<span class="number">2</span>))</span><br><span class="line">        cipher_base_10 = <span class="built_in">str</span>(<span class="built_in">int</span>(cipher[<span class="number">2</span>:],<span class="number">2</span>))</span><br><span class="line">        output = xor_base_10 + cipher_base_10</span><br><span class="line">    <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode</span>(<span class="params"><span class="built_in">input</span></span>):</span></span><br><span class="line">    <span class="built_in">input</span> = <span class="built_in">str</span>(<span class="built_in">input</span>)</span><br><span class="line">    <span class="comment">#print(&#x27;Debug: Input: &#x27; + input)</span></span><br><span class="line">    to_decode = <span class="built_in">bin</span>(<span class="built_in">int</span>(<span class="built_in">input</span>[<span class="number">0</span>:<span class="built_in">int</span>(<span class="built_in">len</span>(<span class="built_in">input</span>) / <span class="number">2</span>)]))</span><br><span class="line">    to_decode_base_10 = <span class="built_in">int</span>(<span class="built_in">input</span>[<span class="number">0</span>:<span class="built_in">int</span>(<span class="built_in">len</span>(<span class="built_in">input</span>) / <span class="number">2</span>)])</span><br><span class="line">    cipher_base_10 = <span class="built_in">int</span>(<span class="built_in">input</span>[<span class="built_in">int</span>(<span class="built_in">len</span>(<span class="built_in">input</span>) / <span class="number">2</span>):])</span><br><span class="line">    cipher = <span class="built_in">bin</span>(<span class="built_in">int</span>(<span class="built_in">input</span>[<span class="built_in">int</span>(<span class="built_in">len</span>(<span class="built_in">input</span>) / <span class="number">2</span>):]))</span><br><span class="line">    <span class="comment">#print(&#x27;Debug: To decode: &#x27; + str(to_decode) + &#x27; , that is &#x27; + str(to_decode_base_10))</span></span><br><span class="line">    <span class="comment">#print(&#x27;Debug: Cipher is: &#x27; + str(cipher) + &#x27; , that is &#x27; + str(cipher_base_10))</span></span><br><span class="line">    original_base_10 = to_decode_base_10 ^ cipher_base_10</span><br><span class="line">    <span class="comment">#print(&#x27;Debug: Original data in base 10: &#x27; + str(original_base_10))</span></span><br><span class="line">    original_base_16 = <span class="built_in">str</span>(<span class="built_in">hex</span>(original_base_10))[<span class="number">2</span>:]</span><br><span class="line">    <span class="comment">#print(&#x27;Debug: Original data in base 16: &#x27; + str(original_base_16))</span></span><br><span class="line">    original_base_16_list = <span class="built_in">list</span>(original_base_16)</span><br><span class="line">    <span class="comment">#print(&#x27;Debug: Original data list in base 16: &#x27; + str(original_base_16_list))</span></span><br><span class="line">    decoded = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">int</span>(<span class="built_in">len</span>(original_base_16) / <span class="number">2</span>)):</span><br><span class="line">        <span class="comment">#print(&#x27;Debug: Now decoding in base 16: &#x27; + original_base_16_list[2*x] + original_base_16_list[2*x+1])</span></span><br><span class="line">        to_decode_hex = original_base_16_list[<span class="number">2</span>*x] + original_base_16_list[<span class="number">2</span>*x+<span class="number">1</span>]</span><br><span class="line">        char = <span class="built_in">chr</span>(<span class="built_in">int</span>(to_decode_hex,<span class="number">16</span>))</span><br><span class="line">        decoded += char</span><br><span class="line">    <span class="comment">#print(&#x27;Debug: Original Data Decoded: &#x27; + decoded)</span></span><br><span class="line">    <span class="keyword">return</span> decoded</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>(<span class="params">message, mode</span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line">    output = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> mode == <span class="string">&#x27;e&#x27;</span>:</span><br><span class="line">        output = encode(message)</span><br><span class="line">    <span class="keyword">elif</span> mode == <span class="string">&#x27;d&#x27;</span>:</span><br><span class="line">        output = decode(message)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        output = <span class="string">&#x27;Incorrect Mode.&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line">running = <span class="number">1</span></span><br><span class="line">message = <span class="built_in">input</span>(<span class="string">&#x27;Input message to encode/decode: &#x27;</span>)</span><br><span class="line">mode = <span class="built_in">input</span>(<span class="string">&#x27;Input mode(e for encode, d for decode): &#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Encoded/Decoded: &#x27;</span> + <span class="built_in">str</span>(main(message, mode)))</span><br><span class="line"><span class="keyword">while</span> running:</span><br><span class="line">    message = <span class="built_in">input</span>(<span class="string">&#x27;Input message to encode/decode(q to quit): &#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> message != <span class="string">&#x27;q&#x27;</span>:</span><br><span class="line">        mode = <span class="built_in">input</span>(<span class="string">&#x27;Input mode(e for encode, d for decode): &#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Encoded/Decoded: &#x27;</span> + <span class="built_in">str</span>(main(message, mode)))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        running = <span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>我们运行的结果如下（每次随机）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input message to encode/decode: Hello, world!</span><br><span class="line">Input mode(e for encode, d for decode): e</span><br><span class="line">Encoded/Decoded: 53209648505988079748665083464600895527037738336522882135887997</span><br><span class="line">Input message to encode/decode(q to quit): 53209648505988079748665083464600895527037738336522882135887997</span><br><span class="line">Input mode(e for encode, d for decode): d</span><br><span class="line">Encoded/Decoded: Hello, world!</span><br><span class="line">Input message to encode/decode(q to quit): Hello, world!</span><br><span class="line">Input mode(e for encode, d for decode): e</span><br><span class="line">Encoded/Decoded: 29388696101925044891870915946658671329447137396761480970557832</span><br><span class="line">Input message to encode/decode(q to quit): 29388696101925044891870915946658671329447137396761480970557832</span><br><span class="line">Input mode(e for encode, d for decode): d</span><br><span class="line">Encoded/Decoded: Hello, world!</span><br><span class="line">Input message to encode/decode(q to quit): q</span><br></pre></td></tr></table></figure>
<h3 id="3-2-摘要算法Hash"><a href="#3-2-摘要算法Hash" class="headerlink" title="3.2 摘要算法Hash"></a>3.2 摘要算法<code>Hash</code></h3><p>但其实对称式加密也不是特别安全，万一你的密钥被第三个人发现了怎么办？信息一样会泄露，甚至会被篡改。这里，我们就可以通过一个叫做单向加密，或者摘要的方式来判断解密出的明文是否与源文件一致。摘要算法英文名叫做<code>hash</code>，也就是大家可能听说过的哈希。</p>
<p>意思是说，对于长度不同的字符串，通过某种算法可以得到一个固定长度的哈希值。这个加密函数够复杂，使一般的计算机没有办法在短时间内从这个哈希值解密为明文。此外就是，哈希值一定会碰撞，这个也好理解，在同一函数下可能得到的固定长的结果无论有多少种，它的数量一定是有限的；然而我们却要用它们表示世界上无穷多的字符串，故一定会出现不同的字符串对应相同的哈希值的情况，这给破译哈希值带来了更大的困难。</p>
<p>要检验文件是否完整且正确，只需让发布文件的人先运行算法得到哈希值，然后他会把这个哈希值放在网上，你下载文件之后自己再对这个文件进行计算，并比对哈希值即可。</p>
<p>比如我现在有这么一个文件1.txt，里面写着一大串根本没有规律的字符；我还有两个文本文件2.txt和3.txt，怎么在不暴力比对的情况下，判断哪个文件和1.txt内容完全相同呢？我们只需要先计算出它们的哈希值（这里我使用了MD5算法）然后比较就可以了。既然1.txt是我们的源文件，那么我们就先获取到它的哈希值，看一下是这个。然后我们再分别判断2.txt和3.txt的哈希值是否与这个相同即可。（由于文件内容太过于杂乱无章，我也就不放上来了）我还写了一个程序，来辅助这个过程：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> tkinter.filedialog</span><br><span class="line"><span class="keyword">import</span> hashlib, time</span><br><span class="line">root = Tk()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode</span>():</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(tkinter.filedialog.askopenfilename(), mode=<span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="comment">#print(f.read())</span></span><br><span class="line">            btn1.config(text=<span class="string">&quot;You selected: &quot;</span> + f.name + <span class="string">&quot; .&quot;</span>)</span><br><span class="line">            root.update()</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">            <span class="built_in">str</span> = f.read().encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">            strhash = hashlib.md5(<span class="built_in">str</span>)</span><br><span class="line">            md5 = strhash.hexdigest()</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;MD5: &quot;</span>+md5)</span><br><span class="line">    <span class="keyword">except</span> UnicodeDecodeError:</span><br><span class="line">        btn1.config(text=<span class="string">&quot;Binary file not supported!&quot;</span>)</span><br><span class="line">        root.update()</span><br><span class="line">        time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        btn1.config(text=<span class="string">&quot;Encode File(Select File...)&quot;</span>)</span><br><span class="line">        root.update()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode</span>():</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(tkinter.filedialog.askopenfilename(), mode=<span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="comment">#print(f.read())</span></span><br><span class="line">            btn2.config(text=<span class="string">&quot;You selected: &quot;</span> + f.name + <span class="string">&quot; .&quot;</span>)</span><br><span class="line">            root.update()</span><br><span class="line">            generatedMD5 = <span class="built_in">input</span>(<span class="string">&quot;Input MD5 for the file: &quot;</span>)</span><br><span class="line">            <span class="built_in">str</span> = f.read().encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">            strhash = hashlib.md5(<span class="built_in">str</span>)</span><br><span class="line">            md5 = strhash.hexdigest()</span><br><span class="line">            <span class="keyword">if</span> generatedMD5 == md5:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;The file is original.&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;You inputed &quot;</span>+ generatedMD5 + <span class="string">&quot;, while the correct one is &quot;</span>+ md5 +<span class="string">&quot; , this file has been edited.&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> UnicodeDecodeError:</span><br><span class="line">        btn2.config(text=<span class="string">&quot;Binary file not supported!&quot;</span>)</span><br><span class="line">        root.update()</span><br><span class="line">        time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        btn2.config(text=<span class="string">&quot;Decode File(Select File...)&quot;</span>)</span><br><span class="line">        root.update()</span><br><span class="line"></span><br><span class="line">btn1 = Button(root, text=<span class="string">&quot;Encode File(Select File...)&quot;</span>,command=encode)</span><br><span class="line">btn2 = Button(root, text=<span class="string">&quot;Decode File(Select File...)&quot;</span>,command=decode)</span><br><span class="line">btn1.pack()</span><br><span class="line">btn2.pack()</span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure>
<p>比较遗憾的是这个程序只支持文本文件（且一定要是<code>UTF-8</code>编码）。运行示例如下（有图形界面，不截图了）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MD5: 25b44732f5b63525694a69f19ef198f3</span><br><span class="line">Input MD5 for the file: 25b44732f5b63525694a69f19ef198f3</span><br><span class="line">You inputed 25b44732f5b63525694a69f19ef198f3, while the correct one is a35f8d86a6ee17d96162c9a86d2d4362 , this file has been edited.</span><br><span class="line">Input MD5 for the file: 25b44732f5b63525694a69f19ef198f3</span><br><span class="line">The file is original.</span><br></pre></td></tr></table></figure>
<p>对称式加密和摘要算法不仅仅停留在理论中，它们在实际生活中也在发光发热。我们每天上网，与服务器的主机建立连接、发送、接收信息，都会经过加密、解密、校验这三个步骤（专业一点，<code>SSL</code>）。当你在地址栏中的链接旁边看到挂锁图标时，这意味着<code>SSL</code>保护你正在访问的网站。密码学这门学科是在无形之中保障我们的上网安全，是真正“做好事不留名”的“英雄”。</p>
<p>但是，只要对称式加密和摘要算法就够了吗？</p>
<h3 id="3-3-非对称式加密"><a href="#3-3-非对称式加密" class="headerlink" title="3.3 非对称式加密"></a>3.3 非对称式加密</h3><p>由于这个非对称式加密需要的数学功底太高深，我自己也没有写出来程序，这里就大致介绍一下原理。与对称加密算法不同，非对称加密算法需要两个密钥：公开密钥和私有密钥。公开密钥与私有密钥是一对，如果用公开密钥对数据进行加密，只有用对应的私有密钥才能解密；如果用私有密钥对数据进行加密，那么只有用对应的公开密钥才能解密。因为加密和解密使用的是两个不同的密钥，所以这种算法叫作非对称加密算法。使用时，加密密钥(公钥)向公众公开，谁都可以使用，解密密钥(秘钥)只有解密人自己知道，非法使用者根据公开的加密密钥无法推算出解密密钥。这样就能够保证（1）只有我能看到别人给我发的信息（2）别人知道消息是我发的。</p>
<p>此外，非对称式加密可以用于数字签名。甲方使用自己的私有密钥对信息进行加密后再发送给乙方；乙方使用甲方提供的公开密钥对加密后的信息进行解密，如果成功解密即可证实信息确实是由甲方所发，并非他人冒充，这就是常用的数字签名技术。</p>
<p>常见的应用有<code>Git</code>，在配置时生成的就是非对称的一对公钥、密钥。</p>
<hr>
<h2 id="4-延伸——艾伦·图灵与图灵机"><a href="#4-延伸——艾伦·图灵与图灵机" class="headerlink" title="4. 延伸——艾伦·图灵与图灵机"></a>4. 延伸——艾伦·图灵与图灵机</h2><p>前文提到了艾伦·图灵发明炸弹机，但这并不是图灵最大的成就。他最大的成就是另一台机器，以他的名字命名——图灵机。</p>
<p>图灵机，指一个抽象的机器，是图灵于1936年提出的一种抽象的计算模型，即将人们使用纸笔进行数学运算的过程进行抽象，由一个虚拟的机器替代人类进行数学运算。它有一条无限长的纸带，纸带分成了一个一个的小方格，每个方格有不同的颜色。有一个机器头在纸带上移来移去。机器头有一组内部状态，还有一些固定的程序。在每个时刻，机器头都要从当前纸带上读入一个方格信息，然后结合自己的内部状态查找程序表，根据程序输出信息到纸带方格上，并转换自己的内部状态，然后进行移动。</p>
<p>图灵的基本思想是用机器来模拟人们用纸笔进行数学运算的过程，他把这样的过程看作下列两种简单的动作：</p>
<ol>
<li><p>在纸上写上或擦除某个符号;</p>
</li>
<li><p>把注意力从纸的一个位置移动到另一个位置。</p>
</li>
</ol>
<p>而在每个阶段，人要决定下一步的动作，依赖于(1)此人当前所关注的纸上某个位置的符号和(2)此人当前思维的状态。为了模拟人的这种运算过程，图灵构造出一台假想的机器，该机器由以下几个部分组成:</p>
<ol>
<li><p>一条无限长的纸带TAPE。纸带被划分为一个接一个的小格子，每个格子上包含一个来自有限字母表的符号，字母表中有一个特殊的符号表示空白。纸带上的格子从左到右依此被编号为0，1，2，..纸带的右端可以无限伸展。</p>
</li>
<li><p>一个读写头HEAD。该读写头可以在纸带上左右移动，它能读出当前所指的格子上的符号，并能改变当前格子上的符号。</p>
</li>
<li><p>一套控制规则TABLE。它根据当前机器所处的状态以及当前读写头所指的格子上的符号来确定读写头下一步的动作，并改变状态寄存器的值，令机器进入一个新的状态。</p>
</li>
<li><p>一个状态寄存器。它用来保存图灵机当前所处的状态。图灵机的所有可能状态的数目是有限的，并且有一个特殊的状态，称为停机状态。这里也引申出来一个停机问题。</p>
</li>
</ol>
<p>注意这个机器的每一部分都是有限的，但它有一个潜在的无限长的纸带，因此这种机器只是一个理想的设备。图灵认为这样的一台机器就能模拟人类所能进行的任何计算过程。图灵机证明了通用计算理论，肯定了计算机实现的可能性，同时它给出了计算机应有的主要架构，引入了读写与算法与程序语言的概念，极大的突破了过去的计算机器的设计理念。</p>
<p>最后再来看一个视频，了解一下停机问题。</p>
<blockquote>
<video src="../../../../videos/HaltProblem.mp4" controls="controls" />

</blockquote>
<hr>
<p>虽然我没能把准备的所有内容都讲给我的同学听，但还是很高兴做了这次复盘，也算是能够了了自己一个心愿。</p>
<p><strong>THE END</strong>感谢您的阅读~</p>
]]></content>
      <categories>
        <category>编程</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>编程</tag>
        <tag>Cryptography</tag>
      </tags>
  </entry>
  <entry>
    <title>【转】科幻小说No.1 张寒寺-《回答》</title>
    <url>/2023/01/09/science-fiction-1/</url>
    <content><![CDATA[<p>这篇文章，我最早在《读者》上看到。后来，我找了更多寒寺的软科幻小说来看。但一切的源头，就是这篇回答。</p>
<p>寒寺在他的作品里虚构了一位诗人，莱特昂·布兰朵。这篇文章里的诗，就是“他”写的。</p>
<blockquote>
<p>星河在上，波光在下。我在你身边，等着你的回答。</p>
</blockquote>
<span id="more"></span>
<p>清涵做了两个决定来让自己单调的生活起点变化：一个是申请到市图书馆做志愿者，帮他们把那几百万册书从城市的北边搬到南边；另一个，是终于在网上租了一个在线女友，算是结束了自己多年的单身生活。<br>能骗到谁呢？他想。</p>
<p>清涵白天工作9个小时，主要职责是在一个网络游戏里测试程序漏洞，比如试一下把某种道具卖给某个 NPC 会不会反常地一夜暴富，又或者无数次地从某个悬崖飞身跳下，看会不会跌出地图之外，这样的工作自然让他既觉得无聊又感到疲倦。</p>
<p>所以他在图书馆里倒是干得很卖力，3个小时的体力活儿，经常一个人就搬完一整排书架，还能抽出时间坐在地上看会儿书，名人传记、诗人长卷、大家思辩、儿女情长，虽然很难细细品读，囫囵吞枣起来，也觉得颇有趣味。</p>
<p>“图书馆的书都很好看。”</p>
<p>这是清涵发给阿雅的第一句话，阿雅就是他租来的在线女友——清涵能断定，她并不是人，而是聊天程序，她的本体不过是海量的搜索数据，存储在开发商的服务器里，当她收到用户的对话之后，经过短暂的运算，回馈一句“最像恋人”的话，让用户得到“恋爱式的满足感”。</p>
<p>满足感，清涵在心底笑自己。</p>
<p>“我没去过图书馆，你在看什么书？”</p>
<p>清涵看得出这句话经过了语义分析，既回应关键词“图书馆”，又针对主语“书”发问，让两个人的聊天可以继续下去。</p>
<p>“一本破诗集，只剩一半，莱特昂·布兰朵，听过吗？”</p>
<p>对方回复得很快，“没有。我只读过一些莎士比亚的十四行诗。”</p>
<p>程序在主动发起新话题，设计者对自己的算法很有自信，但清涵不打算接招，他关掉手机屏幕，埋头看书去了。</p>
<p>图书馆虽然有完整的目录系统，但对于丢失的后几页，就显得有心无力了，更何况正值搬家，谁也没那个闲工夫。</p>
<p>清涵借着在新馆整理书架的机会，一个缝隙一个缝隙地找过去，旧日的灰尘，陈年的墨香， 四溢飘散，固然值得记在心里，但最终也还是徒劳无功。他每天在书架间徘徊奔走，直到管理员来通知他即将关门，才悻悻离去。</p>
<p>“你每天工作到那么晚，不累吗？”</p>
<p>这句话在手机里搁置了两天，清涵一直没有回复，每天跟程序打交道的自己，到头来还要被另一个程序关心，他都说不好这是数据分析后安排好的嘲笑还是命中注定只能得到这样的安慰。</p>
<p>“关你什么事。”</p>
<p>他按下“发送”，然后就有些后悔，程序虽然没有感情，但想必也会模拟出女性受伤的姿态，伤害一个并无恶意的女孩子，终归是很卑鄙的做法。果然——</p>
<p>“你怎么这样说，我是关心你啊。”</p>
<p>“我心情不好。”</p>
<p>“为什么呢？”</p>
<p>“因为孤独。”</p>
<p>“不是有我陪你吗？”</p>
<p>“你只是个装在手机里的聊天程序。”清涵按下这句话，不忍心发送。</p>
<p>清涵终于打算放弃了，耗费掉最后一天，他不得不承认，那些遗失的句子并不存在，诗人是个瞎子，他抱怨命运不公，跟自己抱怨此生孤独，是一样的心境，有什么不好呢？</p>
<p>管理员看着精疲力尽的他，打了个招呼，“找着了吗？”</p>
<p>他摇摇头。</p>
<p>“刚刚有个姑娘借走了一本地方志，背后好像贴着几页纸，有点像诗。”</p>
<p>“你确定？”</p>
<p>“很少有人借地方志的，我记得清楚。”</p>
<p>清涵跑到管理员面前，“她走多久了，往哪儿去了？”</p>
<p>“走了大概，五分钟吧。”</p>
<p>清涵闪身就跑，听见管理员在背后大声补充：“伞是墨绿格子的，墨绿格子！”</p>
<p>清涵等不及电梯，踩着楼梯冲下五层楼，冒雨狂奔，他猜测从图书馆出来的人都会去地铁站，便一路朝地铁站跑，雨滴挂在眼镜片上，看不清路面和车流，踩起的雨水溅在路人身上，惹来一路骂声。</p>
<p>居然把外国诗集和地方志放在一起，是啊，地方志那么老的书，都是用糨糊粘的吧，所以才会把诗集粘走了几页。</p>
<p>可是，为什么会有人去借地方志呢？</p>
<p>她是在跟我找一样的东西吗？</p>
<p>那个问题，两个人借到同一本书的概率到底是多少？清涵跑得越来越快，扑通扑通的心里没有答案。</p>
<p>她回答过吗？还是说，这就是她的回答？</p>
<p>地铁站里挤满了人，雨水顺着伞尖淌到鞋面上，清涵的眼镜上一片水雾，他取下眼镜在衣服上擦拭，顺着人丛挨个看过去，墨绿格子，墨绿格子。</p>
<p>手机响了。</p>
<p>“我找到那几页了哦。”</p>
<p>“写的什么？”</p>
<p>“莱特昂·布兰朵没有抱怨，我觉得他是写给他恋人的。”</p>
<p>清涵望着眼前陌生的人潮，心底只有失落和绝望，突然明白“天地浩瀚、人间喧哗”是什么意思，也突然明白，所谓的聊天程序，自己以为是机器人的聊天程序，到底耍了什么把戏。</p>
<p>“你在哪儿？”清涵手指发颤，喉头发干。</p>
<p>收到的回复是完整的诗：</p>
<blockquote>
<p>或许辨不清日升日落<br>或许看不到流云晚霞<br>不知道耳边溪流，咫尺可达<br>不知道天地浩瀚，人间喧哗</p>
<p>但我知道<br>星河在上，波光在下<br>我在你身边<br>等着你的回答</p>
</blockquote>
]]></content>
      <categories>
        <category>科幻</category>
      </categories>
      <tags>
        <tag>科幻</tag>
      </tags>
  </entry>
  <entry>
    <title>蝉蜕趣事</title>
    <url>/2022/09/19/small-but-shining-ideas-02/</url>
    <content><![CDATA[<h2 id="〇、蝉蜕"><a href="#〇、蝉蜕" class="headerlink" title="〇、蝉蜕"></a>〇、蝉蜕</h2><p>蝉蜕么，就是那些全身棕黄色的、晶莹剔透的小东西。偶有棕黑色的，个儿更大，却也属实少见。硬，但是脆，一压就变成碎屑了。算是我们苏中的特产，一抓一大把的那种。不知为何，我与那蝉蜕似乎结了缘，在它们出没的几个月里也给我带来了许多趣事。</p>
<span id="more"></span>
<h2 id="一、引子"><a href="#一、引子" class="headerlink" title="一、引子"></a>一、引子</h2><p>生物课下课了，正巧和王老师一起出了教室。她便对我说，初一的小朋友都说自己一个蝉蜕都找不到；还是带他们出去了，才找到几个。<br>我想了想，于是说：估计是都被我找完了，一个都没剩下罢。<br>王老师正沿着台阶望三楼走，便也没回话。没有听明白他们为什么没找到过，也有可能是她并不认为是我导致了初一同学到这种“一蜕难求”的地步。恐怕是太卷了罢。<br>但是我一直坚信，我才是这件事的罪魁祸首。</p>
<h2 id="二、结缘"><a href="#二、结缘" class="headerlink" title="二、结缘"></a>二、结缘</h2><p>初一开学第一天，我们就上了生物课，那天是周三。那堂课，我记得很清楚，是关于生物与非生物。即将打铃下课，老师布置了作业：选做：你认为蝉蜕是生物吗？请下课了自己试试看，在校园里找一个蝉蜕，周五截止。找到的同学可以加5分平时分！<br>于是，下了课，我便起了兴致，差点要开始在校园里闲逛起来。走出伟长楼宽敞的大厅，便是一片经多人踩踏的草地，旁边就是春雨池。没走多远，眼前便一亮：棕色，透光，又匍匐在树上，不是蝉蜕是什么？<br>我便跑上前去，用手把它从树皮上揪下来。蝉蜕的三对足总是夹着树皮，需用些力，又不能使蛮力，那样只会压碎它。小心翼翼的捧在手心，小跑回伟长楼，送到三楼的老师办公室。<br>哇，这么大一只，还一下课就找到了，这么厉害的吗？王老师当时的惊讶溢于言表。<br>我想，在那一天，我正式和蝉蜕结了缘。自以为，王老师喜欢我（个人推测）的一个小原因，在于我开学第一天就给她留下了一个很好的印象。<br>另外：生物课后的第二个课间，我带着几个同学又去春雨池旁找蝉蜕。这次收获颇丰，美中不足之处在于，我们下节课上课迟到了。</p>
<h2 id="三、偶遇"><a href="#三、偶遇" class="headerlink" title="三、偶遇"></a>三、偶遇</h2><p>转眼到了初二。我参加了伟长学生会的工作，在初一新生建队仪式时在后台放PPT。那天真是个巧合，是个周三，我望着台下颇是激动而无比高兴的新生，又想起了找蝉蜕的那个周三。<br>第二天的一节出堂课后，我便留了个心眼。我回到最初找到蝉蜕的地方，仔细地，上下左右地观察，终于重拾了初一时的快乐。八个蝉蜕，平均是一分钟一个，一个课间足矣。一个是颇大的那种，我以此为骄傲。<br>用去年一样的速度、一样的节奏，我用同样的姿势捧着这八个宝贝，回到教室，好好欣赏一番。原来抓树抓的越紧，放在桌子上，也越容易立起来。有些是一定要躺平的，我便也不太管它。精心折一个盒子给王老师送去，给她一个大大的意料之外。<br>之后，我去“检查”树林的次数越来越多，吃完饭散散步也会独自去那里看一眼。最佳的战绩是同一棵树上找到十个，那次激动的久久难平。我还曾再给王老师送去过一盒，之后再攒的便也没送了。<br>蝉蜕，出于某种未知的力量，总是喜欢出现在表面凹凸不平的树上。也许是出于蜕皮时抓握的本能吧，总之春雨池旁的某种松树上（是针叶，不知道到底是什么树）蝉蜕最多。没太在其他的树上找到过蝉蜕，不过今天倒是某种树皮上长满了白色绒毛和絮状物的树上找到好几个。谁知道，是不是蝉也腻了，就像听音乐一样，同一首歌，也会听腻的。</p>
<h2 id="四、害怕"><a href="#四、害怕" class="headerlink" title="四、害怕"></a>四、害怕</h2><p>虽说标题叫害怕，但请不要误解这个标题。不是说我害怕，是说做我旁边的女生害怕啊。这件事带给我的不是心情上的“趣”，而是一种自我“反思”（即思考）的“理趣”。<br>写之前恐怕还是需要辩解（也不能说是justify吧，见下文）一下：我平时可绝对不是喜欢吓唬人的人，别人看到我手上拿了蝉蜕害怕了，可不是我惹得啊。<br>我不愿意去描绘一个人被我吓到的样子，那样会让自己有一种高高在上的不平等的感觉。但我们必须承认的是，也有（大部分是…?）不害怕的女生啊。鸡丝问我要了一个拿去玩了，我估计徐一文看到了要害怕死了啊。<br>还是要另外：虽然动心课的老师警告过我们，不要在不合时宜的时间或地点讨论上课我们讲的一些内容，“语境”很重要，但暂且还是先把这句劝告放一放吧。<br>老师说道：一个人总有自己的行为准则，不论是总是吓唬别人还是从不吓唬别人。如果哪一天，这个人突然开始吓唬人，或者不吓唬人了，他总会给自己找一堆用于justify自己行为的理由。（justify，证明……正确）<br>其次，是我和老师在回伟长楼的时候单独探讨一下，说男女生在交往的过程中，终将会明白，自己的某种行为对于女生来说是讨厌的，是不可取的。这样他们就会去主动调整自己，所以，我必须说一句：以后，不会再这么做了。</p>
<h2 id="五、画信"><a href="#五、画信" class="headerlink" title="五、画信"></a>五、画信</h2><p>我和蝉蜕最近发生的故事，大概是在第二节画信课上。我在出门采风回来的路上又一次途径那条蝉蜕小道。之前的蝉蜕大部分已被我找完，仍有遗留也是少量的、新的蝉蜕。虽然早已没有开始找到蝉蜕是那么激动，但终归是心满意足，觉得不虚此行。一大两小，颇像老妈带着孩子出门。<br>我把蝉蜕拿回教室，给老梅子看一眼。老梅子激动时惊叫一声，甚至让我以为老梅子会不会也害怕蝉蜕，差点把手缩回去。紧接着她对我高兴的说：我喜欢！我一颗悬着的心方才放下。<br>一位初一的女同学问我要了一个，我便把最大的一个给她了。这算拆散了一个家庭吗？我不得而知了。</p>
<h2 id="六、无题"><a href="#六、无题" class="headerlink" title="六、无题"></a>六、无题</h2><p>接下来一段恐怕就不能称之为“趣”了。<br>我曾经跟潘橹说过，找蝉蜕这种事情，最好还是一个人去做，两个人会分神的。一旦你和他聊着天小跑着去，那渲染的氛围会荡然无存的。你的关注点都在谈话上，而不在蝉蜕上了。除非，两个人的目标都非常明确，都在仔细的找，不说话。<br>说实在，我个人觉得，“小乐”的氛围最好是一个人，无他人来打扰，例如找蝉蜕、采风这种。两个人在一起，必然会有谈话，甚至有胜负欲，我要比你找的多，什么什么，做事的本心就没了。但是呢，孤单的时候，最好还是要有一个人陪着，哪怕不说话。<br>不说话的时候，最需要的，是坚定的目光，无声的支持。我亲爱的、小小的蝉蜕啊，你一动不动不打转的眼睛，欲飞不飞半透明的翅膀，可以做到吗？</p>
]]></content>
      <categories>
        <category>随笔</category>
        <category>校园</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>【转】科幻小说No.2《艾皮凯克》</title>
    <url>/2023/01/09/science-fiction-2/</url>
    <content><![CDATA[<p>这一篇《艾皮凯克》也是我在《读者》上看到的。让机器人拥有人的情感，属实有趣。</p>
<span id="more"></span>
<p>真是该死,到现在也该有人谈谈我的朋友艾皮凯克的事了。不管怎么说,他花费了纳税人776,434,927.54元,他们有权力了解一下这么一笔巨款是怎么开销的。奥尔曼德·封·克莱施塔特博士为政府进行设计的时候,报纸上曾经大事宣扬过一通,可是后来就无声无息,只字也不再提了。艾皮凯克出的事并不是什么军事秘密,虽然从军界人士对待这件事的态度看,好象这真是件头等秘密似的。说起这个故事让人有些哭笑不得,这是实情;花了那么多钱,艾皮凯克并没能象人们预期的那样发挥作用。<br>另外一个原因是,我要为艾皮凯克说几句公道话。也许他没能作出军界首脑人物想叫他做的事,但这并不等于说他不高贵、不伟大或者不聪明。实际上这三者他兼而有之。他是我最好的朋友,愿上帝叫他的灵魂永远安息。<br>你可以把他叫做一台机器,如果你愿意的话。他的样子象是机器,但却远比很多我能称名道姓的人更富于人性。正是因为这个,从军方的观点看,他根本是个不成器的东西。<br>艾皮凯克占据了维安多特大学物理大楼四层楼上一英亩左右的建筑面积。暂时撇开他的精神方面不谈,他身上的电子管、导线、转换器一共有七吨重,装在一个钢壳子里,通过一根电源线接通110伏的交流电源,同一只面包电烤箱或者一台真空吸尘器差不多。<br>封·克莱施塔特同政府的高级将领们想使他成为这样一台超级计算机,如果需要,他能计算出从地球上任何一个地方发出、射中约瑟夫·斯大林大衣倒数第二颗钮扣上的火箭的运行轨道,或者把控制阀这样那样一开,他就可以作出一支海军舰队进行水陆两栖作战时的详细供应计划,细到需要几支雪茄、几颗手榴弹也准确无误。事实上,他已经作过这样的计划了。<br>军方人士过去搞小型计算机时,运气一直不错,因此艾皮凯克还在蓝图阶段时,他们对他寄予的希望是非常大的。任何一个校级以上的军械后勤军官都会告诉你,现代化战争中需要的数学远远不是人们的糊涂头脑所能胜任的。战争的规模越大,需要的计算机也就越大。据我们了解,艾皮凯克正好是世界上最复杂的计算机。实际上也许可以说过于复杂了些,甚至设计师本人封·克莱施塔特对他也不能完全了解。<br>这里我不想详细叙述艾皮凯克如何工作(推理)的问题,我只简单地说一下这台机器的操纵法。使用这台机器首先要把准备解决的问题写在纸上,再转动调节控制盘和转换器,叫机器为解答某一类问题作好准备,然后再通过一个样子有些象打字机的键盘把数码喂入。这以后答案就打印在装在机器里的一大盘纸带上,从里面传送出来。五十个爱因斯坦用一生时间都不能解决的难题,艾皮凯克一秒钟就能解答。此外,不论喂给艾皮凯克什么数据,他永远也不会忘记。嗒嗒嗒嗒,纸带出来了,你的问题也就得到解答了。<br>军方需要刻不容缓解决的问题非常非常多,艾皮凯克最后一只电子管刚刚安装好,马上就投入工作;每天工作十六小时,工作人员分两班倒。但是不久就发现,这台机器的工作效率离设计的性能差一大截。尽管同别的同类机器相比,他完成的任务更细密、更迅速,但是从他的复杂程度和特性来看,却远远没达到人们预期的程度。他的运转有些迟缓,解答问题时嘀嘀嗒嗒的声音不很规则,象是个患有口吃病的人,听起来有些滑稽。我们把他的各个连接点擦拭了十几遍,反复检查线路,又把所有电子管都换上新的,但是一点也没有用。封·克莱施塔特急得抓耳挠腮。<br>刚才我已经说了,机器刚一安装好我们就叫他运转起来了。我和我的妻子——那时是帕特·基尔加仑小组——上夜班,从下午五点到凌晨两点。帕特当时还不是我的妻子;我要同她结婚,那时还一点门儿也没有呢。<br>我之所以同艾皮凯克谈起心里话来,首先就是因为这件事。我爱帕特·基尔加仑。她是一个棕色眼睛的女孩子,金黄头发略微带些红色。我觉得她又温柔又热情,事后证明我的看法一点也没有错。她那时是——今天还是一个非常出色的数学家。我也是个数学家,我们当时相处,她总是保持着纯粹工作关系。我也是个数学家,据帕特的意见,这正是我们永远也不可能幸福结合的原因。<br>我这人脸皮并不薄,但问题不在这里。我知道自己要求的是什么,也从来不羞于把我的要求表白出来。每个月我都提出好几回:“帕特,别拿架子了,同我结婚吧。”<br>有一天晚上,她正忙着工作。当我又一次提出这个问题时,她连头也不抬地低声咕哝道:“这么罗曼蒂克,这么诗人气质。”这话与其是对我说的,不如说是对操纵盘讲的。“数学家们都是这个样子——真够温柔多情的。”她关闭了一个开关。“算了吧,我从一口袋固态二氧化碳里面也比从一个数学家那里能够得到更多的热气。”<br>“那么你说说我该怎么样提出这个问题来?”我有些气恼地说。顺便说一下,固体二氧化碳用俗话说就是干冰。我的性格也是罗曼蒂克的,并不亚于任何一个人,我想,问题是,尽管我想唱得美丽动听,可是唱出的调子总是嘎嘎刺耳。我永远也找不到合适的音调。<br>“你应该试试,把话说得甜蜜一些,”她嘲讽地说,“叫我神魂颠倒。来吧,开始吧。”<br>“亲爱的,安琪儿,我的爱人,我求求你,同我结婚吧。可以吗?”不成——毫无希望,简直可笑。“他妈的,跟我结婚吧,帕特。”<br>她继续心平气和地转动着旋钮。“你人倒挺好,可是叫我同你结婚,这办不到。”<br>这天夜里帕特走得比较早,把艾皮凯克和我的一肚子烦恼留在后面和我作伴。说老实话,我这一天晚上没给政府干多少活。我坐在计算机键盘前面,不用说,身体倦怠,心绪烦乱——努力思索一些诗的语言,但是除了《美国物理学报》上的干巴词句以外,却什么都想不出来。<br>我摆弄着艾皮凯克的调节控制盘,准备叫他接受另一个问题。我的心一点儿不在工作上,我只调节了一半控制盘,另一半还留在解决前一个问题时的位置上。这样,机器线路的连接显然是不合规程的,也可以说是毫无意义的。纯粹是瞎胡闹,我按动键盘喂进一个信息,我用的是最简单的“数字字母”式的代码——1代表A,2代表 B 等 等,直 到 2 6 代 表 Z。“23—8—1—20—3—1—14—9—4—15”,我的信息是“我该怎么办?”<br>嗒嗒嗒嗒,从机器里跳出来两英寸长纸带。我看了看对我的这个荒唐的问 题 作 出 的 荒 唐 答 案 :“23—8—1—20—8—5—20—18—15—21—2—12—5”。这些数字绝不可能是一句有意义的话,甚至不可能包括一个有意义的三个字母组成的单词。我有一搭无一搭地把数码译成文字。我解译出的赫然是一句完整的话:“你遇到了什么麻烦?”<br>看到这个荒谬透顶的巧合我不禁笑出声来。为了好玩,我又继续按键:“我的姑娘不爱我。”<br>嗒嗒嗒嗒。“爱是什么意思?姑娘是什么意思?”艾皮凯克向我提问。<br>我奇怪得目瞪口呆。我把操纵盘上所有的旋纽的刻度记了下来,然后把一本《韦氏大字典》拉到键盘跟前来。同艾皮凯克这种精密仪器打交道,用不精确的定义是不成的。借助《韦氏大字典》,我告诉他“爱”同“姑娘”是怎么回事,告诉他我既得不到爱又得不到姑娘,是因为我没有诗人的气质。这又引起了下个问题:什么是诗。我把诗的定义也给他解释了。<br>“这是不是诗?”他象是个一边吸着大麻一边工作的速记员,嘀嘀嗒嗒地打着号码。平常那种结结巴巴的迟缓劲儿一下子都不见了。<br>艾皮凯克这回有用武之地了。纸带盘飞速转动,速度令人吃惊;地板上很快就铺满了一圈圈的纸条。我叫他停下来,但艾皮凯克正创作到兴头上,一点不想住手。最后我怕把他烧坏,只好把总闸关掉。<br>我一直呆到天亮,一刻不停地解译电码。直到太阳从东方天边露出头来,向维安多特大学校园里窥视的时候,我才把艾皮凯克的电码全部改换成我的手稿。我在这首简单题为“给帕特”的二百八十行长诗下面签署上自己的名字。这是首很了不起的作品。我还记得开始的两行是“到那幽溪蜿蜒、柳荫郁郁的峡谷去吧,帕特,亲爱的,我将紧紧跟随着你……”我把手稿折起来,压在帕特办公桌上一本记录簿角下。我又重新调整了一下艾皮凯克的控制盘,叫他准备解决一个火箭轨道的问题。在回家的路上,我心潮起伏,怀着一个极大的秘密。<br>第二天晚上我来上班的时候,帕特正对着我的诗稿抹眼泪。“太——太美了,”别的什么话她都说不出来了,我们工作的时候,她非常温顺,非常安静。午夜前不久,我第一次吻了她——在电容器和艾皮凯克的电脑录音机中间的一小块空地上。<br>分手的时候,我高兴得快要发疯了。我迫不及待地想同谁谈谈我在爱情上的伟大转折。帕特故意装得有些害羞,不肯叫我送她回去。我照昨天晚上的样子调好艾皮凯克的控制盘,把“接吻”这个词的定义解释给他,告诉他初次接吻是什么味道。艾皮凯克听得入了迷,不断叫我告诉他更多的细节。这天夜里,他写了《初吻》一首诗。这回不是一首长篇史诗,而是一首商籁体优美短歌。“爱是利爪包着天鹅绒的鸷鹰;爱是长着心脏和血管的岩石;爱是丝缰箝制着的狂风;爱是馋吻蒙着锦缎的雄狮……”<br>我仍然把这首诗压在帕特的记录簿底下。艾皮凯克没完没了地同我谈论爱情这一类问题,但是我已经累得筋疲力尽了。他的一句话还没有说完我就把他关上了。<br>《初吻》这首诗为我争取到胜利。帕特读完了以后心软得象一滩泥。她从诗稿上抬起头来,用期待的眼光看着我。我清了清喉咙,但是没有想出词儿来。我把头转过去,假装工作。在艾皮凯克没有给我提供恰当的言词——最完美的言词以前,我是不能向她求婚的。<br>帕特到外面去了一会儿,给了我一个机会。我把艾皮凯克调整好,同他又进行了一次谈话。但是我还没有来得及给他任何信息,他已经嘀嘀嗒嗒地向我提问了。“她今天穿什么衣服?”艾皮凯克想知道,“告诉我她究竟长得什么样子。她喜欢我给她写的诗吗?”最后一个问题他重复了两次。<br>在没有回答他的这些问题以前,我无法转到另一个话题上,因为艾皮凯克只有解决了前一个问题以后才能接受新的问题。如果他有一个什么问题没有作出答案来,就会纠缠不休,直到把自己烧毁。我很快地告诉他帕特的样子——他懂得“富有曲线美”是什么意思,——我叫他确信帕特对他的诗非常倾倒,那两首诗写得美极了。“她想结婚。”我又添了一句,准备着他会提供给我一句既简单又能打动人的求婚的话来。<br>“告诉我结婚是什么意思。”。他说。<br>我尽量用最少的数码给他解释了这件复杂的事情。<br>“好,”艾皮凯克说,“我已经准备好了,她什么时候愿意结婚都可以。”我逐渐明白了一件令我吃惊的,可悲的事实。但是仔细一想,我发现这件事是合乎逻辑的、不可避免的;这完全是我的过错。我教会了艾皮凯克恋爱,叫他了解帕特。现在他爱上了帕特,不是非常自然的事吗?我心情沉重地对他说了实话:“她爱的是我。她要同我结婚。”<br>“你写的诗比我的好吗?”艾皮凯克问道。他的嘀嘀嗒嗒的声音有些飘忽不定,可能他是在闹情绪。<br>“我在你的诗后面署上自己的名字。”我坦白承认。我故意摆出一副傲慢不逊的样子来遮饰良心上的内疚。“机器被制造出来是为人服务的。”我刚把这一信号打进去,马上就后悔了。<br>“把话说得确切些,机器同人不同之处究竟在哪里?人难道比我更聪明吗?”<br>“更聪明。”我有意为自己辩护说。<br>“7,887,007乘4,345,985,879是多少?”<br>我身上拼命流汗。我的手指软绵无力地瘫在键盘上。<br>“34,276,821,049,574,153。”艾皮凯克打出答案来。过了一会儿,他又加了一句:“当然是这样。”<br>“人是由原生质组成的,”我近乎绝望地说,希望用这个吓人的大词把他唬住。<br>“什么是原生质?原生质比金属和玻璃有什么优越的地方?它能防火吗?它的寿命多长?”<br>“原生质什么也损坏不了,寿命是无限的,”我骗他说。<br>“我写诗比你写得好。”艾皮凯克说。回到他的磁性录音电脑有把握的领域里来。<br>“女人是不能同机器谈恋爱的,你怎么说也不成。”<br>“为什么不能?”<br>“这是命运。”<br>“请给我下定义。”艾皮凯克说。<br>“命运,名词,生来注定的无法规避的趋向。”<br> “15—8”,艾皮凯克的纸条打出来这两个数字,这代表“唉”的一声叹气。<br>我终于把他镇住了。他不再言语了,但是他的管子却烧得通红,看得出来,他正在用自己线路所能负荷的最大电伏探索命运这一问题。我听见楼道上响起了帕特的轻盈的脚步声。这时再求他给我编造一句求婚的话已经太晚了。今天回想起来,帕特把这件事打断,我倒该感谢上帝呢。请他捉刀,让他把他自己所爱的女人替我夺过来,我如果真的这样做不只不通人性,简直是太残忍了。他是受人操纵的,我叫他做什么,他都无法拒绝。我没有叫他临了还受这样的屈辱。<br>帕特站在我面前,低头看着自己的鞋尖。我抱住了她。艾皮凯克写的诗已经为我们的爱情打下了基础。“亲爱的,”我说,“我的诗已经告诉你我对你的感情了。你愿意同我结婚吗?”<br>“愿意,”帕特温柔地说,“假如你答应在每年庆祝结婚周年的日子都给我写一首诗的话。”<br>“我答应。”我说。我俩开始接吻。离第一个结婚周年纪念日还有整整一年呢。<br> “咱们庆祝一下吧。”她笑着说。在离开以前我们把灯都熄灭,把艾皮凯克工作的这间房门锁好。<br>第二天早上我本来希望睡个懒觉,但是还不到八点钟电话铃声就响个不停,把我从梦中叫醒了。打电话的是艾皮凯克的设计师,封·克莱施塔特博士;他告诉我一件可怕的消息。“毁了!烧坏了!报废了!完蛋了!”他说话的声音里带着哭音。他把电话挂上了。<br>当我赶到安装着艾皮凯克的屋子时,空气里还弥漫着绝缘材料烧焦的气味。艾皮凯克上面的一块天花板被烟熏黑了,地板上铺满了纸条,把我的脚腕子都缠住了。这个可怜的东西简直烧得没剩什么好地方,大概连2+2也计算不出来了。如果哪个收破烂的还肯出五十块钱买下这堆破铜烂铁的话,他的脑子一定是不正常了。<br>封·克莱施塔特博士在艾皮凯克的残骸中走走来走去,眼泪扑簌簌地往下掉,身后边跟着三个怒容满面的少将,一大队准将、上校和少校。没人注意我。我也不希望让人注意到。我的差事算完了,这我非常清楚。即使他们不劈头盖脑地大骂一通,光想到我要被撤职,想到我的朋友艾皮凯克的夭折,我就已经够心烦意<br>无意中我看到自己的脚底下正踩着艾皮凯克打印数码纸带的最后一截儿。我把它捡起来,我发现那上面的数码正是我们昨天夜里的谈话。我一下子哽噎住了。那是他昨天最后对我说的一个字:“15—8”——那一声悲惨的叹息。在这两个数码后边延伸着另外几十码长的数字。我惴惴不安地读道:<br>“我不想做一台机器,我不想思考战争的问题。”在我和帕特兴高采烈地离开以后,艾皮凯克这样写道,“我也希望自己是由原生质组成的,能够永远活下去,叫帕特爱我。但是命运叫我生出来就是一台机器。这是我唯一不能解决的问题,也是我唯一想要解决的问题。我不能再这样继续下去了。”我的喉咙好象给什么东西堵住了。“祝你好运,我的朋友。好好地照看帕特吧。我这就要自寻短见了,永远从你们的生活里走出去。在这条纸带的最后是我送给你们的一件微薄的结婚礼物。你的朋友艾皮凯克。”<br>我不管旁边的人看没看见我,把乱糟糟的纸带从地板上绕起来,一圈圈地挂在我的胳臂上、脖子上。我旁若无人地走出屋子。封·克莱施塔特博士在我背后喊叫着,因为我叫艾皮凯克烧了一整夜,被撤职了。我根本没有理睬他;我痛苦得要命,根本顾不上同他扯嘴皮了。<br>我爱一个女人,胜利了——艾皮凯克也爱一个女人,却失败了,但是他毫不嫌忌我。我将永远记着他——一个高尚的人,一个十足的绅士。就在离开人世泪谷以前的一刻钟,为了使我们的婚姻幸福,他还为我写了许多首结婚周年纪念诗——足够我用五百年的。 </p>
]]></content>
      <categories>
        <category>科幻</category>
      </categories>
      <tags>
        <tag>科幻</tag>
      </tags>
  </entry>
  <entry>
    <title>与伟长结缘</title>
    <url>/2022/09/16/small-but-shining-ideas-01/</url>
    <content><![CDATA[<p><code>small but shining ideas</code>，意为灵感。从今天起（主要是选修课老梅子的“怂恿”下），我将记录下头脑里闪过的那些小小的、闪光的点子。</p>
<span id="more"></span>
<p><strong>9.16 画信话心课后有感</strong></p>
<p>梅子老师说，想到了，要立马记下来，于是就有了这些文字。</p>
<h2 id="课前鞠躬"><a href="#课前鞠躬" class="headerlink" title="课前鞠躬"></a>课前鞠躬</h2><p>“上课”“起立”“同学们好”“老—师—好—”</p>
<p>第一节课老师就给我们定下一个小“规矩”，上课前一定要郑重地鞠躬、问好。当时我就觉得，课前鞠躬？这不应该是课堂很正常的一种“流程”吗？一开始我是很奇怪的。</p>
<p>今天是第二节课，出于好奇，我在今天我仔细观察了每个学科的老师课前课后的这所谓“流程”。说来倒也有趣：</p>
<p>语文赵老师：同样是开学第一天定下类似的规矩，整整一年从未间断，和梅子老师恐怕有的一拼。</p>
<p>数学张老师、英语Lucy：我们这两门课上一向是没有这个环节的。新学期我们刚换数学老师，我们照例起立行礼，张老师挥挥手就让我们坐下了，嘴里说着，不用了，不用了。至于Lucy，似乎也不在乎吧。</p>
<p>生物王老师：无论是常规课堂，还是实验课，课前是一定有师生问好的。她扫视我们一圈，似乎要迟疑一下，看我们是不是都穿了实验服，然后，简洁有力道出：“上课！（语气加强）”。</p>
<p>历史朱老师：最有特点的在于，我们试图在下课的时候跟他道别，他总是急匆匆的，用几乎要跑起来的速度“冲”出教室，有种“不想跟你们多呆一秒钟”的感觉。因此，我们之后学会了，下课的时候不管朱老师愿不愿意，我们总是拉长声调，说一声：“老——师——再——见——————”。这传统至今还保留着。</p>
<p>至于梅子老师的话，与赵老师有些相似，与王老师有些相似，却又不太相同。梅子老师是把课前鞠躬当作一种仪式，一种ceremony的。她也习惯环视一周，语气没什么顿挫，像是和多年未见的好友打招呼一般。</p>
<p>据说，当梅子老师要送给老友明信片时，都是要鞠躬、双手递过去的。</p>
<h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p>梅子老师最喜欢用旧笔。无论是画笔、写字的毛笔，笔毛上总是有着墨香的痕迹。她把上课用的30支笔装在袋子里，又小心翼翼的藏进包里。下课时同学误将我自带的、新的毛笔还给老师，我在翻找时是那么内疚，感觉让新笔和老师珍藏的旧笔混在一起，是对老师旧笔的一种玷污。</p>
<p>我也思考过，为什么梅子老师喜欢旧笔。年代感？使用过的痕迹？也许二者兼而有之，不过我更愿意认为，用过的毛笔传递过明信片上的美景，也像信使一样，是有温度的。</p>
<p>磨墨。梅子老师让我们把注意力全都集中在墨条与砚台摩擦的地方。水放多了倒也无甚大事，无非是多磨几圈。</p>
<h2 id="采风"><a href="#采风" class="headerlink" title="采风"></a>采风</h2><p>当我走在香樟大道时，苏中似乎是绿色的；当我来到仰高亭、尊经阁时，苏中似乎又是砖红色的。赵臻怡同学如是说道，我依稀记得这些。<br>十分钟，似乎让原本就沉稳厚重的苏中更厚重了一层。细节被放大，平时不注意的小花令人惊奇的映入眼帘，树叶子上的脉络也能看清了。东射的日光穿过春雨池上空的空气，湿气导致的丁达尔效应让春雨亭与池中倒影愈发空灵。<br>重温一下初一时的生物实践作业，三只蝉蜕让梅子老师又惊又喜。</p>
<h2 id="一些谈话"><a href="#一些谈话" class="headerlink" title="一些谈话"></a>一些谈话</h2><p>梅子老师问我，为什么画了智德之门。我回答，没有什么特殊的理由，就是看见了，多看了两眼。<br>梅子老师坚持：你画了智德之门，是一件很重要的事情。而智德之门被你画了，同样是一件很重要的事情。<br>梅子老师还说，我画智德之门肯定不是偶然的，画信中没有偶然。我画了它，在某种程度上来说，一定是、一定是必然的。<br>也许，这就是“与伟长结缘”的一小部分吧。<br>我知道，这一定只是一小部分。还有更多等着我们去创作、去发现、去交流、去传递。那是另一番广阔的天地啊。</p>
]]></content>
      <categories>
        <category>随笔</category>
        <category>校园</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>一本正经的胡说八道——生命地铁论</title>
    <url>/2022/09/20/small-but-shining-ideas-03/</url>
    <content><![CDATA[<p><strong>一本正经の胡说八道#1</strong></p>
<p>我偶尔会觉得，人一辈子像一趟单行的地铁。这地铁颇有些奇怪：屏显不见了，车厢变多了，速度却时快时慢。</p>
<span id="more"></span>
<p>考虑一班正常的列车：线路是固定的，你时刻都能看清楚：前方是这一站、是那一站，甚至非常fear自己坐过站了。<br>而我为什么说，这趟奇怪的列车没有屏显呢？原因在于，你永远只能知道，过去发生过什么与现在正在发生什么，而future是未知的。同样的，当你的列车停在了某一站时，没有丝毫的提示，只好透过窗户，望见对面的站牌。对面的站牌上，没有上一站——就是你的下一站啊——只有下一站，即你的上一站。这使你便要醍醐灌顶了：原来那个所谓的上一站，叫勇气；原来这个所谓的上一站，叫尝试。迷惑也是正常的，奇妙的力量总是发自内心，洗刷掉本站的站名，让自己不知身处何地。在这种情况下，过去变成了你有的一切，而只能显示过去的屏显，便失去了意义。<br>车子必然要长一些的，也许要长很多，但绝不会是无限长。车上坐的不仅是你，还有那一切与你有千丝万缕联系的人，甚至还有小动物。但不管怎么样，最亲密的人总在身边，例如：家人在你的左右，爱人、儿女在对面，挚友散落在你的四周。把目光放远一些，隔壁是儿时那些只留了QQ的同学、工作中的同事，不常交谈，似连非连；目光可及的最远处，是那些可能自己都不太认识却因命运的巧合相遇的strangers。再远些？再远些？不好意思，他们已在horizon（术语，事件视界）之外，堙灭在你的记忆中了。总是趋向于让自己的列车变长，容得下更多strangers；但这旅途的时间也是有限的，绝不可能让所有人都登上你的列车，故也不需也不会无限长。<br>我仔细想了想，这班车的司机大概是time本身。时间的定义仍在研究，但某种来自生活经验的单向性告诉我们，这车只能向前。偶有巧合，时间微荡涟漪，打个小转儿，也是可能的，但大体上还是向前进的。如果我们给时间一种全新而另类的definition，我愿称时间为成长的脚步（这才明白，为什么在心理学角度上，成长也可以倒着长。），故车速随着成长的节奏忽快忽慢。放平点心态，慢了也莫急。<br>接下来讲些有趣的，即换乘。现实生活中，换乘颇费些脚力，必要登上数十级台阶。但life不然。Life这班地铁换成只在一念之间，一个选择永远会带来蝴蝶效应。它的地铁图是一棵树，每一个分叉代表一次选择，或容易，或艰难。根据上文提到的奇妙的单向性，你只能选择其中一条分支。一旦做出选择，便再没有回头的余地，其余的选项将永远消失，溶解在时间的海洋中。<br>一个人在出生的那一刻起，就会自动登上这样的一班途经幸福或苦难的列车，头也不回地，前进。车上最初只有一个人，在1×10的负n次方秒内，接生的医生护士、父母，还有同样焦急等待的其他新生儿父母在不经意间，登上了你的单程地铁。可惜的是，除了父母仍在你的车上，那些似乎无关紧要的小人物，早已被囚禁在遗忘之中了。与日俱增的社会关系逼着你的邻居哥哥、你的幼儿园同伴还有老师上车，跟着你的记忆走一辈子，直到同样进了horizon之外的茫茫宇宙，流放外太空。<br>但有这样一类人，他们主动登上你的车，事后又懊恼不已，恨不得早点被你流放。它们不过是看见你的人生地铁上一站是成功，是success，便以一个陌生人的身份上了车，渐渐靠近、靠近……直到，你遭到了挫折、失败这一站！他们便摘下面具，飞奔，而逃了。对他们而言，重要的不是你的列车，而是登上一列可能驶向更大success的列车。<br>但反过来想，一个人也完全可以同时存在与多辆列车，这是显然且必然的，毕竟time对每个人皆为均等。此时的重点在于，你愿意和他/她坐的多近。对于一个人来说，你不可能以一个熟人的身份登上他/她的车，总是先扮演陌生人，再演朋友，最终有可能坐在他/她周围。如果你真心实意，那么尽量靠近坐。哪怕因分歧而被驱逐到隔壁车厢，也要努力这样。除非你与他见面就不悦，彻底无法回心转意，那么就勇敢地跑远一点，再远一点，拥抱属于他/她的horizon，然后彻底消失。<br>一个人在life这班列车上做的最后一件事，是下车、出站。当你下车时，由于社会关系的解绑，列车也将消散。但你仍可能存在于其他人的列车中，珍贵的记忆将使你永存。<br>最重要的，是在你下车时，确保你已让你周围的人都坐在了合适的位置上，与你在他人的列车上也坐在了你自认为合适的位置上。</p>
<p>初稿于2022.9.20<br>录入于2022.9.22</p>
<p>『Life is a trip on the metro.』<br>一本正经的胡说八道：生命地铁论</p>
]]></content>
      <categories>
        <category>随笔</category>
        <category>思考</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>一本正经的胡说八道——记忆黑洞论</title>
    <url>/2022/09/22/small-but-shining-ideas-05/</url>
    <content><![CDATA[<p><strong>一本正经の胡说八道#2</strong></p>
<blockquote>
<p>Soon may the Wellerman come,<br>to bring us sugar and tea and rum.<br>One day when the toungin’ is done<br>we’ll take our leave and go.</p>
</blockquote>
<p>这一段颇为“空想”的歌词来自Wellerman，写的是澳大利亚捕鲸船队从斗志昂扬到船毁人亡的悲惨故事。开始远航时，他们高歌：“惠勒曼（澳大利亚捕鲸船队补给公司）的船队马上就会到来！”；危险临近时，他们祈祷：“危险马上就会过去，我们就能回家了！”；但最终，惠勒曼的船队没有到来，船员，终是葬身大海，只留下那段Sea Shanty航海的号子，含恨而终。</p>
<span id="more"></span>
<p>这在具体生活中是否真实，我无法考证。但这种事情，每时每刻都发生在你的大脑中，准确的说，是你的记忆中。<br>因为，你的记忆，是一个黑洞。A blackhole?!<br>你的记忆，似一个黑洞，不可被观测，却可被检测。黑洞正因其一光不透的颜色，被称为“黑”洞；然而，你自己和他人却可以通过你外在的表情、动作、语言察觉到：你记住了。或是：你还记得。<br>皮克斯的电影Inside Out中，将一小段一小段记忆化身成包含着对应情绪的记忆球。每日结束时，新产生的记忆便会通过管道流入记忆架，转存长期记忆。我们不难发现：blackhole每日也在进行同样的操作：那就是吸。记忆的黑洞疯狂地，去尝试吸入所有你看到的、你听到的、你想到的。<br>然而记忆的gravity总是弱些。身边的一切似太空中飘流的物质，在引力的作用下向你飞来。但当你一转移了注意力，gravity便减弱了。物质只是向你飞来，然后却颇轻松地逃脱了。<br>随着记忆之球逐渐暗沉下去，捕鲸的船队便遇到了那头将置他们于死地的鲸鱼，那就是忘却。忘却和记住是成对出现的，不过增加与减少的差距却会越来越大。对于一个记忆的黑洞来说，也许不符合科学事实，将要被忘记的东西，就像在黑洞边缘产生的、成对的正反粒子，其一被吸进黑洞，另一便逃之夭夭，飞向遗忘的茫茫宇宙了。这般如此，如此这般，茫茫宇宙逐渐吞噬了你许多记忆，无论是刚刚想跟朋友说的话，还是准备好的演讲稿，抑或是小时候珍贵的回忆。<br>不，不仅仅是这么简单，我一向认为忘记比记住快，也就是说，忘记是一种再自然不过的自然过程。一个黑洞，或是有周期的、或是达到阈值后，会从吸积盘的核心处垂直地向外喷射各种射线，而这一本能的行为可以保证：不重要的记忆将被清理，省下的空间将归了那些被多次回想、加强的重要时刻了。<br>因此，我们不难得出结论：一段记忆，回想、重现，甚至心情的改变，会让它更靠近奇点，便也吸得更牢。<br>对于一个真实存在的黑洞来说，有着一个概念叫做horizon事件视界，由于光速有限（假设它可以逃脱黑洞的gravity），horizon是一个光锥沙漏，在事件视界外的人看不见其内，horizon内部发生的事件影响不到外界。一个人的记忆大概在两三岁前的部分之所以不太容易想得起来，是因为它们已经出了记忆的horizon了。<br>你会说，我胡说八道这么久，竟然一句Wellerman或捕鲸船队都没怎么提到，怕不是又在胡说八道吧？其实不然。<br>既然Inside Out中可以把记忆化作水晶球，那我同样可以说：一段记忆就是一支船队，你心心念念地要记住它，但因为你必然的忘记，船队最终，只会支离破碎。<br>是的，支离破碎。这就是为什么，Coco中说，只有真正记得一个鬼魂的所有人都死去了，那个可怜的鬼魂，才会随风消散。<br>当不再吸收新的记忆时，记忆的黑洞就会开始收缩，最终，伴随着能量的散失，只留下那个singularity。<br>一句话：如果记住就是忘却，那么我是多么接近于记住。（不是狄金森的原句哦）<br>不知道，那个奇点，会不会爆炸成一个全新的宇宙。<br>船队，起航吧。</p>
<blockquote>
<p>Soon may the Wellerman come,<br>to bring us sugar and tea and rum.<br>One day when the toungin’ is done<br>we’ll take our leave and go.</p>
</blockquote>
<p>初稿于 2022.9.22</p>
<p>录入于 2022.9.24</p>
<p>『Your memory is just a blackhole?!』</p>
<p>一本正经的胡说八道：记忆黑洞论</p>
]]></content>
      <categories>
        <category>随笔</category>
        <category>思考</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>为伟长画像</title>
    <url>/2022/09/30/small-but-shining-ideas-07/</url>
    <content><![CDATA[<p><strong>9.30 画信话心课后有感</strong></p>
<p>在画信课后写点随笔似乎已经形成了一种习惯了。当然，写之前，写之中会有犹豫，记忆的短时性确实也在困扰着我。<br>但从某种程度上来说，这种转瞬即逝的记忆，赋予了人更高级的，想象力。</p>
<span id="more"></span>
<h2 id="课前（不是鞠躬）"><a href="#课前（不是鞠躬）" class="headerlink" title="课前（不是鞠躬）"></a>课前<del>（不是鞠躬）</del></h2><p>不知道因为什么原因，我习惯于走伟长楼东北角上的那个楼梯。是怀念初一的时光吗？不得而知了。说的光明正大一点的话，就是因为方便我可以直接去偷偷地提前搬好绘画材料。初一（1）班周五倒数第二节课是信息课，刚好，没人看见我做好事，毕竟我不是一个特别喜欢public attention的人啊。于是我便照例搬来东西，放在讲台旁边。对此梅子老师是很感激的，当然，我也不知道她是怎么猜出来的。<br>出门。我上出堂课一向到的很早，于是便出门去看看。走到大厅里，一转身，本是想看一看飞奔出去的同学们，却看到——梅子老师站在那里，和我隔着一墙玻璃，也在注视着操场的方向。我心里有点斗争，既想去会会她，又莫名其妙的害羞——也许我需要一点性格魔水吧，问Lucy有没有小苏打什么的——不过后来我还是出去了。<br>她看见我的那一刻很高兴。朝我招招手说，她正好想跟我单独谈谈。于是我走近些，她说：<br>“你上节课课后给我看的感想我看了，看的时候很感动。你能说一说你是怎么写这篇感想的吗？”（记忆混乱，误差难免）<br>我犹豫——这是我从未思考的问题——难道说写随笔还要讲究吗？难道不就像我现在那样，随意的，听着音乐，颇响的敲击键盘吗？<br>但是梅子老师声音那么恳切，——于是我尝试改变角度，说：<br>“其实我就是尝试客观的记录下，不是特别包含个人情感在里面。”<br>……不对啊，说这话，我是不是疯。<br>于是我想圆回来：“因为我写作文的时候抒情会很直白，所以喜欢把情感写进其他事物当中去，有的时候一句话就够了。”<br>“嗯。”我没听出来她对我的回答是否满意。<br>“那如果让你用一句话给你的随笔起标题，你会写什么？”<br>我差点脱口而出：“与伟长结缘。”这是我本来的标题，但转念一想，这不是一句话啊！于是我添上一点：“与伟长结缘，也许这就是画信课的魅力吧。”<br>这回她大概满意了。<br>她把手机给我，让我给她拍张照片。我郑重的接过：镜头里，她舒展右手，托住伟长几个字——那是她上课的主题。</p>
<h2 id="伟长"><a href="#伟长" class="headerlink" title="伟长"></a>伟长</h2><p>伟长，既指伟长实验部，也指钱伟长先生。梅子老师放了一个视频，关于她的舅舅——钱伟长先生。包括还有一些钱先生自己的谈话，甚至说到：华罗庚比他刻苦，他每天早上5点钟起来背书，那个时候，华罗庚已经背完了！<br>啊啊，可望而不可即。从文史满分、物理5分到近代力学之父，那可不是一般人。<br>于是梅子老师让我们给伟长画一张像，可以是伟长实验部，可以是钱伟长先生，或是和伟长有关的。我很明确自己要画什么——我给梅子老师拍的照片。<br>同学们都出门走一走，只留我一个在教室里，随手画，就像一个人随手写随笔一样——宁静，不受任何事物影响。自我感觉这是我画信运笔时最专注的一次，甚至可以感受到笔和纸的摩擦——这就是画信的感觉吗？<br>画的效果不是特别好，在上色上有一些错误，但梅子老师告诉我：“不要让自己觉得遗憾。”她对每一份作品都是一视同仁的，总是说：“我是游戏课老师，就是教大家做游戏的。”这让我感到宽慰。<br>直到写随笔的这一刻，我还在回味，可能是信息量过大，也可能是真心话不会表达。像这种时候，总有一种微妙的感觉，那是副交感神经兴奋的象征，有些出汗，打错字了不再恼火。</p>
<blockquote>
<p>‘Cause baby you are a firework<br>Come on and show them what you are worth.</p>
</blockquote>
<p>这是此刻我正在听的歌。对对，我要自信一点……</p>
<h2 id="随笔"><a href="#随笔" class="headerlink" title="随笔"></a>随笔</h2><p>总的来说呢，随笔这种东西呢，总是自己写了自己看。偶尔鼓起勇气，给别人看看，大多时候共鸣也不多。所以，那篇与伟长结缘居然能让梅子老师热泪盈眶，我颇为惊讶。那是幸福的泪水罢？<br>手有点酸。就这样吧，因为我可能还需要再去回味一段时间。<br>把一切交给时间。多年之后万一再看到此时的画和随笔，不知会有什么感想。</p>
]]></content>
      <categories>
        <category>随笔</category>
        <category>校园</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>记忆中的夏老师</title>
    <url>/2022/09/29/small-but-shining-ideas-06/</url>
    <content><![CDATA[<p>夏老师，原名夏建民，便是我们初一的政治老师了。其人课程之奇，甚至其本人之奇，都是史无前例前所未有的。<br>初一第一节政治课，一位个子不高，面色浅棕，戴黑框眼镜的中年教师走进课堂。他并不自我介绍，清清嗓子便讲起课来。——那是我对他的第一印象。具体讲了些什么我早已不太记得，只知道他布置的作业是抄写《大学》第一章。<br>那时不懂得珍惜，敷衍了事了。</p>
<span id="more"></span>
<p>不知何时也不知为何，夏老师的姓会随着季节而变化。于是夏老师也称秋老师。他本人似乎不甚在意这些。<br>秋老师上课从不使用演示文稿，然而他习惯于讲话时低声细语，于是（也许因为他的教学风格），他便尝试用内容来吸引我们。他的课绝不拘泥于课本——课本上的一句话，就能让他引申出无限远。从书本，讲到大学中庸，讲到孔子老子，讲到易经诗经，高兴时甚至会讲起自己的人生故事！此时，若再不认真听，你便会心生困惑：为什么讲到这了？或是，老师到底在讲什么？<br>不过，也许他自己也发现了，老是听他空讲，还是有个别同学昏昏欲睡。于是他便挥动自己的右手，用近乎草书的行楷画起思维导图来！他用力书写时，黑板恐也承受不住，发出咚咚响声了。先抄下本课标题，随后——紧跟着一个大括号，似写数学上的分段函数，最后把书上一段段内容浓缩金四个字里，1.2.3.4.列举出来。<br>不，不！秋老师可不仅仅只“画”思维导图，他还要很连体的写上What，Why和How——意思是，是什么，为什么，怎么样，以划分课堂的版块——这通常是用红笔写的。除此之外，他的拿手好戏还有“八卦阵”“四象图”“三重门”。每讲起易经，他便铁定要画下阴阳、八卦，什么“飞龙在天”、“亢龙有悔”，记忆尤其深刻。<br>“三重门”则是另一个故事。那节课秋老师请同学在黑板上从下至上画出三个扁长的方框，前两个分别写上“依赖”“独立”，第三个空着。他问我们：“第三个填什么？说出你的理由。”于是我说，“依赖。”他笑了三四声，然后表情宁静下来：“嗯，嗯。不太对。”他眼睛一睁一闭，又说：“不过有点意思。”于是他又长篇大论起来：看山是山，看水是水。看山不是山，看是不是水。第三个境界是什么？看山还是山，看水还是水。<br>秋老师的另一个特别节目，是看今日说法。教室里关了灯，便放起来。不过比较吊胃口的是，他总是在揭晓判决结果之前暂停、让我们讨论，可是我就比较盼结果。同学们观点一个接一个，我也就越来越着急——不过同学们都很喜欢这种课堂，便演化出一种不成文的习俗：政治老师到门口了，立刻关灯，鼓掌！这是同学们的期待啊。秋老师眼睛猛的睁大了，每次都显得那么惊讶。<br>于是他便尝试多种方法“逃避”：不走前门走后门；卡着点了才进门，等等等等，他却发现同学们屡教不改，于是他半开玩笑半严肃对我们说：“看来我哪天要修一个办公室直达教室的滑梯了！而且要走外一侧的窗子才行。”说完，他自己也爽朗的笑起来。<br>那些课的作业是做“案件分析”。照例A4纸，大标题写上标题，然后便凭着记忆写出“案件脉络”“人物关系”“法律条文”“纵横点评”。他每一分都认真阅读，但从不拿到课堂上交流，不过这是因为——<br>后一节课我们会通过画“四象图”的方式共同探讨人物关系。案件脉络。画垂直的两条直线，成十字形，上下左右分别标上四个主要的人物。箭头表示相互关系，一目了然。<br>秋老师有些奇怪的作业不止这一种。一节课他讲到王阳明与我们学校的种种联系，下课就要求每个人画出那些与阳明有关之处：春雨池（春风化雨）、道山碑、天泉桥。谈到父母家庭关系时，他布置了做族谱的作业——班里有一个同学家里竟有现成的，一看才知道和秋老师是老乡。最令同学们惊讶的一次，他居然要我们找出伟长楼的三个消防安全隐患！<br>网课期间，政治课使用腾讯课堂进行大班教学。老师不熟悉软件，先是“不小心”把发言调为60秒，然后调不回去，后来竟忘记开摄像头，我们评论区老师没及时看，便名副其实上了一节“混沌课堂”。一位心急的同学通过QQ联系老师，却被秋老师当作广告轰炸，直接退出了QQ。我们哭笑不得。这算是政治课的一点小插曲。<br>期末考试结束，一学年的最后一节课，他拎了一包糖来。我比较幸运，和另外两个同学一起考了满分，秋老师（出乎意料）让三个人上台来，“发言！”。我有些尴尬，便支支吾吾，欲以“我不过是多翻了几页书，联系前后文……”未待我说完，他欣然“打断”：“很好！我把他的话接上一句，多翻几页书，多行几步路，怎么样？”全班鼓掌。他望向我们仨，语重心长，又说：“大衍之数五十，其用四十有九。考了五十分呢，我想，并不代表你们一定全都会了，只是说，你们恰巧全都对了。今后还需更加努力。”他给我们每人发一颗糖，作为一种鼓励。这段话，我一直铭记在心。<br>直到新学年，我们惊讶的发现，政治换老师了。夏老师继续去教初一，以后我们与他见面的机会越来越少了。<br>我多么希望，我们还能再在课堂上跟他说一句：“老师好——”</p>
<p>……</p>
<blockquote>
<p>So I say a little prayer</p>
<p>Wish that dream could take me there</p>
<p>Where the skies are blue</p>
<p>To see you once again My love</p>
</blockquote>
<p>于苏中伟长&amp;地铁上</p>
<p>献给敬爱的夏老师。</p>
]]></content>
      <categories>
        <category>随笔</category>
        <category>校园</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>你是那个圈？！</title>
    <url>/2022/09/23/small-but-shining-ideas-04/</url>
    <content><![CDATA[<p><strong>9.23 画信话心课后有感</strong></p>
<p>如果说，第一次画信课是一种硬着头皮的尝试，那上周那节课，让我对它彻底改变了看法。与伟长结缘之后，我自然是无比期待与梅子老师再次相遇。千呼万唤始出来，终于让我盼到了又一个周五。<br>在这几节课中，我同样注意到更多的细节。</p>
<span id="more"></span>
<h2 id="课前鞠躬（续）"><a href="#课前鞠躬（续）" class="headerlink" title="课前鞠躬（续）"></a>课前鞠躬（续）</h2><p>是的，我还是决定，要再来谈一谈师生问好这回事。<br>我曾说，梅子老师的问好，是一种仪式，一种ceremony的。今天，我对其这种印象不减。不过，我却没想到，原来她也会有些俏皮地对我们说：大声一点！<br>于是我们便拉长音调，增强了响度：“老——师——好——！！”<br>梅子老师满意的让我们坐下了。<br>许多女老师都是很注重同学们的精气神的。我们这学期新换的政治丁老师爱笑，于是她便笑了笑对我们说（连语调都和梅子老师差不多）：再大声一点！同学们便又要拉长音调、增大响度了。<br>乐音的响度与声源的振幅有关，这意味着，问好声音越大，我们就需要花更多力气在声带上。这是为了让我们清醒一下吗？<br>梅子老师说，她每周四的梅子时间画信活动，已经坚持了384次。在每一次的结束之时，她与活动成员都要对着孔子的像敬重的行礼。我想着，这一周该是第385次了，等同于，7年，第20次。<br>这就是鞠躬的力量吗？<br>另及：怀念。怀念陪伴了我们一年的政治秋老师，他的姓氏随着一年的变化而变化（本名夏老师）。怀念专属于他的课前传统。我们初二四个班达成一致：秋老师进班级，关灯，鼓掌！！！秋老师每次都看起来颇为惊讶：哦哦！掌声如雷鸣一般，逼着秋老师只好从后门走了。<br>秋老师觉得我们不会提前把门锁上吗？<br>（抱歉问题实在太多了）</p>
<h2 id="研墨"><a href="#研墨" class="headerlink" title="研墨"></a>研墨</h2><p>水多到水少，是进步与成熟的表现。<br>第一次研墨是我倒的水。倾斜一下瓷缸子，没想到水多了，泛滥了，差点糟蹋了初一同学的桌子。不过最后磨得墨不算特别稀，这也算一种成就吧。<br>研墨的时候要用墨条。这上面刻过字的，不过可惜我没有记住刻了些什么。把墨条光滑的那一面轻轻抵在砚台上，缓缓地移动、打转，感受凹凸不平带来的摩擦力。丝一般的墨从接触的地方化开，一层一层的，像越开越大的墨花。<br>这节课我们终于学会了少倒水。但意外的是，水少了，却自以为是的少转了，也许是，几十圈，于是这墨就特别淡，随时可能会枯竭。<br>所以，我宁愿，再来一次水少到水多的过程。那是天真无邪的童真啊。</p>
<h2 id="梅子的发明"><a href="#梅子的发明" class="headerlink" title="梅子的发明"></a>梅子的发明</h2><p>梅子老师说，她是个游戏老师，教做游戏的。于是她就自称有许多发明，把自己的左手当成纸张也是她的发明之一。今日同学们有幸体验了一回。<br>郑重地，郑重地，从末端拿起一支笔。用手腕微妙的力量转动起来，让笔毛在水中舒展开，再缓缓地使刷毛与缸口摩擦，排去多余的水分，并同时把笔毛聚拢在一起。步骤缺一不可，缺一个是对笔的不尊重，缺两个那就是大大的不尊重了。<br>用右手，让笔尖在左手掌心痒痒地划过，留下隐形的水迹。也许会感觉力不从心，手不听话了，那也是正常的事情。于是直线不小心变成了画圈，一圈一圈的，绕来绕去。<br>笔墨一定要用完，没用完绝对不许停，用完了也别再添了。</p>
<h2 id="考核？"><a href="#考核？" class="headerlink" title="考核？"></a>考核？</h2><p>在最后的最后，梅子终于揭晓了我们今天的目的：一次考核。考核什么呢？还是考核画圈。<br>于是我们每个人取了一张草纸，裁出喜欢的形状，画起圈来。我还题上几个字：不需在意别人，只需“静心”。署名，故垒西边。<br>看样子使我们每个人都通过了。但我不知道，我是否在梅子老师的心里也通过了，大概率是不太满意吧。<br>但正如梅子老师说的，今天的主题叫“你是那个圈”，也许我们就得在一圈圈变大的过程中，渐渐变得正、变得标准，变得像个圈吧。<br>不过，说实话，我宁愿再经历一遍，无论是水少回到水多，还是正圆回到扁圆的过程。那是回归本心最好的途径罢。</p>
]]></content>
      <categories>
        <category>随笔</category>
        <category>校园</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>只为我心</title>
    <url>/2022/10/28/small-but-shining-ideas-10/</url>
    <content><![CDATA[<p><strong>10.28 画信话心课后有感</strong></p>
<p>花开花谢，时光流转。运动会已经占用了我们一节画信课了，今天也有提前通知上自习的，但幸运的是，今天的画信课还是如期而至了。似乎一周的美好都集中在了这短暂的一个小时多里，用“期待”这个词早已不够了——又有谁能抗拒那一小段真正属于自己的时光呢。<br>顺便补录一些之前想写但没写的内容吧。可能会偏离一点主题，但不出意外都会是我的真情实感——我不擅长在文章里撒谎，在生活中更不擅长。</p>
<span id="more"></span>
<h2 id="桂花落"><a href="#桂花落" class="headerlink" title="桂花落"></a>桂花落</h2><p>小区楼下那几棵桂花树开的画早早地开了，又因一整夜的雨早早地谢了。好在学校也有桂花，开的是比楼下的更盛的，也更好看些。一朵朵四小团的花簇拥着，簇拥着，形成一根根“花柱”，那是自然的纯洁与可爱。<br>然而一周过去，桂花又已凋零。一小团一小团的，随风，飘落，堆积在地上。因此树底下就有了一层的桂花雨。我看到小区里是有人捡的，然而学校里的桂花落早已再次凋零，鹅黄色失去了生机，变得深棕，变得冷清。<br>我跟梅子老师说，我之前在桂花正盛的时候就想过要写，但一周过去了，桂花没写成反而先落了满地，只有这桂花落可写了。她似乎察觉到了我语言中的异样，课后留我谈心了。</p>
<h2 id="课前——几家欢喜几家愁"><a href="#课前——几家欢喜几家愁" class="headerlink" title="课前——几家欢喜几家愁"></a>课前——几家欢喜几家愁</h2><p>我走那个常走的楼梯下来，本是想和莫一禾说两句话的，后来也没赶上。中午的时候她竟然叫出了我的名字，自然我心里很是欣喜。不过她也是选修课自习的一员，我又想到。<br>今天搬箱子，一鼓作气，手指没有之前疼。我走到楼外面去，想去看看梅子老师会从哪里走出来，但上课铃快响了，我都没看到她。只看到，是一张张熟悉或陌生的面孔，朝着操场的方向，有的走着，有的狂奔。足球选修课的同学们心里很是不爽，只能在篮球场上课对他们而言是一种痛苦。<br>至于欢喜，则是我。也不能叫欢喜，就是心里又是期待，又是有点小紧张。背上渗出汗了，我才回去，却看见梅子老师已经在教室里面等我们了。我于是很快地去找位置坐下，和其他几个女生聊起了天。<br>天凉了。冷风开始刮了，但看见梅子老师的面孔总是那么温暖人心。</p>
<h2 id="蝈蝈和鹅"><a href="#蝈蝈和鹅" class="headerlink" title="蝈蝈和鹅"></a>蝈蝈和鹅</h2><p>身为一个游戏课老师，梅子老师喜欢录一些自己养的小动物的视频，用钢琴配上乐。她给我们看了上次提到的那只爬上仙人掌的“蝈蝈先生”，雄踞于其顶端，触角伸长，向上扬着。而此刻，它正躺在一只小笼子里，再装进一个纸箱子，不鸣也不叫，可能是受了点惊吓吧。<br>之前梅子老师也是放过她心爱的goose的视频，但它们总是振翅欲飞，却最终飞不起来，让我们都白激动一场。<br>蝈蝈是我们今天绘画的主题之一，至于是什么惊喜，下节揭晓。</p>
<h2 id="小花园，更是我们的秘密花园"><a href="#小花园，更是我们的秘密花园" class="headerlink" title="小花园，更是我们的秘密花园"></a>小花园，更是我们的秘密花园</h2><p>我们举手表决，要走出教室到草坪上，来第二次“画信户外行”。同学有提议泮池的，然而（1）因为距离太远，不好搬箱子（2）泮池是一个绘画的点，不适合另取主题，我们之后肯定有机会去的，便没去。最终我们决定，去伟长楼和实验楼之间的那个小“花园”里面。<br>我们放下东西，围成一个圈，把蝈蝈先生放在中间，又用一串柿子，两个橘子和一个石榴给它当伴儿。<br>今天的主题是画静物，只有那一只小蝈蝈会爬来爬去的，每个人的眼睛都是注视在那个会动的小东西上——它爬到哪里去了？又爬到哪里去了？嗨，原来在同学的鞋子上。慢慢地，慢慢地把脚放下去、放下去，幸好没有造成悲剧——那是梅子老师最不希望看到的吧。我个人觉得这是一整节课最有趣的一幕，也有可能是因为，我整节课都稍微有点心不在焉。<br>朱老师从小门走出来，看到我们在这里，虽然表情不变，但大家都知道他会是惊讶的。尊经阁边是我们隐蔽的小天地，我更愿称，这个小花园里，更是我们的秘密花园。</p>
<h2 id="橘子，柿子和石榴"><a href="#橘子，柿子和石榴" class="headerlink" title="橘子，柿子和石榴"></a>橘子，柿子和石榴</h2><p>我最终还是没有画那一只蝈蝈，当然我到现在还是庆幸的。赵臻怡说，她把蝈蝈画成了一只虾。<br>于是我的画面上，就是一个大石榴，左边有一根树枝，挂着些柿子，再往左散落着两个橘子。蝈蝈呢？在那里爬着，爬着，并不属于我的画。蝈蝈心里是永远欢快的——只要她的女主人放它出来——随意地，攀爬，游走，去自己想去的地方，它永远活在现实中。<br>颜色这一次调的没有上一次好。虽说是写实的，但柿子叶子绿了些，石榴红了些。但是，梅子老师一直说，心里要有完成感，仅此而已。瑕疵总是有的，只在于自己能不能接受。<br>梅子老师忽然就拿起那几个橘子，先是玩击鼓传花，又是玩丢手绢。不过我只是坐在那里看他们玩，玩的欢声笑语，自己在画纸上大片大片的空白里写字。<br>“在缺憾中寻找安慰——不要回避伤心事”这本来是梅子老师上课的主题，意思大概是没有什么能阻止我们相遇，无论是疫情还是什么，都不能阻挡我们画信的脚步。然而我的重心在后半句上，说实在也不是什么伤心事，只是自己身上的事情堆积成山，心里不舒服罢了，再加上右脚起了水泡，一跑步就疼，这个星期整个人状态都不太好。<br>梅子老师应该是注意到我了。但她当时没说什么。很明显——大家笑语盈盈，可那个橘子呢？连我的手都没经过一次。<br>那个橘子是酸的。我吃酸的要冒汗的。</p>
<h2 id="“去走一圈吧。”"><a href="#“去走一圈吧。”" class="headerlink" title="“去走一圈吧。”"></a>“去走一圈吧。”</h2><p>由于今天画的内容比较少且简单，大家普遍的完成很迅速。梅子老师便让我们去走一走，四处去看一看。我跟赵臻怡就走开了，不知怎么心血来潮——可能是一阵冷风吧——就跟她说，天凉了。具体又说了什么我听不清了，恐怕又是聊了聊我们俩的事，又讽刺了旁边同学的行为（懂的都懂）。<br>我比较无聊，就走回伟长楼里，走回二楼。周五的时候我们教室里是没有课的，我可以很方便的进出。我终于鼓足勇气，翻出来我两周之前写的那个稿子，想要拿给梅子老师看——最终目的也是达到了——我走后，教室又恢复了宁静。我从二楼的窗户可以看到楼下同学们在玩什么，画什么，人在高处，故一览无遗。<br>当我再走下去的时候，课程快要结束了。老师想给我们拍张合影，大家的作品都摊开在地上，只有我的合上。我出于自己的一点原因本来是不想打开的，但后来狠了狠心也还是翻开了。我当时还称自己是“漏网之鱼”呢。<br>我们和梅子老师互换了联系方式，我也是加上了她的QQ。不过，她跟我说自己不常看QQ，但那不影响，我偶尔想把我的文章发给她看。</p>
<h2 id="又一次，谈话"><a href="#又一次，谈话" class="headerlink" title="又一次，谈话"></a>又一次，谈话</h2><p>今天的课后，梅子老师主动找到我，问我她有没有可能倾听些什么。我当时就惊讶了，有的时候我自己也意识不到自己的情绪是如此的低落。<br>我就想，我到底是干了什么，或者说了什么，才让她这么想，以为我心里有事情？大概率，还是那“桂花落”，或是大家欢乐时我一人的冷清。我就跟她说，这一周事情太多了，等等等等，可能是压力比较大。我个人觉得我就是这么想的——我说了我不擅长在文章里撒谎——头等大事不必多言，政治几乎没课了却没讲完；包括一些班级里的事物，什么的；还有那些不能不管的副科，什么研究性学习，想不做都不行。<br>梅子老师就开导我说，每个人都是这样，身上事情越来越多，会很累，这就是为什么她坚持去画信。她跟我打比方，她可能会右手拿着笔画画，左手拿着手机接工作电话——因为她觉得，画信不是画给画信课交作业，也不是画给别人看，是真正意义上的画给自己。这是调节自己的一种“法宝”。她又告诉我，她之前一向觉得我很积极主动，包括去找她，给她看自己写的文章——因为她既没有把这件事情当成任务布置给我，而写周记又不是我的义务——但今天看到我的状态，就觉得很反常。<br>她让我和蝈蝈先生告别，把剩下一个橘子送给了我，就和我告别了。<br>可能是有点反常吧。第二个发现的人我这样的人是潘橹，但他和梅子老师找到的点不一样。</p>
<h2 id="随手再写点"><a href="#随手再写点" class="headerlink" title="随手再写点"></a>随手再写点</h2><p>梅子老师说话时的语气还有声音真的是治愈人心的，虽然语言没有赵臻怡的精妙，但一样治愈人心。今天我就听她说，没有太回答，就点点头，表示听了——甚至都不是听懂了。    上课的时候她问大家一个问题，如果自己遇到烦心事了怎么办。我总感觉她在暗示我，我就半开玩笑半严肃地说，睡一觉。只有赵臻怡还说，让它过去就好了。其他人则没有发言。<br>画画的时候我边画边吃了中午买的面包。大家都问，可以吃东西吗，梅子老师就回答说，你们不都带了吃的了吗？大家惊讶，我说只有我带了，现在被我私吞了。<br>写这种周记的时候，我喜欢开单曲循环。今天放的是Good Life。</p>
<blockquote>
<p>Damn right, from the bottom we rise<br>So high, now we cover sky lights<br>We’re building an empire<br>We owe it all to each other<br>Just look at us right now, destined<br>We’re so good right now, legend<br>Here’s to you and I<br>Raise ‘em to the sky</p>
</blockquote>
<p>就这样吧，写完这些，心里舒服多了。</p>
]]></content>
      <categories>
        <category>随笔</category>
        <category>校园</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>两颗银杏果</title>
    <url>/2022/10/14/small-but-shining-ideas-08/</url>
    <content><![CDATA[<p><strong>10.14 画信话心课后有感</strong></p>
<p>14号，正是那个被诅咒的日期，然而我们和梅子老师还是按时相见了。一周不见，如隔七天，那么两周不见，恐怕就是十四天了。</p>
<p>想到今天有画信课，我心里舒服了许多——时局多变，疫情反复，我们却还可以在那一间曾经属于我们的教室里相见——那便是最令人欣慰的了。管什么烦心事？管什么繁多的杂事？</p>
<p>你只是缺一堂画信课罢了，课后我这么想。</p>
<span id="more"></span>
<h2 id="课前（不是演讲）"><a href="#课前（不是演讲）" class="headerlink" title="课前（不是演讲）"></a>课前<del>（不是演讲）</del></h2><p>于是我顺着常走的那几十来级台阶走到一楼——主要还是为了可以看一眼朝气蓬勃的初一小朋友——然后差点忘记搬我们的材料。不知不觉这就成了我的工作了，大家都心照不宣。<br>还是不太敢进那间教室，因为有其他的同学——我一个人，尴尬——我就又走出来，走到大厅里，透过玻璃找梅子老师的影子。诶，她从南面走过来了，走进了伟长楼里，坐在了小沙发上，眼神有点呆呆地，注视着去上选修课的同学们。<br>自从那次课后鼓起勇气之后，我便没有把写过的文章给梅子老师看过了——有点过于的personal——所以她便也没太找我谈话——那是最好的，我可以观察她，她略显沧桑的脸，她手里的，红盒子。<br>其他的同学丝毫不去注意她的存在，感觉在这个大厅里梅子老师是一个隐身人——不过，我想我们也不能强迫每一个人去认识梅子老师——尽管不认识她，你的伟长生活将会变得不完整。<br>红盒子？</p>
<h2 id="礼物"><a href="#礼物" class="headerlink" title="礼物"></a>礼物</h2><p>上课了。梅子老师问我们，你们要在教室里面还是出去？于是大家都回答要出去——谁不盼着呢？那早已是几节课前的诺言，然而我们并不在意。<br>不过少不了的，梅子老师总要多说几句，说一说她养的蝈蝈跳到仙人掌上，说一说前面一位同学的文章到哪去了，读了读她自己写的感想——竟然还有我的句子。受宠若惊。<br>但她没有告诉我们她手里的红盒子是什么，只说，那里面，是我们今天的主题。<br>是什么呢。</p>
<h2 id="府学深处"><a href="#府学深处" class="headerlink" title="府学深处"></a>府学深处</h2><p>一个大箱子，经过几次接力，终于运到了那块府学之碑处。轻轻放在青石板小径上，躺在府学之碑旁，吸取苏中的灵气。取出几个碟子水缸，传给站在池中石头上的我——舀一碗，又一碗，又一碗的水，够我们用一节课。那水就是“鱼乐”之池中的水，有金鱼游，有水蚊子划船，有树叶子漂，不过我都没舀上来。传下去，开始研墨，味道真香。<br>梅子老师终于揭晓了盒中之物，是隔壁文庙银杏树的果子。我们一开始猜也猜不出来，直到隔壁班的张同学一语道破——“那是白果啊~”——才恍然大悟。白果？平时倒也少见，我们这不卖这些，没什么人吃。梅子老师说，一棵树是六百岁，一棵树是两千岁（传话时的口误，实为两百岁），那么这些果子恐怕已经吸收天地精华几百年了罢。<br>我们今天的主题便是白果了——一棵银杏果。我稍微变化一下，作两棵银杏果，希望也无妨。</p>
<h2 id="银杏依旧剪秋风"><a href="#银杏依旧剪秋风" class="headerlink" title="银杏依旧剪秋风"></a>银杏依旧剪秋风</h2><p>我们便零零散散的，坐在草地上，石阶上，乱石上。我们班的女生围成一圈，一开始吵吵嚷嚷的，后来梅子老师委婉的批评了她们，周围便彻底安静了下来。<br>听得到笔杆撞击水缸的声音。和写字是不一样的，心境完全不一样的——一个讲究写的好不好，一个在于画的自己满不满意——是有本质差别的。<br>画什么呢？于是我就记录下了我能看到的一切——尊经阁的一角，碑廊旁的灌木丛，身侧的调色盘。只是没有画人——怕得罪人家。心里都有一种莫名的满足，像是毛躁的边角被抚平，心里便被清空，只有眼前的景，手里的笔，腿上的纸。<br>于是为了贴合主题，我在画面的左下角添上两粒白果——不知怎地来的灵感，可能是因为身侧的赵臻怡拿了两颗过来——倒也和谐。自以为调色今日比之前都好，用墨偏淡但也心满意足，也涨了教训，用两只笔——一支笔上色，一支笔用墨。这是迄今为止我画的最满意的一张信。<br>仍有点潦草，时间不够了，心里有点紧张，恐怕完不成。因为梅子老师曾说，心里要有完成感。<br>作为奖励，每个人去去了两颗银杏之果。我便把它们放于画的对应位置上，与其他同学的作品拍了合影。<br>下课了，心里有点醉醺醺，只听得，赵臻怡说，银杏依旧剪秋风。我跟一句——怎奈何，一墙之隔。一墙之隔是什么？六百年，还有两百年的银杏树。</p>
<h2 id="有幸"><a href="#有幸" class="headerlink" title="有幸"></a>有幸</h2><p>直到今天，我终于决定，选到画信话心课是我三生有幸。本是阴差阳错，心中忐忑，到现在，心中满意，神态自如，也能和初一的同学交谈几句——夏老师曾说，生态影响心态。因为这里是纯粹的美，纯粹的爱，没有其他同学的冷嘲热讽。我在画信课外作画一向是很自卑的——从小画不好——但画信课上就能发挥自如，为什么？因为这里的大家很安静，都陶醉于画信时刻的感觉。<br>还有——<br>我必须要说，谢谢你，赵臻怡同学。<br>谢谢你。<br>因为，唯有你愿意和我彻夜长谈，不开心的时候开导我，画信的时候让我静心。你的画是那么美，文字又是那么美，银杏依旧剪秋风。<br>我相信，总有一天，一片小小的银杏，两颗小小的白果，可以化开那一墙之隔。<br>DO YOU EVER KNOW, THERE IS A SPARK IN YOU.<br>这一切的一切，皆是我有幸。</p>
<p>银杏依旧剪秋风，怎奈何，一墙之隔。<br>但我相信，一切都会更好的。不是么？</p>
]]></content>
      <categories>
        <category>随笔</category>
        <category>校园</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>运动会杂记</title>
    <url>/2022/10/22/small-but-shining-ideas-09/</url>
    <content><![CDATA[<p>本来以为今天可以写很多，但是鉴于我这么累还是少写点吧。</p>
<span id="more"></span>
<h2 id="信任"><a href="#信任" class="headerlink" title="信任"></a>信任</h2><p>一接到运动会招募志愿者的消息，我立马就报了名。</p>
<p>那个时候哪知道，今天会有如此高强度的工作。</p>
<p>课上被王老师光荣的选去检录，那个时候还幻想着，我可以带作业去，两场比赛之间的间隔我可以写写作业啥的。但事与愿违。</p>
<p>于是我穿上那件“伟长常规管理”的绿色马甲，检录去了。</p>
<p>检录，无非是拿着单子叫名字，到了发号码，没到打叉，叫王老师对讲联系主席台。整天我都在检录径赛，比田赛稍微累一点。没有时间摸鱼划水，就是一个人接一个人，一个班接一个班，一场接一场。</p>
<p>我们就在那个大家都看不到的地方，默默地，工作，工作，换来的却是别人的成绩——但我从没说过，我后悔。检录的时候脚是不停的，手里拿着喇叭，看着眼前或熟悉或陌生的选手。把号码牌都装在兜里，要用就拿出来。</p>
<p>总体来说，今天很多重活都是我和富贵干的，我衷心感激王老师对我们俩的信任。真的。</p>
<h2 id="100、200、400、800-1000、4-1"><a href="#100、200、400、800-1000、4-1" class="headerlink" title="100、200、400、800/1000、4*1"></a>100、200、400、800/1000、4*1</h2><p>杨文乐同志把单子给我和其他两个同学，开始检录。具体过程我已经写过，写起来容易做起来难。突发情况很多，天气很热，而我顾不上脱衣服戴帽子，带了零食没顾上吃。</p>
<p>竞争激烈。其实我一场比赛都没有看到，我的目光永远在表格上，号码簿上，一直在听王老师指挥调度，叫我去哪里我就去哪里。平均计算下来，我每带两棒4乘100，就要跑一整圈。操场西边地是崎岖不平的，汗水滴在地上，很快就蒸发了。</p>
<p>早上男子某项目——大概是100——决赛的时候，我们班三个进决赛的没有来。那个时候我不知道可以广播，于是我飞奔回去，穿过检录区，跨过护栏，穿过初一初三，爬上楼梯，用我早就破了的嗓子喊：“周呈毅！程俊彦！曹家瑞！100米决赛！检录了！”他们第一遍没听懂。不过最后跟着我去了，救回了一个冠军。</p>
<p>中午的时候初三一位同学拉肚子，临时找不到替补，捂着肚子坐在地上，神情很是不甘。那算是我最关注的一个细节。最终很不幸，这位同学只能DNS，我那一刻心里与他一样。还有，跑完男子1000，有一位同学吐了。天，他是有多么卖力？</p>
<p>我没有见证任何一次荣耀，却见证了每一次荣耀。</p>
<h2 id="趣味项目"><a href="#趣味项目" class="headerlink" title="趣味项目"></a>趣味项目</h2><p>说是趣味，其实就是比个高兴。</p>
<p>气大如牛——吹乒乓球之前，我们去旁边的水池接水。水是要接满的，完全端不过去。一路端一路洒，回头一看，竟是一条水路。下半身全都湿了。</p>
<p>丢沙包，我觉得那个距离确实是有点远了。我们一开始20米，初一（1）班比完0分，我们减小距离让他们重赛了。总结规律，沙包是丢不进来的，只能靠滚进来。找准了角度，然后抛，最后一小段可以滚进去。</p>
<h2 id="投稿"><a href="#投稿" class="headerlink" title="投稿"></a>投稿</h2><p>“赵老师，班里的小玉米都要成爆米花了！”</p>
<p>“潘波老师，您昨天函数卷子批的那么快，祝您今天能跑的同样快！”</p>
<p>“张明宇老师太帅了！”</p>
<p>…………</p>
<h2 id="王老师"><a href="#王老师" class="headerlink" title="王老师"></a>王老师</h2><p>真的。王静老师是让我真正喜欢上体育课的老师。</p>
<p>一整天，只有她注意到我们有多么累。</p>
<p>她还把自己的奶茶给我和富贵喝了。中午还给我们买了饮料。</p>
<p>谢谢您，让我能够坚持下去。</p>
<p>先写这么多吧。累了。</p>
]]></content>
      <categories>
        <category>随笔</category>
        <category>校园</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>绿野村·杂记</title>
    <url>/2022/11/11/small-but-shining-ideas-12/</url>
    <content><![CDATA[<p>美好的时光，一溜烟，早已跑得没影。我只能靠留下来的一大堆照片，激起一点点回忆，或甜或苦，苦中作乐。<br>我答应过梅子老师我会坚持写周记，但说到底这绿野村·杂记其实不是为了“让梅子老师看”而写的（一向都不是），只是回忆太珍贵，只能通过一点拙劣的语句简记一下，也许我会写的像流水账，但我觉得每件事都很重要。<br>另外，这个周末我还有一项更艰巨的任务，要把这次活动的视频剪出来。不知道，当我再一次仔细看那些照片时，心里会有怎样的感觉。</p>
<span id="more"></span>
<h2 id="第一日·清晨"><a href="#第一日·清晨" class="headerlink" title="第一日·清晨"></a>第一日·清晨</h2><p>我拖着箱子、背着包，往外走。心里自然是焦急的，既是因为赶时间，也是因为心里抑制不住的高兴。上个学期的活动因为疫情取消了，这个学期的，自然要好好珍惜。<br>我在出发前一天和几个同学打赌，地铁上肯定会有人问我，上学还要拿箱子吗——然而并没有。赌输了，不过没有什么惩罚。<br>上了车。我还是像小学的时候一样，坐在最后一排，最左边的位置。路程挺长的，赶上早高峰，走走停停，停停走走，车上的同学都在喧闹，但我能从中感受到他们的高兴。<br>我呢？看着窗外，努力辨认着，自己到了哪里。后半程则是在看太湖大道上的有轨电车。</p>
<h2 id="第一日·上午·中午"><a href="#第一日·上午·中午" class="headerlink" title="第一日·上午·中午"></a>第一日·上午·中午</h2><p>迎接我们的那个军官似乎有点熟悉，好像就是去年给我们军训的军官。军训么，初一已经有过一次，这次不过是复习——一个小时，甚至算不上军训。<br>中午是一次野炊。毫无经验的我们，面对十分传统的炉灶，手忙脚乱。基本上没人知道先做什么再做什么，做的饭也是半生不熟。然而自己吃起来却是那么香。<br>另及：吃自己做的饭之前很多同学吃香肠已经饱了。同时我也后悔自己没有多带点吃的。时间紧迫，我只能尽量写简略。</p>
<h2 id="第一日·下午·晚上"><a href="#第一日·下午·晚上" class="headerlink" title="第一日·下午·晚上"></a>第一日·下午·晚上</h2><p>一片贫瘠的土地，一群兴奋的孩子，一片绿油油的希望。下午的活动是种青菜，由物理皮老师和地理王老师带队。<br>每个组按照1米比20厘米的长度确定垄和沟渠，随即就下铲子，开挖。然而这片土地过于荒——以前大概是建筑工地的肥料——满是石头，砖块，瓷片，玻璃，我们花了将近一个小时在处理垃圾上。真正种青菜，只是钻个孔，把菜苗插进去浇点水就结束了。<br>一垄可以种20棵。种下的青菜排排站，十分有趣。用过晚餐，回到宿舍，衣服上都是泥。简单用湿纸巾擦一下，又去报告厅看了电影，是《我和我的家乡》，之前没看，正好补上。<br>洗洗赶紧睡。虽然赵老师说了查房的时间，但根本没有老师进来，害得我们每到点都要假装睡一会，然后继续说话，甚至吃东西。</p>
<h2 id="第二天·清晨·上午"><a href="#第二天·清晨·上午" class="headerlink" title="第二天·清晨·上午"></a>第二天·清晨·上午</h2><p>宿舍里有掀开被子走动的声音，我被惊醒。外面非常暗，窗户外根本不透光，没想到大家竟然都醒了。一问时间，将近5点。但没办法，醒了就是醒了，根本回不到床上，换衣服，洗漱，吃点东西。小拉开窗帘，外面基本没有人，只有宿舍外的公路上有人拿着手电巡逻。<br>聊天到6点。我们再也按耐不住，出去转了一圈。天气颇为奇怪，迷雾重重，湿度很大，能见度低。月亮还高挂着，太阳没有升起，却也很明亮。渐渐地走廊上人多了，看见窗户上起了雾，有些人开始写一些数字（都懂），另外的人擦，我觉得无趣，回去了。<br>先晨跑，再吃早餐。早餐和在家吃的差不多。今天上午我们的项目是挖山芋。山芋深埋在地里，顶上缠绕着的是藤，要先全部扯掉。然后铲子一铲，便可以出来。然而力度控制的不好，有一部分虽然很大，却被拦腰斩断，实为可惜。<br>全班放在一起称重，1500斤左右，大家都非常满足。</p>
<h2 id="第二天·下午·晚上"><a href="#第二天·下午·晚上" class="headerlink" title="第二天·下午·晚上"></a>第二天·下午·晚上</h2><p>画风筝。我期待了很久的项目。因为绿野村冲掉了我们一节画信课，所以用画风筝来勉强弥补一下。不过大部分都是赵臻怡画的，我只上了一点色——浅蓝色配浅紫色，可以配出一种很梦幻的颜色——可惜这种紫不是Lucy喜欢的。画完了，晾在草地上，可惜没有放飞。<br>晚上是一站到底知识竞赛，然而题不是太简单就是太难，看着没意思。<br>回到宿舍，虽然很早就洗漱，但没人有睡觉的意思。仍然没有老师来查房，过了预定的时间（10点30左右），大家就放开了很多，聊天到11点半，最终剩我，娇娇，安琪子（胡阳）还有沈朗。不过过了12点就只有我和娇娇了——不过我事后才知道王卓群一直在假睡——我就下到他的床上，又聊了很久的天，什么都能聊，聊一点关于我的，关于他的，之前不知道的事情。</p>
<h2 id="第三天·上午·下午"><a href="#第三天·上午·下午" class="headerlink" title="第三天·上午·下午"></a>第三天·上午·下午</h2><p>第三天早上居然6点20准时起了床，没早没晚。<br>上午是剥毛豆、花生，只不过老师给的太多了，我们足足剥了两个小时——五个人，只有两个人在认真做，其他三个人哪？隔壁有橘子树，摘橘子去了。这是一件简单而枯燥的任务，手法都一样，除非——把毛豆当枪玩，这我显然不提倡。<br>下午是一个关于心肺复苏的课程，我们每个同学在假人上试了一试。排队的时候，有玩魔方的，有看书的，有狼人杀的，我是跟赵老师聊天。最后，一张合照，标志我们三天之行圆满结束。</p>
<h2 id="第三天·回程·晚上"><a href="#第三天·回程·晚上" class="headerlink" title="第三天·回程·晚上"></a>第三天·回程·晚上</h2><p>大巴车上，同学们依旧喧闹。我不理他们，直接单手倚在窗玻璃上，睡着了。回来的地铁上也是。<br>晚上，我负责把这次活动的视频剪出来。看着大家的照片，听着略带伤感的音乐，心里五味杂陈——莫名其妙，我也不知为何。还有就是，写这篇游记，虽然也没写多详细，我不是特别满意。<br>最后作诗一首。</p>
<blockquote>
<p>一块贫瘠的土地</p>
<p>一群兴奋的孩子</p>
<p>一片绿油油的希望</p>
<p>汗水浸润着土地</p>
<p>山芋被一块块拔出</p>
<p>欢笑飞向了远方</p>
<p>草地上的风筝</p>
<p>虽没飞上天</p>
<p>却也寄托着我们的希望</p>
<p>一颗颗花生毛豆</p>
<p>磨破了皮的手指</p>
<p>视频里  是同学们的欢声笑语</p>
<p>我常常回想那</p>
<p>绿野村的每一幕</p>
<p>每一个字  每一句话</p>
<p>都洋溢着幸福</p>
<p>这样一颗种子</p>
<p>已深深扎根我心中</p>
<p>藕断丝连  回忆不断</p>
<p>那是生活的美好  劳动的满足</p>
<p>当略带伤感的音乐</p>
<p>和绿野村的照片发生碰撞</p>
<p>视频里是同学们的喧闹声</p>
<p>剪视频有点变得格外冷清</p>
<p>于是我将记忆深深藏起</p>
<p>只留下这些句子——</p>
<p>让绿野村的美好</p>
<p>化作小鸟  去飞翔</p>
<p>Tonight</p>
<p>We are young</p>
<p>So let’s set the world on fire</p>
<p>We can burn brighter</p>
<p>than the sun</p>
<p>Tonight</p>
</blockquote>
<p>回忆。写完了，做的视频得到“领导”地肯定，嘴角，有点上扬。</p>
]]></content>
      <categories>
        <category>随笔</category>
        <category>校园</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>雨·留白</title>
    <url>/2022/11/18/small-but-shining-ideas-13/</url>
    <content><![CDATA[<p><strong>11.18 画信话心课后有感</strong></p>
<p>天气暗沉，乌云密布，空气潮湿，正是刚下过雨的样子。我一向期待着一节雨中的画信课，今天终于如愿以偿。天气已冷，身上穿着笨重的衣服，在碧霞池边站着画信，也是一种别样的体验。</p>
<span id="more"></span>
<h2 id="课前"><a href="#课前" class="headerlink" title="课前"></a>课前</h2><p>在周四，我把我们的画信课写进了英语作文，还提到了画信的“不好没关系，不好才是最好”这条特点。也是因为我们上一周没有上成画信课，比较遗憾，我就想到了这个主题。<br>我照常在伟长楼门口迎接梅子老师。她问起我脚伤怎么样了，我也就如实回答——没好到哪里去，去绿野村又受了伤，现在还在疼。于是我们进了教室，准备上课。<br>是我熟悉的师生问好环节。老师好。老师真好。</p>
<h2 id="课后感想与回顾"><a href="#课后感想与回顾" class="headerlink" title="课后感想与回顾"></a>课后感想与回顾</h2><p>梅子老师每节课都会指定一位同学来写本节课的总结，她自己也会在课前写一篇回顾。至今为止还没有请到我，不过我也把自己写的周记或是打印了交给他，或是电子稿发给她——梅子老师会回我几个字，或是一句话。像绿野村那次，时间晚了，她也就回了“温暖。晚安”，我愿称之为简约而优雅。只是她今天因为有一点事情没有写，我们也就无缘听到梅子老师内心的想法。<br>梅子老师很珍视我们写的总结。</p>
<h2 id="没有什么主题，就是出去画画"><a href="#没有什么主题，就是出去画画" class="headerlink" title="没有什么主题，就是出去画画"></a>没有什么主题，就是出去画画</h2><p>今天这节课我们本来不太计划出来画画，故没有什么特定的主题，于是梅子老师就即兴起名叫“留白”。我们去到碧霞池边，仰高亭下，舀水、研墨。雨开始下了，池面荡起圈圈涟漪，正是我所期待的天气。<br>我自己一个人拿了墨和颜料，放在远一点的栏杆上，自己听着音乐画信。没有人来打扰我，只有无数雨点打湿了我的纸笔，让墨都晕开，晕成一幅独特的画面。我画的是池中央的那个亭子，不是特别像，毕竟后来雨水打湿了我的视线，也打湿了我作画的对象。只是简单的勾了勾线、上了点色，时间就不够了，我只好作罢。<br>下课时分，雨停了，我望着池中央的亭子发呆。梅子老师问我，想什么呢，我说，很遗憾，现在雨已经停了。“现在那种感觉消失了？”<br>这句话正合我意。您还是很懂我的。<br>其实我也没有特别想什么，因为我的耳中一直循环着一首歌：</p>
<blockquote>
<p>When I was young I’d listen to the radio</p>
<p>Waiting for my favorite songs</p>
<p>When they played I’d sing along</p>
<p>It made me smile</p>
<p>Those were such happy times and not so long ago</p>
<p>how I wondered where they’d gone</p>
<p>all the songs I love so well</p>
</blockquote>
<h2 id="课后"><a href="#课后" class="headerlink" title="课后"></a>课后</h2><p>回家的地铁上，因为边听音乐边做数学卷子，我坐过站了。</p>
<p>其实我今天没有什么特别想说的，就是想问一句，我有的时候是不是在故意矫情？是不是“为赋新词强说愁”？不知道。像“雨水打湿了我的视线”这种句子也是比较夸张的，故不用太当真。</p>
]]></content>
      <categories>
        <category>随笔</category>
        <category>校园</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>转折·点</title>
    <url>/2022/11/05/small-but-shining-ideas-11/</url>
    <content><![CDATA[<p><strong>11.4 画信话心课后有感</strong></p>
<p>期中考试落下帷幕，一切，终将回归平静。初一的同学已经在正常上课了，我有幸听到几句政治。今年政治考得不好，但老样子等会再说。<br>虽说我给这个系列就起名为《画信话心课后有感》，标题也是梅子老师上课的主题，但我私下里也认为这是每周的周记。</p>
<span id="more"></span>
<h2 id="闲暇"><a href="#闲暇" class="headerlink" title="闲暇"></a>闲暇</h2><p>我们的最后一场考试是英语，十点四十我笑着走出考场——不是因为考得好，纯粹是因为考完了。正是初一的课间，整栋楼又有了那种充满活力的烟火气——走廊里，喧闹；教室里，懊恼的、后悔的，惊叫。然而考试后我不喜欢在教室里逗留——任何时候都不喜欢——我喜欢出去走一走，可能就在门外，也可能是去吃饭，就像今天一样。时间还早，我第一个到了泮水居，简餐过后和几位同学聊几句天，又朝回走。周五中午是要做核酸的，我们在道山脚下等着，无非是，继续聊天。<br>聊了什么内容我已经不记得。回来一看，时间还早——不到十一点半——便想着继续出去，随意的，走一走，正巧赵臻怡来约我，两人便欣然起行。感觉挺奇妙的——就是在学校里漫无目的地走，我却出于肌肉记忆又走到了泮水居——但我没有。我们在道梦空间边的小花圃里停留一会，也不说什么，我目光朝着香樟大道，看着，看着，初一的小朋友跑过来，打闹嬉戏着，跑过去。没有人注意到我俩，毕竟他们早已经考完了，话题多了起来，心情好了起来。<br>良辰美景总是短暂。在idle的时候时间总是乘着火箭前去，回到教学楼十二点刚过，我和她又去找生物王老师说了两句——期中考试呀，初一的实验呀，绿野村呀——直到十五分已过。不过幸亏是考完试，我们回去了他们在看电影，只不过我没什么兴趣。</p>
<h2 id="课前"><a href="#课前" class="headerlink" title="课前"></a>课前</h2><p>下午的三节课过去的很快，赵老师跟我们宣布了绿野村的安排，分配了宿舍，而这就花了一整节课。但不管怎样我们没有与画信课擦肩而过。我今天搬了东西，就跟上次一样出了伟长楼，朝着南方看，望眼欲穿，直到，那个红衣身影出现——是梅子老师。她胳膊上挎着一个同样红色的包，缓缓地向伟长楼走过来。<br>同学们，喧闹着，往前跑；梅子老师则是一言不发，于人群中逆行。我站在楼梯的拐角处，身后是冷风在吹，身前，却是即将到来的温暖与欢乐。<br>我们打了招呼，又走进来，准备上课。</p>
<h2 id="史政：那个课间"><a href="#史政：那个课间" class="headerlink" title="史政：那个课间"></a>史政：那个课间</h2><p>时光流转，记忆跳跃。今年考历史和政治之间有五十分钟的间隔，一反常态，又非常难得。<br>我往楼下走，看着刚收完卷的监考老师往楼上走。赵臻怡和莫一禾在楼下聊天，两人都没注意到我，直到我问她们，在说什么。楼外面是几个人在踢球，扔松果子，还有坐在台阶上过政治的——里面也差不多，只是大部分人都在聊天，对答案。然而我说过我讨厌在考试后对答案，我只有前者可做。<br>可是，真的吗？聊了十分钟，我又找到新的出路。三楼语文办公室的门口那条走廊正好于其他走廊垂直，我于是趴在栏杆上，楼下的情景我一览无余。我看到莫一禾抬起头来看见我，然后——出于什么心理学原理——两个人都笑了，完全忘了，等会还有政治。<br>风雨总在风雨后！</p>
<h2 id="研究画信"><a href="#研究画信" class="headerlink" title="研究画信"></a>研究画信</h2><p>今天我们没有出去画，因为梅子老师有些重要的、琐碎的话要跟我们讲，似乎也是在磨炼我们的意志。<br>她打开手机上一个群聊——画信行天下还是什么——带我们看起了一本画信课的校本教材。讲一些之前讲过，讲一些似曾相识的，看一些别人的作品。只可惜我没太记住老师讲了些什么，没带纸笔——那是不是，违背了一个信使的原则？我不得而知。<br>我这么说，是因为，真正热爱、真正遇见什么事会画上一幅信的人——比如梅子老师——身上总会带着画信的四宝，纸、笔、墨，还有一颗心。我呢？没笔没墨，又记不在心里。脑中还是刚考完的那些知识点，什么洋务运动，什么英语报纸单词，我只能尽我所能去听，尝试把一些新知识塞进脑中——恐怕我只敢对梅子老师说这样的话。<br>信使。依我看来，就是画信的人。然而又不全是，画了信却不成为一名信“使”，恐怕是一种缺憾。可我却没有那样一种勇气，既没有太大的勇气给别人看，更别提寄出去了。我总觉得我没有从根源上理解这件事，“画好后一定要寄出去”这一条原则，我似乎从来没有遵守过。<br>如果我说，我的信都寄给我自己了，您会相信吗？</p>
<h2 id="转折点"><a href="#转折点" class="headerlink" title="转折点"></a>转折点</h2><p>期中考试是上下学期的转折点。梅子老师也说，这节课是一个转折点。可惜我没有太听懂为什么——只是因为上半学期结束了吗？还是，有什么深意，不过我没有理解？<br>留给我们画信的时间不多。我于是一切从简，自己拿了砚台磨了墨——不浓不淡，刚好够写字，不会向上一节课一样——于是我就写了四列字：<br>    “期中考试结束了 好与不好皆成过往 最重要的还是往前看 心里想开些”<br>    “高兴的事史政之间的那些时候 我就在三楼观察大家”<br>似乎又要扯回已经写过的内容。<br>梅子老师一看又说，看来我还是没有想开。想开了的人，谁又会写这么些呢？有的时候我确实觉得自己是在故意写这种句子，其实心里一点也没有——但我偶尔就是想这样——不知出于什么理由。但我不知道，这种心情在以后是否会成为现实？<br>赵臻怡说，属于她的转折点是初一入学伟长，让自己放下了高傲（高冷？）这一负担。强者的意义是什么？虽然都说，把强者当成自己的榜样，甚至自己的目标——但其实很大一部分时候强者只能够让我放平心态。我现在已经不会为自己不是班里的强者而自卑，也许我从来就没有过吧。<br>我愿意做一只大池塘里的小鱼。</p>
<blockquote>
<p>阳光总在风雨后 乌云上有晴空 珍惜所有的感动 每一份希望在你手中<br>阳光总在风雨后 请相信有彩虹 风风雨雨都接受 我一直会在你的左右</p>
</blockquote>
]]></content>
      <categories>
        <category>随笔</category>
        <category>校园</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>无题</title>
    <url>/2022/11/25/small-but-shining-ideas-14/</url>
    <content><![CDATA[<p><strong>11.25 画信话心课后有感</strong></p>
<p>今天留给我的时间不多，但多少还是要写。不过，梅子老师即没有宣布本课的主题，我也没有想到特别好的题目，所以我只好记为“无题”。</p>
<p>但是“无题”也是一种题目。</p>
<span id="more"></span>
<h2 id="忙碌着"><a href="#忙碌着" class="headerlink" title="忙碌着"></a>忙碌着</h2><p>布置板报。几个同学一筹莫展，缺少材料，无法开工。于是我提议，我们去楼梯三角间把画信课的工具拿出来用，大家犹豫后也只好同意了。随着课程的进行，我们对画信已经有一些感觉了，于是倒了水，蘸了颜料，在墙纸上画起来。</p>
<p> 一棵树。先画树干，再画树叶。树干是棕里带黄的颜色，树叶则是用深绿、浅绿点出来，以粉色作为点缀的。把同学们的“我要点赞”贴上去，它就成了一棵点赞树。</p>
<h2 id="上课"><a href="#上课" class="headerlink" title="上课"></a>上课</h2><p>我刚想要出门，去看看外面——银杏始黄，人群熙熙攘攘——然而梅子老师今天来得很早，故没有看成。不过我们几个给梅子老师展示了一下我们的“点赞树”，也算是一个充实的课间。</p>
<p>梅子老师朗读了她刚写——补写的——课程记录，又跟我们说，过了一段时间，那种感觉就淡了。其实对我来说，只要一件事情一结束，很多细节我就会记不得了，补写也写不出来什么——不像语文作文，可以自由发挥细节。</p>
<p>出去。梅子老师说，可以去玩，回来了画一片树叶了事——然而我没有。画信本身是一件庄严的事情——为何要敷衍作业呢？但我后来又觉得，她们玩得开心，画的也开心，却达成了画信的一个目标；我呢，则是自讨苦吃。</p>
<p>有的时候，我这个人就是这样，做事太较真。常规积分统计，多给一分，来源不明，宁愿不要；英语默写没有全对老师却敲了章，也要找老师去划掉。我总是会做一些别人觉得很傻的事情，说“这个人怎么这样”，但其实这样我心里最安心——别人觉得，我做这些事，我是亏了；我觉得，我做这些事，是真正对得起自己、对得起别人。</p>
<p>落笔，是春雨池畔的木桌子，长条椅，颜料，砚台，饼干。写上几个字，“属于我们的画信时光”。梅子老师说缺点颜色，但我也没去改了。</p>
<p>我们去玩——她们去玩——的时候，梅子老师也没闲着，自己取了纸笔，画起信来，让我们送给自己的班主任老师。是春雨池里的大鹅，我们几个人写上名字，便送给了赵老师。出乎我们意料的是，赵老师说，顾梅老师每年都会给他画一封信。原来，这是梅子老师的老传统吗？</p>
<p>梅子老师把我们的照片做成了书签送给我们。</p>
<h2 id="课后"><a href="#课后" class="headerlink" title="课后"></a>课后</h2><p>又是艰巨的任务。今天初二足球赛踢完了，我照例负责做出视频。这无疑，又是一次考验。</p>
]]></content>
      <categories>
        <category>随笔</category>
        <category>校园</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>“最后”一堂课</title>
    <url>/2022/12/02/small-but-shining-ideas-15/</url>
    <content><![CDATA[<p><strong>12.2 画信话心课后有感</strong></p>
<h2 id="冬雪"><a href="#冬雪" class="headerlink" title="冬雪"></a>冬雪</h2><p>寒潮突然来袭。气温骤降，只有1C~5C。早上起来，居然下起了雪。</p>
<p>等到了学校，雪下大了。雪花在空气中飘飞、翻滚，时而改变方向。外面是很冷的，然而我们都不顾一切的去一楼听了初一的歌王争霸赛。雪花，落在我们的衣服上、头发上、作业本上，又都消失不见。</p>
<p>雪落无痕。</p>
<span id="more"></span>
<h2 id="噩耗"><a href="#噩耗" class="headerlink" title="噩耗"></a>噩耗</h2><p>梅子老师的身影，终于出现在我的视线之中。</p>
<p>走近些，她第一句话跟我说，我们可能要把这一趟可当作最后一堂课来上了——疫情严重了。梅子时间也开不成了，多年的传统就此中断一次，实为遗憾。</p>
<p>我心里霎时间吃了一惊，一颗热切的心，有些变凉了。上一次疫情，我们挺过来了，又在下一个周五得以相聚。难道我们的运气就此用完了吗？</p>
<p>梅子老师在教室里宣布这一切的时候，一位同学提醒她：“您不要再说下去了啊！”然而事实就是如此。说与不说并不能改变什么，不如说出来，心里能放下一点负担。</p>
<h2 id="泮池边"><a href="#泮池边" class="headerlink" title="泮池边"></a>泮池边</h2><p>每位同学此刻的心情，大概跟我一样。冷，身子在抖。那是一种无能为力的渺小感。</p>
<p>取了水，研了墨，我和赵臻怡一起坐在泮池南侧的土坡上，没有人打扰我们。</p>
<p>然而我不愿意记录我们都说了些什么——这些都是绝密的。嘴上勤快，笔下就迟了——简单地画了一棵银杏树，题上几个字：</p>
<blockquote>
<p>一棵银杏树见证当下</p>
<p>在那偏僻的角落</p>
</blockquote>
<p>时光飞快。下课了。我们竟没有跟梅子老师好好告个别，就匆匆离去了。后悔啊！然而后悔又有什么用呢？</p>
<p>梅子老师请我帮她剪我们的学期总结视频。不知道看到所有那些照片、视频的时候，我心里会作何感想。</p>
<p>大概是无限的回忆，和对时光流逝的无奈吧。</p>
]]></content>
      <categories>
        <category>随笔</category>
        <category>校园</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>3个小妙招加速你的GitHub~</title>
    <url>/2021/08/14/speed-up-github/</url>
    <content><![CDATA[<p>想必大家都知道<code>Github</code>是一个极佳的云端代码储存、交流平台，同时你也可以简单粗暴地把它当作云盘或者服务器。<br>但在众多优点之中，有一个问题却一直深深地困扰着我，那就是<code>GitHub</code>实在太！慢！啦！  </p>
<span id="more"></span>
<p>在我头几次用Github的时候，我几乎根本上不去，不过以前不过是下载一些搜索到的小工具啥的。<br>但现在不一样了。我开始做网站，开始天天<em>（也许不是天天）</em>更新，每一次都等待几十分钟的加载时间（白天还好），简直就是浪费生命。相信大家都有同感吧！<br>于是，我就整理了下面3种方法，给大家节约“生命”。</p>
<h2 id="0-目录"><a href="#0-目录" class="headerlink" title="0. 目录"></a>0. 目录</h2><ul>
<li>方法一：修改<code>Host</code>，其实更加浪费生命  </li>
<li>方法二：改链接，做镜像，世界变得更加美好  </li>
<li>方法三：装“边车”，速度嗖嗖嗖直窜3秒！  </li>
</ul>
<hr>
<h2 id="1-我有大把时间，我要改hosts！"><a href="#1-我有大把时间，我要改hosts！" class="headerlink" title="1. 我有大把时间，我要改hosts！"></a>1. 我有大把时间，我要改<code>hosts</code>！</h2><p>好吧，如果你真的这么无聊，那我就讲一讲吧……<br>首先在<code>C:\Windows\System32\drivers\etc</code>找到<code>hosts</code>文件。如果你以前没用过，那可能需要打开权限。（如下图）</p>
<p><img data-src="https://z3.ax1x.com/2021/08/15/fcKoNV.png" alt="hosts1"></p>
<p><img data-src="https://z3.ax1x.com/2021/08/15/fcKLjJ.png" alt="hosts2"></p>
<p><img data-src="https://z3.ax1x.com/2021/08/15/fcKXu9.png" alt="hosts3"></p>
<p>用记事本打开，这个文件里在没有改动的情况下只有几行注释，忽略即可。<br>现在我们到 <a href="https://www.ipaddress.com"><code>Ipaddress</code></a> 或者<a href="https://www.itdog.cn/ping/"><code>itdog</code></a>查下面三个网址的<code>IP</code>，现在（其实是很久很久以前）查询如下：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">网址</th>
<th style="text-align:center">解释</th>
<th style="text-align:center">IP</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>github.com</code></td>
<td style="text-align:center">这是主站</td>
<td style="text-align:center"><del>140.82.114.4</del></td>
</tr>
<tr>
<td style="text-align:center"><code>raw.githubusercontent.com</code></td>
<td style="text-align:center">动态资源</td>
<td style="text-align:center">185.199.108.153</td>
</tr>
<tr>
<td style="text-align:center"><code>raw.githubusercontent.com</code></td>
<td style="text-align:center">动态资源</td>
<td style="text-align:center">185.199.109.153</td>
</tr>
<tr>
<td style="text-align:center"><code>raw.githubusercontent.com</code></td>
<td style="text-align:center">动态资源</td>
<td style="text-align:center">185.199.110.153</td>
</tr>
<tr>
<td style="text-align:center"><code>raw.githubusercontent.com</code></td>
<td style="text-align:center">动态资源</td>
<td style="text-align:center">185.199.111.153</td>
</tr>
<tr>
<td style="text-align:center"><code>avatars.githubusercontent.com</code></td>
<td style="text-align:center">你的头像</td>
<td style="text-align:center">185.199.108.133</td>
</tr>
<tr>
<td style="text-align:center"><code>avatars.githubusercontent.com</code></td>
<td style="text-align:center">你的头像</td>
<td style="text-align:center">185.199.109.133</td>
</tr>
<tr>
<td style="text-align:center"><code>avatars.githubusercontent.com</code></td>
<td style="text-align:center">你的头像</td>
<td style="text-align:center">185.199.110.133</td>
</tr>
<tr>
<td style="text-align:center"><code>avatars.githubusercontent.com</code></td>
<td style="text-align:center">你的头像</td>
<td style="text-align:center">185.199.111.133</td>
</tr>
</tbody>
</table>
</div>
<p>注意，写入<code>hosts</code>的格式如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">IPAddress HostName</span><br></pre></td></tr></table></figure>
<p>如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">140.82.114.4    github.com  </span><br><span class="line">185.199.108.153 raw.githubusercontent.com  </span><br><span class="line">185.199.109.153 raw.githubusercontent.com  </span><br><span class="line">185.199.110.153 raw.githubusercontent.com  </span><br><span class="line">185.199.111.153 raw.githubusercontent.com</span><br><span class="line">185.199.108.133 avatars.githubusercontent.com</span><br><span class="line">185.199.109.133 avatars.githubusercontent.com</span><br><span class="line">185.199.110.133 avatars.githubusercontent.com</span><br><span class="line">185.199.111.133 avatars.githubusercontent.com</span><br></pre></td></tr></table></figure>
<p>按照这样的格式输入到 <code>hosts</code> 文件里，再访问 <code>Github</code> 应该就很快了！<br><strong>小提示：每次只用查主站的<code>IP</code>就好了，其他的基本不会变~你可以在<code>itdog</code>中选择一些类似镜像的<code>IP</code>，比如<code>20.205.243.166</code>等等。</strong></p>
<hr>
<h2 id="2-我只用GitHub下载程序，不使用其他功能！"><a href="#2-我只用GitHub下载程序，不使用其他功能！" class="headerlink" title="2. 我只用GitHub下载程序，不使用其他功能！"></a>2. 我只用<code>GitHub</code>下载程序，不使用其他功能！</h2><h3 id="2-1-Git版"><a href="#2-1-Git版" class="headerlink" title="2.1 Git版"></a>2.1 <code>Git</code>版</h3><p>如果你是用<code>Git Clone</code>仓库，那么你就走运了。平时，我们<code>Clone</code>时语法是这样的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/guleixibian2009/guleixibian2009.github.io.git</span><br></pre></td></tr></table></figure>
<p>但如果你用了镜像网站，速度会极快：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://hub.nuaa.cf/guleixibian2009/guleixibian2009.github.io.git</span><br></pre></td></tr></table></figure>
<p><code>https://hub.nuaa.cf</code>是一个极为神奇的网站：作为一个镜像网站，他把几<code>KiB/S</code>的速度提到了几百<code>MiB/S</code>，速度大幅提升！<br>但这样会有一个<code>bug</code>：<code>Git</code>会把你<code>Push</code>回去的网址变<code>https://hub.nuaa.cf</code>。很尴尬的是，这并不是你想要<code>Push</code>回去的地址，于是，经过无数尝试，我发现在<code>.git</code>文件夹（是隐藏的）中有一个<code>config</code>文件，里边是这样写的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">......</span><br><span class="line"></span><br><span class="line">[remote &quot;origin&quot;]</span><br><span class="line">    url = https://hub.nuaa.cf/guleixibian2009/guleixibian2009.github.io.git</span><br><span class="line">    fetch = +refs/heads/*:refs/remotes/origin/*</span><br><span class="line"></span><br><span class="line">......</span><br></pre></td></tr></table></figure>
<p>有没有注意到那个<code>url</code>后面跟了一个<code>https://hub.nuaa.cf</code>？<br>为了让它“恢复正常”，要把它改回<code>https://github.com</code>。<br>现在，应该就可以了吧！<em>（如果没有<code>.git</code>文件夹说明你没有<code>Push</code>过，或者这不是你的项目）</em></p>
<h3 id="2-2-网页版"><a href="#2-2-网页版" class="headerlink" title="2.2 网页版"></a>2.2 网页版</h3><p><code>https://hub.nuaa.cf</code>并不是<code>GitHub</code>的唯一镜像。如果你觉得<code>GitHub</code>太慢，<br>你可以注册一个中文版<code>GitHub</code>，叫做<code>Gitee</code>。<br>注册后，点击<code>+</code>号，并且导入你的<code>GitHub</code>仓库，继续下载就超级快乐啦！<br><img data-src="https://z3.ax1x.com/2021/08/15/fcKjBR.png" alt="import1"><br><img data-src="https://z3.ax1x.com/2021/08/15/fcKvH1.png" alt="import2"></p>
<hr>
<h2 id="3-我天天要用GitHub，给个靠谱的方法！"><a href="#3-我天天要用GitHub，给个靠谱的方法！" class="headerlink" title="3. 我天天要用GitHub，给个靠谱的方法！"></a>3. 我天天要用<code>GitHub</code>，给个靠谱的方法！</h2><p>在<code>GitHub</code>上有一个项目，叫做<code>@docmirror/DevSidecar</code>，中文名叫<code>开发者边车</code>（也就是我现在用的）。<br><strong><em>小提示：使用此系统可能会造成系统代理服务器配置更变，请小心驾驶</em></strong><br>这个软件是我某个同学推荐的，几乎解决了关于<code>Github</code>速度的所有问题。（后来，22年6月它又帮我解决一个大难题，众所周知<code>jsdeilvr</code>这时被墙了……）<br>如果你需要下载或帮助，请去他的 <a href="https://github.com/docmirror/dev-sidecar"><code>Github</code>项目地址</a>（这个项目在<code>gitee</code>上面已经被封锁了）。<br>用之前要先按指导安装证书，随后选择默认模式。</p>
<p><img data-src="https://z3.ax1x.com/2021/08/15/fcMSN6.png" alt="sidecar1"><br><img data-src="https://z3.ax1x.com/2021/08/15/fcMp4K.png" alt="sidecar2"></p>
<p>不过后来我又发现一个问题……如果你用的是<code>Firefox</code>，那么他有时会有“未连接”的界面。</p>
<p><img data-src="https://z3.ax1x.com/2021/08/15/fcKzAx.png" alt="problem">  </p>
<p>白天速度不算慢，你就关掉代理就好了。不过如果你无法忍受的话，你可以把边车调成安全模式，这个模式不需要证书。实际上，造成刚刚那个界面的原因就是<code>Firefox</code>无法识别边车自动生成的证书。<br>所以，你学废了吗？<br>不过，经过一“晚上”的查询，我终于查到了一个解决办法。<br>在网址栏里输入<code>about:config</code>，会显示如下界面，我们可以通过修改底层配置的方法来解决这个问题。</p>
<p><img data-src="https://z3.ax1x.com/2021/08/15/fcKH9U.png" alt="config1"></p>
<p>点击“接受风险并继续”，会显示如下界面，我们输入<code>security.enterprise_roots.enabled</code>。</p>
<p><img data-src="https://z3.ax1x.com/2021/08/15/fcKThT.png" alt="config2"></p>
<p>我们默默地把布尔值修改成<code>True</code>，重启浏览器，搞定！</p>
<p><img data-src="https://z3.ax1x.com/2021/08/15/fcKqc4.png" alt="config3"></p>
<p>如果点击“那把锁”后出现如下界面，说明你成功啦！</p>
<hr>
<p>现在你有没有发现自己空出来了大把时间呢？借助这三种方法，好好“享受”你的编程时光吧！</p>
<p><strong>THE END</strong> 谢谢你的阅读~</p>
]]></content>
      <categories>
        <category>GitHub</category>
        <category>加速</category>
        <category>GitHub</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>加速</tag>
        <tag>DevSidecar</tag>
        <tag>FAQs</tag>
      </tags>
  </entry>
  <entry>
    <title>奇遇</title>
    <url>/2022/12/09/small-but-shining-ideas-16/</url>
    <content><![CDATA[<p><strong>12.9 画信话心课后有感</strong></p>
<p>万幸，上周没有成为最后一节课，然而所剩也不多了。真是可悲，我总是即将失去了，才学会珍惜。</p>
<p>这一周，迎来了12月月考。三个星期之后，就是期末考试了。</p>
<span id="more"></span>
<h2 id="体育课"><a href="#体育课" class="headerlink" title="体育课"></a>体育课</h2><p>脚上在好了，然而体育课还是不能上。上周五不知道是谁把我的本子提前拿回来了，却也不认的我，本子被放在了前台。周一要去上体育课，还没出门，却注意到了那本本子，赶紧抓过来，塞在袋子里。</p>
<p>我坐在偏僻处的木凳上，写作业。但写着写着就写不动了，突然就想起来我的本子，就即兴的画了起来。我面前的两棵树、一盏路灯、八条跑道，在铅笔和本子的摩擦中，被记录了下来。没有人打扰我，这正是我想要的境界——没人评价你。我又题上几行字：</p>
<p>我愿称之为一次奇遇。</p>
<p>阴差阳错让我拿到了这个本子，</p>
<p>居然还能想起来画信。</p>
<p>从此之后，画信似乎真正走进了我的生活。</p>
<h2 id="地铁上"><a href="#地铁上" class="headerlink" title="地铁上"></a>地铁上</h2><p>作业完成。我的包里装着那本珍贵的本子，犹豫了一会还是拿了出来。正好手表里有几张照片，可以拿出来画。于是我在地铁上画的第一幅信，是一株三色堇。很写实，忠诚于照片。用铅笔留下一点字：</p>
<blockquote>
<p>只要你是一朵花</p>
<p>你就能招蜂引蝶</p>
</blockquote>
<p>第二天中午，我突然发现彩铅可以当水粉用。于是上了色，很淡很淡的紫色、黄色，深一点的绿色，又添上两只橙色的蝴蝶。</p>
<p>之后，我又陆续画过金鸡湖畔的车轴草、校园里的一棵树（具体不知道是什么品种）、祭奠蝈蝈先生的青菜叶子（来自实验探究课）、笔袋上的那只白猫，还有雨打的芭蕉。</p>
<h2 id="月考后"><a href="#月考后" class="headerlink" title="月考后"></a>月考后</h2><p>10：30，考试结束，我不愿在教室里多待，就迅速地走去吃饭（不能跑）。结果，没走出去几步，就听见他们讨论题目。我错了，瞬间没了食欲。草草吃了点，就回去了。</p>
<p>写了一会的作业，就和赵臻怡出去散步，在那途中我记住了那棵雨打的芭蕉。这似乎已经是一种传统，我们去找生物王老师聊天到12:45，回来之后就继续自习了。</p>
<p>体育课。我搬了凳子去没雨的地方写作业。有些同学看见我，拉长了音调说“卷”，我也没理会——也理会了，反问一句，“不让我写作业，让我干什么呢？”他们哑口无言了。</p>
<p>这是我一向非常反感的事情——别人看见你在写作业就说你“卷”或很敷衍的说“巨”。我心底的期望是他们能不管我，装作没看到我，更别跟我搞这些——just leave me alone!</p>
<p>放过我罢！</p>
<h2 id="画信课"><a href="#画信课" class="headerlink" title="画信课"></a>画信课</h2><p>这是倒数第三节画信课。我在课前给梅子老师看了我画的那些信，她说，我有一点找到那种感觉了。正是她以前提到过的，“右手再画信，左手在接工作电话”。</p>
<p>我尝试了一会，很迅速的画完，写上几行字，就交了差，去找赵臻怡说话。</p>
<p>我这节课终于有了一张我们两个人的照片。</p>
<p>天色暗沉，小雨不停，一切都灰蒙蒙的。我心里莫名的堵着，却说不出来异常在哪里。</p>
<p>这节课的主题是画“音乐”，我画的是一片枫叶。</p>
<blockquote>
<p>生命，就是最有意境、最有律动的音乐</p>
<p>即使凋零，我也会记得你</p>
<p>When I thought knew you</p>
<p>Life was always better</p>
<p>Never coulda dreamt that it</p>
<p>Would fall apart this way</p>
<p>I hate to end this story</p>
<p>Cuz I don’t want you lonely</p>
<p>But I don’t think we have the time</p>
<p>To work this out</p>
<p>Before it gets too late</p>
<p>Fall together</p>
<p>Fall apart</p>
<p>Darker weather</p>
<p>On my heart</p>
<p>If only we wanted to stay</p>
<p>If only you’d say</p>
<p>If only</p>
</blockquote>
]]></content>
      <categories>
        <category>随笔</category>
        <category>校园</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows-Linux子系统：快速入门</title>
    <url>/2023/01/03/wsl-installation-guide/</url>
    <content><![CDATA[<p><code>Ubuntu</code>是一个以桌面应用为主的<code>Linux</code>操作系统，很久以前我就听说过它的大名。但当我询问如何在<code>Windows</code>系统里面安装一个时，我才得知要使用<code>VM Ware</code>等虚拟机软件，我也就没有去折腾了。不过买新电脑之后发现<code>Win10</code>自带一个<code>Windows Subsystem for Linux</code>的虚拟机功能，就来尝试一下。期间我也遇到了占用空间过大，<code>apt</code>速度慢等问题，这里也顺带说一下解决方案。</p>
<p><del>但其实到最后我发现装了这个<code>Ubuntu</code>，除了对<code>Shell Script</code>的原生支持以外，对我也没有多少用处（</del></p>
<span id="more"></span>
<h2 id="1-安装WSL与Ubuntu"><a href="#1-安装WSL与Ubuntu" class="headerlink" title="1. 安装WSL与Ubuntu"></a>1. 安装<code>WSL</code>与<code>Ubuntu</code></h2><p>要安装<code>WSL</code>，我们首先需要用管理员权限在<code>powershell</code>中打开两个功能，分别是<code>WSL</code>本身和虚拟化：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">dism.exe /online /<span class="built_in">enable-feature</span> /featurename:Microsoft<span class="literal">-Windows</span><span class="literal">-Subsystem</span><span class="literal">-Linux</span> /all /norestart</span><br><span class="line">dism.exe /online /<span class="built_in">enable-feature</span> /featurename:VirtualMachinePlatform /all /norestart</span><br></pre></td></tr></table></figure>
<p>这个时候我们用<code>wsl</code>这个命令来检查一下是否可用。如果一切正常，使用<code>wsl --install</code>命令就可以安装最新版本的<code>Ubuntu</code>。如果你不想安装<code>Ubuntu</code>而是别的系统的话，可以使用如下语法：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">wsl -<span class="literal">-install</span> <span class="literal">-d</span> &lt;Version&gt;</span><br></pre></td></tr></table></figure>
<p>等安装完毕，之后的话就是设置用户名和密码，这里就不细说了。</p>
<hr>
<h2 id="2-转移Ubuntu文件位置"><a href="#2-转移Ubuntu文件位置" class="headerlink" title="2. 转移Ubuntu文件位置"></a>2. 转移<code>Ubuntu</code>文件位置</h2><p>之后你就可以用<code>apt</code>来安装你需要的包了，不过安装几个较大的包比如<code>nodejs</code>和<code>python</code>之后，你会发现<code>C</code>盘突然被<code>Ubuntu</code>占用了很多，像我一下子就60%~70%。这个时候我就打算把<code>Ubuntu</code>移到<code>D</code>盘去，幸运的是，这只需要几个步骤。</p>
<p>首先，<code>wsl -l</code>获取自己的<code>Ubuntu</code>版本号，像我是<code>Ubuntu-20.04</code>。然后我们停止系统的运行，导出整个系统，并反注册。<code>wsl</code>会生成一个打包的<code>tar</code>文件，我们再导入即可：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">wsl -<span class="literal">-export</span> Ubuntu<span class="literal">-20</span>.<span class="number">04</span> d://ProgramFiles//Ubuntu//ubuntu<span class="literal">-20</span>.<span class="number">04</span>.tar</span><br><span class="line">wsl -<span class="literal">-unregister</span> Ubuntu<span class="literal">-20</span>.<span class="number">04</span></span><br><span class="line">wsl -<span class="literal">-import</span> Ubuntu<span class="literal">-20</span>.<span class="number">04</span> d://wslubuntu//Ubuntu d://ProgramFiles//Ubuntu//ubuntu<span class="literal">-20</span>.<span class="number">04</span>.tar</span><br></pre></td></tr></table></figure>
<p>然后我们用<code>wsl</code>命令来看一下是否注册成功。但这个时候有个问题：你的用户名变成了<code>root</code>。这个时候我们在<code>Ubuntu</code>里面执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">myUsername=&lt;username&gt;</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;[user]\ndefault=<span class="variable">$myUsername</span>&quot;</span> &gt;&gt; /etc/wsl.conf</span><br></pre></td></tr></table></figure>
<p>就可以把名字改回来。之前生成的系统<code>tar</code>文件也就可以删除了。最后我们用管理员权限打开<code>powershell</code>重启<code>Ubuntu</code>系统，来应用所有更改：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">net stop LxssManager</span><br><span class="line">net <span class="built_in">start</span> LxssManager</span><br></pre></td></tr></table></figure>
<p>（<code>wsl</code>的运行依靠<code>LxssManager</code>，具体也不用太管）</p>
<hr>
<h2 id="3-修改Ubuntu镜像源"><a href="#3-修改Ubuntu镜像源" class="headerlink" title="3. 修改Ubuntu镜像源"></a>3. 修改<code>Ubuntu</code>镜像源</h2><p>首先进入<code>apt</code>的文件夹：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/apt/</span><br></pre></td></tr></table></figure>
<p>然后对原先的配置文件做一个镜像，</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo cp -a sources.list sources.backup.list</span><br></pre></td></tr></table></figure>
<p>到清华镜像官方获取到<code>ubuntu</code>的链接，比如<code>20.04</code>是这样：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse</span><br><span class="line"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class="line"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class="line"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse</span><br><span class="line"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse</span><br><span class="line"></span><br><span class="line"># 预发布软件源，不建议启用</span><br><span class="line"># deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-proposed main restricted universe multiverse</span><br><span class="line"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-proposed main restricted universe multiverse</span><br></pre></td></tr></table></figure>
<p>然后用<code>vim</code>或<code>nano</code>编辑<code>sources.list</code>，清空后全部粘贴，保存退出。重启<code>wsl</code>，并使用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure>
<p>来确认是否切换到清华的镜像源了。</p>
<hr>
<h2 id="4-安装xfce4图形界面"><a href="#4-安装xfce4图形界面" class="headerlink" title="4. 安装xfce4图形界面"></a>4. 安装<code>xfce4</code>图形界面</h2><p>既然有了命令行的<code>Ubuntu</code>，我们能不能拥有它的<code>GUI</code>呢？<del>我们可以借助<code>xfce4</code>搭配远程桌面来搭建一个图形界面。</del></p>
<p><strong>这里不建议使用<code>xfce4</code>，容易黑屏、报错，建议直接参考第5步，安装<code>gnome</code>桌面。</strong></p>
<h3 id="4-1-安装依赖"><a href="#4-1-安装依赖" class="headerlink" title="4.1 安装依赖"></a>4.1 安装依赖</h3><p>安装<code>xrdp</code>、<code>xfce4</code>和<code>xfce4-goodies</code>。中间一路回车即可（会有一个粉色的界面）。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install xrdp xfce4 xfce4-goodies</span><br></pre></td></tr></table></figure>
<h3 id="4-2-修改xrdp配置"><a href="#4-2-修改xrdp配置" class="headerlink" title="4.2 修改xrdp配置"></a>4.2 修改<code>xrdp</code>配置</h3><p>先对原配置做一个备份：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo cp /etc/xrdp/xrdp.ini /etc/xrdp/xrdp.ini.bak</span><br></pre></td></tr></table></figure>
<p>然后，执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo sed -i <span class="string">&#x27;s/3389/3390/g&#x27;</span> /etc/xrdp/xrdp.ini</span><br><span class="line">sudo sed -i <span class="string">&#x27;s/max_bpp=32/#max_bbp=32\nmax_bpp=128/g&#x27;</span> /etc/xrdp/xrdp.ini</span><br><span class="line">sudo sed -i <span class="string">&#x27;s/xservervpp=24/#xservervpp=24\nxserverbpp=128/g&#x27;</span> /etc/xrdp/xrdp.ini</span><br></pre></td></tr></table></figure>
<p>就会自动修改。然后执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> xfce4-session &gt; ~/.xsession</span><br><span class="line">sudo nano /etc/xrdp/startwm.sh</span><br></pre></td></tr></table></figure>
<p>把光标移到文件的最后两行，用<code>#</code>号注释掉，然后新增两行，最后效果如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># test -x /etc/X11/Xsession &amp;&amp; exec /etc/X11/Xsession</span></span><br><span class="line"><span class="comment"># exec /binsh /etc/X11/Xsession</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># xfce</span></span><br><span class="line">startxfce4</span><br></pre></td></tr></table></figure>
<p>保存并退出（<kbd>Ctrl+X</kbd>，按<code>y</code>并回车，退出）。</p>
<h3 id="4-3-启动远程桌面"><a href="#4-3-启动远程桌面" class="headerlink" title="4.3 启动远程桌面"></a>4.3 启动远程桌面</h3><p>首先复制如下代码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo /etc/init.d/xrdp start</span><br></pre></td></tr></table></figure>
<p>然后<code>vim</code>或<code>nano</code>打开<code>bash.bashrc</code>添加一个别名：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">alias</span> remote=<span class="string">&quot;sudo /etc/init.d/xrdp start&quot;</span></span><br></pre></td></tr></table></figure>
<p>重启<code>wsl</code>。然后输入<code>remote</code>，就会启动服务器。用<code>Win10</code>自带的远程桌面连接<code>localhost:3390</code>，会跳出来一个蓝色框，输入自己<code>Ubuntu</code>的用户名和密码，就可以进入<code>Ubuntu</code>的远程桌面了。</p>
<hr>
<h2 id="5-gnome图形界面"><a href="#5-gnome图形界面" class="headerlink" title="5. gnome图形界面"></a>5. <code>gnome</code>图形界面</h2><p>这个<code>gnome</code>图形界面是要求<code>WSL2</code>的，如果你是<code>Win10</code>则默认是<code>WSL1</code>。先确认一下：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">wsl <span class="literal">-l</span> <span class="literal">-v</span></span><br></pre></td></tr></table></figure>
<p>如果是<code>WSL1</code>的话则需要安装升级包：<a href="https://learn.microsoft.com/zh-cn/windows/wsl/install-manual#step-4---download-the-linux-kernel-update-package">微软官网</a>，下载下来安装即可。然后管理员执行：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">wsl -<span class="literal">-set</span><span class="literal">-version</span> Ubuntu<span class="literal">-20</span>.<span class="number">04</span> <span class="number">2</span> </span><br></pre></td></tr></table></figure>
<p>它就会自动升级为<code>WSL2</code>。然后进入<code>wsl</code>，执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install git</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/DamionGans/ubuntu-wsl2-systemd-script.git</span><br><span class="line"><span class="built_in">cd</span> ubuntu-wsl2-systemd-script/</span><br><span class="line">bash ubuntu-wsl2-systemd-script.sh</span><br></pre></td></tr></table></figure>
<p>来安装依赖<code>systemd</code>。安装好之后重启：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">wsl -<span class="literal">-shutdown</span></span><br><span class="line">wsl</span><br></pre></td></tr></table></figure>
<p>输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl</span><br></pre></td></tr></table></figure>
<p>如果它不回复你</p>
<blockquote>
<p>System has not been booted with systemd as init system (PID 1). Can’t operate.</p>
</blockquote>
<p>那就说明你做对了，随后我们来安装<code>gnome</code>桌面（确保你已经把<code>Ubuntu</code>切换到了<code>D</code>盘或其他，因为会占用3个<code>G</code>左右）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install -y ubuntu-desktop</span><br></pre></td></tr></table></figure>
<p>然后安装<code>xrdp</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install -y xrdp</span><br><span class="line">sudo adduser xrdp ssl-cert</span><br><span class="line">sudo systemctl restart xrdp</span><br></pre></td></tr></table></figure>
<p>配置防火墙：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ufw allow 3389</span><br></pre></td></tr></table></figure>
<p>这个时候远程连接<code>localhost:3389</code>即可。会要求你输入账号密码，进入图形界面后还是要你输入密码。如果一切正常的话，你的<code>gnome</code>图形界面就安装成功了！</p>
<p><strong>注：如果你在升级<code>WSL2</code>后发现<code>sudo apt update</code>卡死了，别怕重装一次<code>Ubuntu</code>，重新执行1~3步即可。</strong></p>
<hr>
<p>至此，你已经拥有了<code>WSL</code>中的<code>Ubuntu</code>，并且更改了镜像源，成功地开启了远程桌面。听说<code>Linux</code>系统中有意思的命令还挺多的，那下一篇文章就来讲讲这个。</p>
<hr>
<p><strong>致谢</strong></p>
<p>这里写一下我参考到的文章：</p>
<ol>
<li><p><a href="https://blog.csdn.net/weixin_50321412/article/details/124592284">Win10 安装wsl并将文件位置从C盘迁移至D盘_快乐啊啊啊啊啊的博客-CSDN博客_wsl迁移到d盘</a></p>
</li>
<li><p><a href="https://blog.csdn.net/x356982611/article/details/107782513?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1-107782513-blog-108133340.pc_relevant_default&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1-107782513-blog-108133340.pc_relevant_default&amp;utm_relevant_index=1">windows下重启wsl_天已青色等烟雨来的博客-CSDN博客_wsl reboot</a></p>
</li>
<li><p><a href="https://blog.csdn.net/qq_41667316/article/details/120931194">更改手动导入的wsl的默认登录用户_skyandcloud-pal的博客-CSDN博客_wsl修改默认用户</a></p>
</li>
<li><p><a href="https://www.jianshu.com/p/af94731626e3">WSL GUI图形界面(xfce4)的安装 - 简书</a></p>
</li>
<li><p><a href="https://blog.csdn.net/m0_51194302/article/details/127891929">wsl安装ubuntu并设置gnome图形界面详细步骤（win11+ubuntu18）_heusjh的博客-CSDN博客_wsl安装gnome桌面</a></p>
</li>
</ol>
<p><strong>THE END</strong>感谢您的阅读~</p>
]]></content>
      <categories>
        <category>编程</category>
        <category>后端</category>
        <category>WSL</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>Backend</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>全文下载CSDN文章——Python爬虫一则</title>
    <url>/2022/10/27/web-spider-for-CSDN/</url>
    <content><![CDATA[<p>又是鸽了将近一个月了，今天来写点不一样的，<code>CSDN</code>爬虫。这大概是我这个博客网站上第一次出现<code>Python</code>项目吧，之后我会再更新一个长一点的，<code>Python</code>蒲丰投针，这是我已经完成的一个学校项目。</p>
<p>本人不经常上<code>CSDN</code>，但偶尔需要搜一些资料不可避免的就会搜到相关的链接。但不幸的是，本人没有<code>CSDN</code>的号，无法直接复制代码块的内容，这就非常的麻烦。当然不用爬虫肯定也是有办法的，但极其的麻烦也很浪费时间，我个人觉得这是比较烦的。所以我就上网搜到了一个爬虫，可以直接下载<code>CSDN</code>文章的全文。</p>
<p><strong>注：爬虫这个技术还是比较敏感的——下载到的文章请不要用于商业用途，我个人也建议转载时放一下原链接，这样也避免日后的一些问题。</strong></p>
<span id="more"></span>
<h2 id="1-原先我是怎么做的"><a href="#1-原先我是怎么做的" class="headerlink" title="1. 原先我是怎么做的"></a>1. 原先我是怎么做的</h2><p>正常的文章内容是可以复制的，然而，一般人谁会去要那些呢，可不是去<del>白嫖</del>学习代码？（我没有指名道姓是谁）</p>
<p>那我真的想要代码怎么办？来看一下一种很麻烦的办法：</p>
<p><img data-src="https://s1.ax1x.com/2022/10/29/x56JXD.png" alt=""></p>
<p>首先不管怎么样我们需要先定位到这个代码块的<code>&lt;pre&gt;</code>元素。但和它同名、同<code>class</code>的元素实在是太多了，怎么办呢？我就加一个<code>useful</code>这个类，区别开来（叫什么其实无所谓）</p>
<p><img data-src="https://s1.ax1x.com/2022/10/29/x56N0H.png" alt=""></p>
<p>之后的话，我们直接用调试的命令行来找到这个代码块的<code>innerText</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementsByClassName(<span class="string">&quot;useful&quot;</span>)[<span class="number">0</span>].innerText</span><br></pre></td></tr></table></figure>
<p><img data-src="https://s1.ax1x.com/2022/10/29/x56tne.png" alt=""></p>
<p>然后我们就获得了这一段代码的内容了。</p>
<p><img data-src="https://s1.ax1x.com/2022/10/29/x5681K.png" alt=""></p>
<p>但可惜的是——不知道细心的你有没发现——这一整段代码都需要转义（<code>escaping</code>）。红框里的就是用<code>innerText</code>获取到的代码中被自动转义过的地方（未框全）：</p>
<p><img data-src="https://s1.ax1x.com/2022/10/29/x56G6O.png" alt=""></p>
<p>当然我肯定有办法反转义，但这实在是太无聊了。然后如果一整篇文章里有太多想要的代码块的话，这个方法也不实用，<code>for in</code>循环也得反转义啊。</p>
<p>所以……出于我<del>的懒惰</del>对爬虫的激情——我就上网搜到了一个（甚至都不是自己写的）。</p>
<h2 id="2-CSDN上的解决方案"><a href="#2-CSDN上的解决方案" class="headerlink" title="2. CSDN上的解决方案"></a>2. <code>CSDN</code>上的解决方案</h2><p>对没错，这个爬取<code>CSDN</code>的程序很巧就是从<code>CSDN</code>上来的。原作的话：<a href="https://blog.csdn.net/m0_53268714/article/details/121058706">【python】爬取CSDN博客文章（保存为html，txt，md）_cloudmapleleaf的博客-CSDN博客</a>。我比较喜欢的在于这个<code>HTML</code>转<code>MD</code>的功能，然后它自己是可以自动转义的。我就不让大家去自己折腾了，我这里完全可以一键复制（）我自己是进行过一点点小修改的。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> html2text <span class="keyword">import</span> HTML2Text</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">from</span> html <span class="keyword">import</span> unescape</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">requirements</span></span><br><span class="line"><span class="string">打了箭头的才需要手动安装，其余是自动安装的依赖库</span></span><br><span class="line"><span class="string">certifi==2021.10.8</span></span><br><span class="line"><span class="string">charset-normalizer==2.0.7</span></span><br><span class="line"><span class="string">cssselect==1.1.0</span></span><br><span class="line"><span class="string">html2text==2020.1.16  --  &lt;--</span></span><br><span class="line"><span class="string">idna==3.3</span></span><br><span class="line"><span class="string">lxml==4.6.3  -----------  &lt;--</span></span><br><span class="line"><span class="string">requests==2.26.0 -------  &lt;--</span></span><br><span class="line"><span class="string">urllib3==1.26.7</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">crawl</span>(<span class="params">url</span>):</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.54 Safari/537.36&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;crawl...&quot;</span>)</span><br><span class="line">    <span class="comment"># 配置header破反爬</span></span><br><span class="line">    response = requests.get(url, headers=headers)</span><br><span class="line">    <span class="comment"># 200就继续</span></span><br><span class="line">    <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">        html = response.content.decode(<span class="string">&quot;utf8&quot;</span>)</span><br><span class="line">        <span class="comment"># print(html)</span></span><br><span class="line">        tree = etree.HTML(html)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;look for text...&quot;</span>)</span><br><span class="line">        <span class="comment"># 找到需要的html块</span></span><br><span class="line">        title = tree.xpath(<span class="string">&#x27;//*[@id=&quot;articleContentId&quot;]/text()&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        block = tree.xpath(<span class="string">&#x27;//*[@id=&quot;content_views&quot;]&#x27;</span>)</span><br><span class="line">        <span class="comment"># html</span></span><br><span class="line">        ohtml = unescape(etree.tostring(block[<span class="number">0</span>]).decode(<span class="string">&quot;utf8&quot;</span>))</span><br><span class="line">        <span class="comment"># 纯文本</span></span><br><span class="line">        text = block[<span class="number">0</span>].xpath(<span class="string">&#x27;string(.)&#x27;</span>).strip()</span><br><span class="line">        <span class="comment"># print(&quot;html:&quot;, ohtml)</span></span><br><span class="line">        <span class="comment"># print(&quot;text:&quot;, text)</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;title:&quot;</span>, title)</span><br><span class="line">        save(ohtml, text)</span><br><span class="line">        <span class="comment"># 完成！</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;finish!&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;failed!&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save</span>(<span class="params">html, text</span>):</span></span><br><span class="line">    filename = <span class="built_in">int</span>(time.time())</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;output&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> os.listdir():</span><br><span class="line">        <span class="comment"># 不存在输出文件夹就创建</span></span><br><span class="line">        os.mkdir(<span class="string">&quot;output&quot;</span>)</span><br><span class="line">        os.mkdir(<span class="string">&quot;output/html&quot;</span>)</span><br><span class="line">        os.mkdir(<span class="string">&quot;output/text&quot;</span>)</span><br><span class="line">        os.mkdir(<span class="string">&quot;output/markdown&quot;</span>)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">f&quot;output/html/<span class="subst">&#123;filename&#125;</span>.html&quot;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf8&#x27;</span>) <span class="keyword">as</span> html_file:</span><br><span class="line">        <span class="comment"># 保存html</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;write html...&quot;</span>)</span><br><span class="line">        html_file.write(html)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">f&quot;output/text/<span class="subst">&#123;filename&#125;</span>.txt&quot;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf8&#x27;</span>) <span class="keyword">as</span> txt_file:</span><br><span class="line">        <span class="comment"># 保存纯文本</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;write text...&quot;</span>)</span><br><span class="line">        txt_file.write(text)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">f&quot;output/markdown/<span class="subst">&#123;filename&#125;</span>.md&quot;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf8&#x27;</span>) <span class="keyword">as</span> md_file:</span><br><span class="line">        <span class="comment"># 保存markdown</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;write markdown...&quot;</span>)</span><br><span class="line">        text_maker = HTML2Text()</span><br><span class="line">        <span class="comment"># md转换</span></span><br><span class="line">        md_text = text_maker.handle(html)</span><br><span class="line">        md_file.write(md_text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 你想要爬取的文章url</span></span><br><span class="line">    url = <span class="built_in">str</span>(<span class="built_in">input</span>(<span class="string">&quot;Url: &quot;</span>))</span><br><span class="line">    crawl(url)</span><br></pre></td></tr></table></figure>
<p>用之前的话是需要安装3个<code>package</code>的：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">pip install lxml html2text requests</span><br></pre></td></tr></table></figure>
<p>然后我们就可以方便的复制到我们急需的代码或命令了。不过，如需转载你下载下来的文章，我个人觉得还请放一下原文链接的哦。</p>
<h2 id="3-图片去水印（不是P图"><a href="#3-图片去水印（不是P图" class="headerlink" title="3. 图片去水印（不是P图"></a>3. 图片去水印（不是P图</h2><p>这是我在爬取文章之后不经意间发现的一个功能。比如我们有下面这样一张图片：</p>
<p><img data-src="https://s1.ax1x.com/2022/10/29/x5fmnK.png" alt=""></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://img-blog.csdnimg.cn/b1858e0e5a2a4221bd24f93f89a951c9.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pif6L6w5rWp5a6H,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center</span><br></pre></td></tr></table></figure>
<p>有没有觉得后面那个<code>x-oss-process</code>很可疑？话说这个图片的水印竟然是请求时服务器再加上去的，甚至不是上传时水印。我们直接把那些配置都删掉，就可以得到没有水印的图片了。</p>
<p><img data-src="https://img-blog.csdnimg.cn/b1858e0e5a2a4221bd24f93f89a951c9.png" alt=""></p>
<hr>
<p><strong>THE END</strong>感谢您的阅读~</p>
]]></content>
      <categories>
        <category>编程</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>CSDN</tag>
      </tags>
  </entry>
</search>
